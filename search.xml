<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[知足常乐]]></title>
    <url>%2F2019%2F10%2F07%2FAbout%20Alessa0%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Soul-like]]></title>
    <url>%2F2019%2F10%2F06%2Fsoul-like%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! U2FsdGVkX19Sld/VvmMw6/4srNAm70ScdWYwF4K+noQ4MRIqtRh6T7LE0u9On2VAqCtf4/TAafH5ytTriqHEby8AoOdbPM8+yjce9Khv7aPM7ADjLOqH2opSKwxQVmrOcclCcwTQQ4ytxFW7J6wJNa7ogCgJDN6c27Fhl4e8z/IKt5duW8yiWTj+O7aX3fmjpo+SuoGh9uXeoxly/g6Qp9VKfq7/xW9NQ0uwCfQkD0VetWrGcraN7p5BQIyUHSPZ7Eu4lbgtdzivQRrEEFd1E1h4D11Ga5n1QztEyW0TH6wUktq7fUpRNVgaq/Ppe29a90KZDOwzuvmpbSEnDsbjA+kjirWuEqYIkuQoZBxaE6qbsZDZh1dfGDODfzQR/r+frX5g48eDYDd8D/DwHPLQ8F9pOUdlc9LEHfcv+AuTKEmYve/s5jizCCtGKR2gYTeB/DLTSo/bfYQwizDbOphInmLNV1mCrtKxDK++ZHhy0Ncr/SN4JJ0CbWkxSjYe2G/BUuUCsS5NOj0ONjrA3D4cKZL2FE20lLqDI5pAi3o2Q60+Oknz5lBA6MUWiOdGFtkKqlGSkfkB1XTGKgSdsdNR79i9VXtxOcyBrve6thFeq4QcBk5rpugZ/t8H8VSDqQja1vXMfuooDRq2TbOjk0mnd51+qqphseP/GS8rGP5hILKY3cgNBOGnitZWLHhJjxKt]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-调度]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E8%B0%83%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[调度 由于可能同时有多个CPU请求进行调度，故需要进程表锁ptable.lock来避免竞争。 因此，进程在让出CPU前，必须要获得进程表锁，并释放其拥有的其他锁（避免同时持有多个锁导致死锁），修改自己的状态proc-&gt;state，然后进行调度。 函数 以下函数位于代码文件proc.c中。 sched 进程进入调度器，且必须持有进程表锁并改变进程状态。由于进程此时持有进程表锁，所以CPU应该是在关中断的情况下运行。 12345678910111213141516171819202122voidsched(void)&#123; int intena; struct proc *p = myproc(); // 未持有进程表锁，不应进入调度，引发内核错误 if(!holding(&amp;ptable.lock)) panic("sched ptable.lock"); // 处于锁状态，不应进入调度，引发内核错误 if(mycpu()-&gt;ncli != 1) panic("sched locks"); // 进程处于运行态，不应进入调度，引发内核错误 if(p-&gt;state == RUNNING) panic("sched running"); // 开中断，不可执行mycpu()函数，不应进入调度，引发内核错误 if(readeflags()&amp;FL_IF) panic("sched interruptible"); intena = mycpu()-&gt;intena; // 暂存状态 swtch(&amp;p-&gt;context, mycpu()-&gt;scheduler); // 保存当前上下文，并切换到之前保存的调度器的上下文，进入调度器 mycpu()-&gt;intena = intena; // 恢复状态&#125; yield 在xv6中，使用时间片轮转法进行调度。当进程用完它的CPU时间片时，时钟中断会调用yield函数来让出CPU给新的进程，yield调用sched函数，sched调用swtch来切换都调度器线程： 12345678voidyield(void)&#123; acquire(&amp;ptable.lock); //DOC: yieldlock 请求进程表锁 myproc()-&gt;state = RUNNABLE; // 切换进程状态 sched(); release(&amp;ptable.lock); // 释放进程表锁&#125; scheduler 每个CPU在设置完成自己之后调用scheduler。 调度器scheduler永远不会返回，而是不断循环。循环步骤为： 选择要运行的流程 swtch开始运行该过程 最终该过程通过swtch将控制转移回调度程序。 1234567891011121314151617181920212223242526272829303132333435363738voidscheduler(void)&#123; struct proc *p; struct cpu *c = mycpu(); c-&gt;proc = 0; // 不断循环，永不停止 for(;;)&#123; // 开中断，以允许I/O到达 sti(); // 在进程表上不断循环，寻找进程并运行 acquire(&amp;ptable.lock); // 请求进程表锁 for(p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)&#123; if(p-&gt;state != RUNNABLE) // 进程不可运行，转到下一个进程 continue; // Switch to chosen process. It is the process's job // to release ptable.lock and then reacquire it // before jumping back to us. // 切换到选定的进程 c-&gt;proc = p; switchuvm(p); // 切换到该进程的页表 p-&gt;state = RUNNING; swtch(&amp;(c-&gt;scheduler), p-&gt;context); // 切换到该进程运行 switchkvm(); // 当没有进程正在运行时，将页表寄存器切换到仅内核页表。 // Process is done running for now. // It should have changed its p-&gt;state before coming back. // 进程已结束运行，改变自身状态 c-&gt;proc = 0; &#125; release(&amp;ptable.lock); // 释放进程表锁，防止其他CPU无法进行调度 &#125;&#125; 锁与中断 锁 为保证进程状态的上下文在运行swtch时保持不变：进程表锁由旧进程获得，新进程释放。 为防止其他CPU闲置时锁被当前CPU占有而无法调度，其他CPU上运行进程无法让出CPU，导致死锁的情况：在遍历一次进程表后总要释放锁。 中断 为防止所有进程都在等待I/O时关中断导致的I/O无法到达引发的死锁，调度器在每次循坏开始前进行开中断。 睡眠与唤醒 函数sleep和wakeup位于代码文件proc.c中。 使进程进入睡眠或进行唤醒均需要改变进程状态，故需要进程表锁以保证状态修改的原子性。其中函数sleep要在使进程进入睡眠前获取进程表锁，以保证在使函数进入睡眠时至少持有一个锁，防止wakeup在进程进入睡眠前被调用导致的死锁。当sleep本身持有的锁为进程表锁时，则略过请求这一步，防止死锁。 可改进之处 调度 轮转法无优先级的区分 会导致高优先级的进程无法优先运行，可能导致系统运行时间的增加，影响使用者在实际使用时的体验。可使用其他较为复杂的算法，如高响应比优先算法等以改进体验。 睡眠与唤醒 唤醒需要遍历进程表 在进程数量大的时候这种做法效率极低。使用另一个结构体来维护链表可大大提高效率。 唤醒时会唤醒队列中全部进程 大多数情况下，同一时间需要唤醒的进程在队列中是少数部分，许多仍需等待的进程将会被“莫名其妙”地唤醒并再度检查状态重新进入睡眠，导致操作系统需要处理许多新的不必要的任务。 唤醒时应分为个体唤醒（唤醒单个进程）和群体唤醒（唤醒所有进程），减少系统负担。]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-管道]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E7%AE%A1%E9%81%93%2F</url>
    <content type="text"><![CDATA[管道 从管道的一端写入数据字节，然后数据被拷贝到内核缓冲区中，接着进程就能从管道的另一端读取数据了。 在xv6中，管道使用被读取字节数nread和被写入字节数nwrite的差值判断管道状态： nwrite == nread 则数据未写入或被读取完毕，管道空 nwrite == nread + PIPESIZE 则管道满 由于管道的读取与写入均需要使用nread和nwrite以获悉管道状态，故这两个计数参数不能在某一函数（写入/读取）清零，否则将影响另一函数（读取/写入）的执行。因此，xv6中使用data[nread % PIPESIZE]和data[nwrite % PIPESIZE]来控制读写时的管道数据偏移，即循环写/读，在data[PIPESIZE-1]后写入的数据存放在data[0]中。 数据结构 12345678struct pipe &#123; struct spinlock lock; // 锁 char data[PIPESIZE]; // 管道数据 uint nread; // 被读取字节数，从缓冲区中读取 uint nwrite; // 被写入字节数，写入缓冲区 int readopen; // 读文件描述符是否依旧处于open状态 int writeopen; // 写文件描述符是否依旧处于open状态&#125;; 管道函数 以下分析管道读写函数，其他函数仅列出函数作用，详细注释见代码文件pipe.c。 读写 管道读写操作通过管道锁实现互斥，操作运行时必须持有管道锁。 管道数据写入时首先获取管道锁而后写入数据，若达到管道容量上限，则写操作唤醒读操作后进入睡眠等待并释放管道锁。此时读操作可获得请求的管道锁，在读取完数据后管道变空，则读操作唤醒写操作后进入睡眠等待并释放管道锁。而后管道写操作再次获得管道锁，循环往复直至数据传输完毕，其中最后一次传输可能未写满管道。 当使用管道的操作被杀后，管道读写操作都将终止；当管道不可读时，管道写操作将被终止。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// 管道写intpipewrite(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 for(i = 0; i &lt; n; i++)&#123; while(p-&gt;nwrite == p-&gt;nread + PIPESIZE)&#123; // 管道满 // 如果管道文件不可读或进程被杀，释放管道锁并终止管道写操作 if(p-&gt;readopen == 0 || myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 sleep(&amp;p-&gt;nwrite, &amp;p-&gt;lock); // 管道写操作进入睡眠等待（睡眠时将释放管道锁） &#125; p-&gt;data[p-&gt;nwrite++ % PIPESIZE] = addr[i]; // 将所需读取的块内数据赋值给管道数据 &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 release(&amp;p-&gt;lock); // 释放管道锁 return n;&#125;//管道读intpiperead(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 while(p-&gt;nread == p-&gt;nwrite &amp;&amp; p-&gt;writeopen)&#123; //DOC: 管道为空且管道可写，则管道读操作可进入睡眠 // 进程被杀，释放管道锁，终止管道读操作 if(myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; sleep(&amp;p-&gt;nread, &amp;p-&gt;lock); //DOC: piperead-sleep 管道读操作进入睡眠等待（睡眠时将释放管道锁） &#125; for(i = 0; i &lt; n; i++)&#123; // 拷贝数据 if(p-&gt;nread == p-&gt;nwrite) // 读取字节数等于写入字节数，表示读取完成 break; addr[i] = p-&gt;data[p-&gt;nread++ % PIPESIZE]; // 将所需读取的管道数据赋值给块内数据 &#125; wakeup(&amp;p-&gt;nwrite); // 通知睡眠中的写者缓冲区中可写 release(&amp;p-&gt;lock); return i;&#125; 其他 pipealloc 管道分配，并初始化管道。 pipeclose 管道关闭。若读写两方均关闭，则释放内存；否则关闭管道一端并唤醒另一方。当关闭写端时，仍可进行读操作，但将管道内剩余数据读完后，再次进行读操作便返回0，相当于读到文件末尾；当关闭读段时，写操作会在进行过程中中断。]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-文件系统]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[文件系统总体设计 文件系统分层 如图所示xv6的文件系统分6层实现： 第一层（自下而上）通过块缓冲读写 IDE 硬盘，同步对磁盘的访问，且通过块的锁保证同一时间只有一个内核进程可以修改磁盘块； 第二层使得更高层的接口可以将对磁盘的更新按会话打包，通过会话的方式来保证这些操作是原子操作。 第三层提供无名文件，每一个文件由一个inode和一连串的数据块组成。 第四层将目录实现为一种特殊的inode，内容是一连串的目录项，每一个目录项包含一个文件名和对应的inode。 第五层提供了层次路经名（如/xx/xxx），这一层通过递归的方式来查询路径对应的文件。 第六层将许多资源（如管道，设备，文件等）抽象为文件系统的接口，极大地简化了程序员的工作。 磁盘分层 磁盘分层为引导块、超级块、日志块、inode块、空闲块位图和数据块等。 文件系统不使用引导块；超级块包含了文件系统的元信息；日志块中的日志维护了文件系统操作的原子性，防止操作过程中引发的系统崩溃而导致的数据不同步；inode块用于存放inode（一个块可存放多个inode）；空闲块位图便于查找空闲的块；数据块中保存了文件和目录等内容。 块缓冲层 需要实现的目标 同步对磁盘的访问。对于任意一个块，同一时间仅有一份拷贝放在内存中且只允许一个内核线程对该拷贝进行修改。 缓存常用的块以减少磁盘读取次数，提高系统效率。 实现方案 代码参见bio.c。 根据时间与空间局部性原理，将最近经常访问的磁盘块缓存在内存中，并使用LRU替换策略。 结构定义 xv6将缓冲区分为两种状态： B_VALID 意味着这个缓冲区拥有磁盘块的有效内容； B_DIRTY 意味着缓冲区的内容已经被改变并且需要写回磁盘； 与旧版相比，B_BUSY 状态在最新版代码中被删去。但由于缓存区中的块的锁的存在，只有持有锁才能访问该块，而在另一线程未使用完成前，该锁不会被释放，此时只能循环等待锁的释放，获得锁后方可获得块。故依旧可保持块内容的原子性。 12345678910111213141516171819202122// 内存中的磁盘块结构struct buf &#123; int flags; // 标记磁盘状态，valid/dirty uint dev; // 磁盘设备号 uint blockno; // 块编号 struct sleeplock lock; uint refcnt; // 引用计数 struct buf *prev; // LRU cache list 使用LRU替换 struct buf *next; // 链式结构连接磁盘块 struct buf *qnext; // 磁盘队列 uchar data[BSIZE]; // 块大小为512字节&#125;;// 块缓冲区结构struct &#123; struct spinlock lock; struct buf buf[NBUF]; // 通过 prev/next 连接所有缓冲块 // 其中 head.next 是最近最常使用的块. struct buf head;&#125; bcache; 初始化 binit 从一个静态数组buf中构建出一个有NBUF个元素的双向链表。所有对块缓冲的访问都通过链表而非静态数组。 123456789101112131415161718192021voidbinit(void)&#123; struct buf *b; // 初始化块缓冲锁 initlock(&amp;bcache.lock, "bcache");//PAGEBREAK! // 构建缓冲双向链表 bcache.head.prev = &amp;bcache.head; bcache.head.next = &amp;bcache.head; for(b = bcache.buf; b &lt; bcache.buf+NBUF; b++)&#123; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; // 初始化缓冲区中的块的锁 initsleeplock(&amp;b-&gt;lock, "buffer"); bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125;&#125; 查找 bget 扫描缓冲区链表，通过给定的设备号和扇区号找到对应的缓冲区。如果未找到，则分配一个缓冲区，否则返回一个持有锁的缓冲区。代码中在双向链表的搜索中向最近最常使用方向查找，若未找到则向另一方向查找空闲缓冲区以分配。 其中若找到缓冲区中指定的块，返回的结果也不一定是指定的块。因为在请求该块的锁前已释放缓冲区锁，若该块未持有锁且正在被用来缓冲另外一个块，则重新获得锁时已是另一个块。 123456789101112131415161718192021222324252627282930313233343536static struct buf*bget(uint dev, uint blockno)&#123; struct buf *b; acquire(&amp;bcache.lock); // 请求块缓冲区锁 // 不能保证 b 仍然是可用的缓冲区：它有可能被用来缓冲另外一个块。 for(b = bcache.head.next; b != &amp;bcache.head; b = b-&gt;next)&#123; if(b-&gt;dev == dev &amp;&amp; b-&gt;blockno == blockno)&#123; b-&gt;refcnt++; // 引用计数加一 release(&amp;bcache.lock); // 释放块缓冲区锁 acquiresleep(&amp;b-&gt;lock); // 请求该块的锁 return b; &#125; &#125; // Not cached; recycle an unused buffer. 未找到则重新查找 // Even if refcnt==0, B_DIRTY indicates a buffer is in use // because log.c has modified it but not yet committed it. // 即使refcnt等于0，也可通过B_DIRTY知道缓冲区被使用，此时日志已修改但未提交 for(b = bcache.head.prev; b != &amp;bcache.head; b = b-&gt;prev)&#123; if(b-&gt;refcnt == 0 &amp;&amp; (b-&gt;flags &amp; B_DIRTY) == 0) &#123; b-&gt;dev = dev; b-&gt;blockno = blockno; b-&gt;flags = 0; b-&gt;refcnt = 1; release(&amp;bcache.lock); acquiresleep(&amp;b-&gt;lock); return b; &#125; &#125; // 未找到块且未能分配块，引发内核错误 panic("bget: no buffers");&#125; 读 bread bread会首先调用bget从缓存中去寻找块是否存在。如果存在直接返回；如果不存在则请求磁盘读操作，读到缓存中后再返回结果。 12345678910111213struct buf*bread(uint dev, uint blockno)&#123; struct buf *b; // 获取缓冲区 b = bget(dev, blockno); // 如果缓冲区中不存在指定的块，则从磁盘中读出 if((b-&gt;flags &amp; B_VALID) == 0) &#123; iderw(b); &#125; return b;&#125; 写 bwrite 设置 B_DIRTY 位并且调用 iderw 将缓冲区的内容写到磁盘。 123456789voidbwrite(struct buf *b)&#123; // 该块未锁，可能已被释放，无法写入，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("bwrite"); b-&gt;flags |= B_DIRTY; iderw(b);&#125; 释放 brelse 将一块缓冲区移动到链表的头部，唤醒睡眠在这块缓冲区上的进程。 123456789101112131415161718192021222324// 唤醒睡眠在这块缓冲区上的进程；将一块缓冲区移动到链表的头部。voidbrelse(struct buf *b)&#123; // 缓冲区未持有块锁，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("brelse"); releasesleep(&amp;b-&gt;lock); // 释放块锁 acquire(&amp;bcache.lock); // 请求 缓冲区锁 b-&gt;refcnt--; //引用计数减一 if (b-&gt;refcnt == 0) &#123; // 无进程等待使用，移动到链表头部 b-&gt;next-&gt;prev = b-&gt;prev; b-&gt;prev-&gt;next = b-&gt;next; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125; release(&amp;bcache.lock); //释放缓冲区锁&#125; 日志层 每一个系统调用都可能包含一个必须从头到尾原子完成的写操作序列，称这样的一个序列为一个会话。任何时候只能有一个进程在一个会话之中，其他进程必须等待当前会话中的进程结束。因此同一时刻日志最多只记录一次会话。 该层用于维护系统崩溃后到原子性，即会话要么完成，要么系统恢复至会话开始前的状态。 块分配器 本部分涉及的函数位于fs.c。 由于bread与brelse已有锁进行互斥，块分配器无需再加锁。 分配新的磁盘块 123456789101112131415161718192021222324static uintballoc(uint dev)&#123; int b, bi, m; struct buf *bp; bp = 0; for(b = 0; b &lt; sb.size; b += BPB)&#123; // 读位图每一块 bp = bread(dev, BBLOCK(b, sb)); for(bi = 0; bi &lt; BPB &amp;&amp; b + bi &lt; sb.size; bi++)&#123; // 读块内每一位 m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0)&#123; // 判断块是否空闲 bp-&gt;data[bi/8] |= m; // 将块标记为使用中 log_write(bp); brelse(bp); // 释放块 bzero(dev, b + bi); // 清零块 return b + bi; &#125; &#125; brelse(bp); &#125; // 超出块范围，引发错误 panic("balloc: out of blocks");&#125; 释放磁盘块 12345678910111213141516static voidbfree(int dev, uint b)&#123; struct buf *bp; int bi, m; readsb(dev, &amp;sb); bp = bread(dev, BBLOCK(b, sb)); bi = b % BPB; m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0) // 释放空闲块，错误 panic("freeing free block"); bp-&gt;data[bi/8] &amp;= ~m; log_write(bp); brelse(bp); // 释放块&#125; inode inode有两种类别： 磁盘上的记录文件大小、数据块扇区号的数据结构 12345678struct dinode &#123; short type; // 区分文件、目录和特殊文件的 i 节点，0表示为空闲节点 short major; // 主设备号（仅限T_DEV） short minor; // 辅设备号（仅限T_DEV） short nlink; // 文件系统中的i节点连接数 uint size; // 文件的字节数 uint addrs[NDIRECT+1]; // 用于这个文件的数据块的块号&#125;; 内存中的一个 i 节点，包含一个磁盘上 i 节点的拷贝，以及一些内核需要的附加信息 123456789101112131415struct inode &#123; uint dev; // Device number 设备号 uint inum; // Inode number inode号 int ref; // Reference count 引用数 struct sleeplock lock; // protects everything below here 保护以下所有数据 int valid; // inode has been read from disk? i节点是否已从磁盘中读取 // 以下均为磁盘上的i节点，即dinode，的拷贝 short type; // copy of disk inode short major; short minor; short nlink; uint size; uint addrs[NDIRECT+1];&#125;; xv6中有inode的缓冲区，作用与块缓冲区相似。以下函数分析仅包含进行特殊操作或较为复杂的函数，其余函数仅写出作用和使用条件（如iunlock）。其中函数位于fs.c。 获取inode iget iget返回的inode的指针将保证这个inode会留在缓存中，不会被删掉且不会被用于缓存另一个文件（即使未读入磁盘dinode内容）。若磁盘内容未读入，则以后在调用ilock时读入。 其中iget返回的inode的是未被锁的。在目录层的目录查找中，调用者已经对dp上锁，如果在调用iget返回之前尝试去锁上该i节点会有二次锁上dp的可能从而造成死锁。 1234567891011121314151617181920212223242526272829303132static struct inode*iget(uint dev, uint inum)&#123; struct inode *ip, *empty; acquire(&amp;icache.lock); // 在inode的cache中寻找目标inode empty = 0; for(ip = &amp;icache.inode[0]; ip &lt; &amp;icache.inode[NINODE]; ip++)&#123; if(ip-&gt;ref &gt; 0 &amp;&amp; ip-&gt;dev == dev &amp;&amp; ip-&gt;inum == inum)&#123; ip-&gt;ref++; release(&amp;icache.lock); return ip; // 此时返回的i节点内容不一定已从磁盘读入cache &#125; if(empty == 0 &amp;&amp; ip-&gt;ref == 0) // 记录扫描到的第一个空槽 empty = ip; &#125; // 保持inode入口，以下未从磁盘读入内容 if(empty == 0) // cache中无i节点空闲，出错 panic("iget: no inodes"); ip = empty; ip-&gt;dev = dev; ip-&gt;inum = inum; ip-&gt;ref = 1; ip-&gt;valid = 0; release(&amp;icache.lock); return ip;&#125; 分配inode ialloc 在设备dev上分配inode：通过给它类型类型将其标记为已分配，返回未锁定但已分配和引用的inode。这里与balloc相似，可参照前文。 123456789101112131415161718192021struct inode*ialloc(uint dev, short type)&#123; int inum; struct buf *bp; struct dinode *dip; for(inum = 1; inum &lt; sb.ninodes; inum++)&#123; bp = bread(dev, IBLOCK(inum, sb)); dip = (struct dinode*)bp-&gt;data + inum%IPB; if(dip-&gt;type == 0)&#123; // inode未分配 memset(dip, 0, sizeof(*dip)); // 分配空间 dip-&gt;type = type; log_write(bp); brelse(bp); return iget(dev, inum); &#125; brelse(bp); &#125; panic("ialloc: no inodes");&#125; 锁inode ilock 锁定给定的inode。如有必要，从磁盘读取inode。 1234567891011121314151617181920212223242526voidilock(struct inode *ip)&#123; struct buf *bp; struct dinode *dip; if(ip == 0 || ip-&gt;ref &lt; 1) panic("ilock"); acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 if(ip-&gt;valid == 0)&#123; // inode内容未从磁盘读取 bp = bread(ip-&gt;dev, IBLOCK(ip-&gt;inum, sb)); dip = (struct dinode*)bp-&gt;data + ip-&gt;inum%IPB; ip-&gt;type = dip-&gt;type; ip-&gt;major = dip-&gt;major; ip-&gt;minor = dip-&gt;minor; ip-&gt;nlink = dip-&gt;nlink; ip-&gt;size = dip-&gt;size; memmove(ip-&gt;addrs, dip-&gt;addrs, sizeof(ip-&gt;addrs)); brelse(bp); ip-&gt;valid = 1; if(ip-&gt;type == 0) // inode未被分配，出错，引发恐慌 panic("ilock: no type"); &#125;&#125; 释放引用 iput 释放对内存中的某一inode的引用，即引用数减一。对iput（）的所有调用必须在会话内，因为它可能释放inode。 123456789101112131415161718192021222324voidiput(struct inode *ip)&#123; acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 // 如果这是最后一个引用，则可以回收inode缓存条目。 if(ip-&gt;valid &amp;&amp; ip-&gt;nlink == 0)&#123; acquire(&amp;icache.lock); int r = ip-&gt;ref; release(&amp;icache.lock); if(r == 1)&#123; // inode has no links and no other references: truncate and free. // 如果那是最后一个引用并且inode没有连接，释放磁盘上的inode（及其内容）。 itrunc(ip); ip-&gt;type = 0; iupdate(ip); ip-&gt;valid = 0; &#125; &#125; releasesleep(&amp;ip-&gt;lock); // 释放 inode 锁 acquire(&amp;icache.lock); ip-&gt;ref--; // 引用计数减一 release(&amp;icache.lock);&#125; 其他函数 readsb 读超级块 bzero 将块内容清零 iupdate 将修改后的内存中inode复制到磁盘；必须在每次更改ip-&gt; xxx字段后调用；它存在于磁盘上，因为i-node缓存是直写式的；调用者必须持有i节点锁。 iunlock 对指定inode解锁 iunlockput iunlock和iput的结合。由于两种常常一起使用，故整合。 bmap 返回inode中第n个块的磁盘块地址，如果没有这样的块，bmap会分配一个。 stati 从inode复制属性信息。 readi 从inode读数据，调用者必须持有ip-&gt; lock。 writei 给inode写入数据，调用者必须持有ip-&gt; lock。 其中readi和writei均要求给定的偏移和读出的量不超出文件大小。 目录层 数据结构 目录的i节点的类型是T_DIR,.目录本身是以文件的方式存储到磁盘上的，它的数据是一系列的目录条目。 1234struct dirent &#123; ushort inum; // i节点号 char name[DIRSIZ]; // 目录名&#125;; 函数 详细注释位于fs.c。 dirlookup 查找目录中指定名字的条目 dirlink 会写入一个新的目录条目到某一目录下 路径 函数 namex 查找并返回inode以获取路径名。如果parent！= 0，则返回父项的inode并复制最终项。路径元素到名称，必须有DIRSIZ字节的空间。该函数必须在会话内部调用，因为它调用iput（）。 1234567891011121314151617181920212223242526272829303132333435static struct inode*namex(char *path, int nameiparent, char *name)&#123; struct inode *ip, *next; if(*path == '/') // 路径以反斜杠开始，则解析从根目录开始 ip = iget(ROOTDEV, ROOTINO); else // 其他情况下则从当前目录开始 ip = idup(myproc()-&gt;cwd); while((path = skipelem(path, name)) != 0)&#123; // 考虑路径中的每一个部分 ilock(ip); // 确保ip-&gt;type从磁盘中加载出来 if(ip-&gt;type != T_DIR)&#123; // 不是目录，查找失败 iunlockput(ip); return 0; &#125; // 最后一个路径元素，循环提前结束 if(nameiparent &amp;&amp; *path == '\0')&#123; // Stop one level early. iunlock(ip); return ip; &#125; if((next = dirlookup(ip, name, 0)) == 0)&#123; // 寻找路径元素失败，查找失败 iunlockput(ip); return 0; &#125; iunlockput(ip); ip = next; &#125; if(nameiparent)&#123; iput(ip); return 0; &#125; return ip;&#125; skipelem 将路径中的下一个路径元素复制到名称中，返回指向复制后的元素的指针。 namei 解析path并返回对应的inode。 nameiparent 返回上级目录的i节点并且把最后一个元素拷贝到name中。 函数的详细内容位于fs.c 文件描述符层 123456789struct file &#123; enum &#123; FD_NONE, FD_PIPE, FD_INODE &#125; type; // 文件分为管道文件和普通文件等，FD_NONE表示文件未使用 int ref; // reference count 引用计数 char readable; // 可读 char writable; // 可写 struct pipe *pipe; // 管道 struct inode *ip; // 指向i节点 uint off;&#125;; xv6中每个进程都有自己的打开文件表。每个打开文件均由上面的结构体表示，它是一个对i节点或者管道和文件偏移的封装。每次调用open都会创建一个新的file结构体。 如果多个进程相互独立地打开了同一个文件，不同的实例将拥有不同的I/O偏移。而且同一个file结构体可以在一个进程的文件表中多次出现，同时也可以在多个进程的文件表中出现。对每一个打开的文件都有一个引用计数，一个文件可以被打开用于读、写或者二者。 系统中所有的打开文件都存在于一个全局的文件表ftable中。 函数 该层的函数位于file.c，详细注释见代码文件。 filealloc 分配文件，扫描整个文件表寻找没有被引用的文件并返回一个新的引用。 filedup 重复引用文件，增加引用计数。 fileclose 释放对文件引用的函数，减少引用计数，当一个文件的引用计数变为0的时候，根据文件类型的不同,释放掉当前的管道或者i节点。 fileread 读文件，实现对文件的read操作 filewrite 写文件，实现对文件的write操作。 filestat 获取文件的元信息，实现对文件的stat操作（只允许作用在inode）。 系统调用 暂无内容。 文件系统中xv6可改进之处 cache 使用的替换策略为LRU，算法较为简单。 链表的使用虽然实现简单，但查找效率低，时间复杂度高。若能使用哈希表等实现查找可提高效率。 目录查找 目录查找为线性查找，在目录数量较多的情况下耗时巨大。若能使用树等结构，便能大大减小时间复杂度。 大小固定 文件系统的大小在xv6中是不改变的，固定在一个磁盘设备上。这一点对于个人PC影响不大，但在需要存储大量文件或超大文件的情况下，便有些捉襟见肘。]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GG]]></title>
    <url>%2F2019%2F08%2F27%2FGG%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[世界]]></title>
    <url>%2F2019%2F08%2F06%2FHK%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建站日志]]></title>
    <url>%2F2019%2F07%2F26%2F%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[主题Next 一开始选用的是Yilia,但由于Yilia开发使用的webpack版本较老，定制时易踩坑，故改用Next。本文根据官方文档整理，并根据自己喜好加入了一些第三方插件和修改。所有修改将会逐步给出，Next的配置完整说明可参照官方文档。 &lt;!--more--&gt; 基本配置 下载 12cd 博客根目录git clone https://github.com/iissnan/hexo-theme-next themes/next 启用 打开根目录中的 _config.yml 文件,更改 theme 为 next 。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 选择Scheme 打开 theme/next 中的 _config.yml 文件，选择 Muse 。 12345# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 切换语言 打开根目录中的 _config.yml 文件,设置 language 为 zh-Hans 。 自定义 主页文章阴影效果 打开 themes/next/source/css/_custom/custom.styl ,增加 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 修改标签 打开 themes/next/layout/_macro/post.swig ，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 。 动态背景 打开 theme/next/layout/_layout.swig ，在 &lt; /body&gt;之前添加代码 123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 打开 theme/next 中的 _config.yml 文件,将 canvas_next 置为 true 。 1canvas_nest: true 看板狗 安装 12npm install hexo-helper-live2d --savenpm install live2d-widget-model-wanko 打开根目录中的 _config.yml 文件,增加以下代码。其中对 display 部分做了修改，以适应网页布局。 1234567891011121314151617181920212223242526272829# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: position: right width: 200 height: 400 # 水平位置 hOffset: 40 # 垂直位置 vOffset: -80 mobile: show: true # 手机中是否展示 Github Corners 打开Github Corners,复制代码并粘贴代码到 themes/next/layout/_layout.swig 文件中(放在 &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 的下面)，并把 href 改为正确的github地址。 由于比较喜欢这个小家伙一直出现，故更改代码中的 position: absolute 为 position: fixed 。 123&lt;div class="headband"&gt;&lt;/div&gt;&lt;a href="https://github.com/RootReturn0" class="github-corner" aria-label="View source on GitHub"&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: fixed; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; RSS 12cd 博客根目录npm install hexo-generator-feed --save 打开根目录中的 _config.yml 文件,添加 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 打开 theme/next 中的 _config.yml 文件,在 rss 后添加 /atom.xml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 加密 有时写博客并不希望让所有人看到，故加入了加密功能。Hexo是一个静态博客，自己写一个js进行加密虽不困难，但样式实在不可恭维。这里采用大神做出的hexo-blog-encrypt进行加密。 安装 12cd 博客根目录npm install hexo-blog-encrypt --save 配置 根本配置 打开根目录中的 _config.yml 文件,添加 12encrypt: enable: true 自定义配置 然后在blog的头部添加上对应的字段，如password, abstract, message。 1234567---title: 文章加密date: 2019-08-06 19:00:02password: 你的密码abstract: 显示在目录页或首页的内容简介。message: 此处为输入密码时的提示内容。--- 全局配置 希望修改默认的提示和摘要内容时，你可以添加如下配置在根目录中的 _config.yml 文件中。 1234encrypt: enable: true default_abstract: 这是一篇加密文章，内容可能是xxx default_message: 输入密码，查看文章。]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2019%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[12345#include &lt;iostream&gt;int main()&#123; std::cout&lt;&lt;"Hello world!"&lt;&lt;std::endl;&#125; 12def hello() print('Hello world!')]]></content>
  </entry>
  <entry>
    <title><![CDATA[ILY]]></title>
    <url>%2F2019%2F07%2F25%2FILY%2F</url>
    <content type="text"><![CDATA[I am here. A ghost.]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
