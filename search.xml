<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[三封信]]></title>
    <url>%2F2020%2F06%2F25%2F%E4%B8%89%E5%B0%81%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[他的名字 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[共情]]></title>
    <url>%2F2020%2F04%2F11%2F%E5%85%B1%E6%83%85%2F</url>
    <content type="text"><![CDATA[刺客信条刺客信条是我第一次接触的 3A 大作。在高考结束后，我买了 Xbox One 的手柄，玩起了《刺客信条2》。 一边熟悉着新奇的游戏，一遍熟悉着奇怪的手柄。 笨拙地打架，笨拙地逃跑，熟练地爬上窗去偷情。而后盲目却不失风度地走上了复仇之路。Ezio 的故事里，我笑过，怒过，悲伤过。我享受着 Ezio 的人生，潇洒，责任，和彬彬无礼。 之后我就迷恋上了刺客信条系列，从 Altair到《刺客信条：起源》，我几乎没有落下什么。但我仍不能说是刺客的粉丝，你看，我连起源里刺客的名字都不记得了。 Conner 的独立战争我也参与了。刺客信条第三部确实不能被称上一个好游戏，因为我的记忆里实在没有什么令我印象深刻的片段，除了他和他父亲的故事。我不想杀 Haytham Kenway，我认识到刺客的世界里的骑士不一定是黑暗的秩序。但这是一条单线游戏，于是我杀了他。我在游戏里开始有了思考，这确实是一款好游戏。 Edward 的“上天入地寒鸦号”。《刺客信条：黑旗》的海战畅快淋漓，导致我再次忘记剧情是什么了。依稀记得这是一个捡到别人衣服最终被说服入伙的故事。我又可以只盯着目标打架，而不是思考目标的好坏。毕竟我是个善良的海盗嘛。 这是一条分割线，随心与动脑的分割线。 可能由于前几代的敌人都太弱了，《刺客信条：大革命》后的刺客不再能无双式潜入。此时需要观察战斗地点，无声潜入。我不是一个喜欢消耗品的人，因此除了教学使用烟雾弹，我在这里面没有使用过任何一次烟雾弹，导致游戏难度直线上升。我精心策划着每一次潜入，每一次刺杀，每一次潜逃。于是我对剧情的记忆更加深刻，这里的骑士与刺客更加不分明了。但有个地方我记不清了：有一个人，我不想杀。我不记得是谁，也不记得为什么杀他，我只记得我不想杀，我抗拒这次任务。但我还是得杀，否则游戏就进行不下去了。我又开始精心策划我的刺杀，一遍一遍地踩点，计算巡逻路线，寻找绝佳的刺杀位置和逃脱手段。 于是他死了。 再之后的刺客，我便变得像看电影一样了。也就是说，我越来越难以代入游戏角色了。机械地执行杀戮，机械地完成（finish）任务目标。我的游戏世界越来越追求成就和完成任务。但我很懒，从来没有一个游戏能做到全成就。 星露谷物语听说这游戏很休闲，我便趁打折的时候购入了。确实很休闲，2 天玩了 36 小时。 在星露谷里，可以种田、养猪、酿酒和追求小姐姐。 我喜欢莉亚。 但我又陷入了追求更快完成任务的怪圈。我疯狂赚钱，顺便追求小姐姐。为了十心成就，我又分心同时追了好多小哥哥小姐姐老阿姨老叔叔和小朋友。 第二年冬天，我终于刷完了我所想要的大部分成就和足够花的钱（因为没经验，虽然钱足够花，但不多）。我终于能和莉亚小姐姐结婚了。但我忽然没了兴趣，莉亚小姐姐也提不起我的兴趣。我和她的婚礼三天后就举办了，但我甚至不想再打开游戏。我没有不喜欢，没有厌烦，仅仅是不想。 我没有融入到星露谷的生活里。他们是鲜活的，温暖的，但冰冷的 NPC。 我不知道我玩游戏是为了什么。没有快感，仅仅只是消遣吗？ 集合啦！动物森友会我忍不住买了。很贵。非常贵。但幸好我没有一起玩的朋友，可以省下微薄的会员钱。 其实也不是没有朋友，但我很怕朋友约我，而我又经常有事情。虽然大部分时候都在摸鱼，但总觉得自己有事情。 这是一个要花一年才能玩完的游戏。 第一天，我沉迷钓鱼。可能还房贷又成为了我疯狂想要完成的任务。 第二天，我开始体验新的生活。 第三天，… 动森的慢节奏强迫我慢了下来，我开始一点一点不再只是追求完成目标。毕竟不管再怎么高效，我也没法在一天内通关动森吧（笑）。但我是一个讨厌浪费时间的人，在Nook集里游+开放后，我总是想在做一个任务的同时顺便多完成几个任务。 不过在动森一天天的佛系调教下，我成为了一个玩游戏顺便完成任务的人。我似乎又开始感受到了游戏的乐趣。 但我终究还是不能融入动森的世界里。狸克人很好，傅达很可爱，居民们也很善良，岛外的居民也很信任我。但这一切都与我无关。 我拥有，我没有，我获得，我想失去。 也许在哪个世界，我都格格不入。 杀了我，趁我还清醒。]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubantu 18.04 修改分辨率]]></title>
    <url>%2F2020%2F04%2F02%2FUbantu%20%E5%88%86%E8%BE%A8%E7%8E%87%2F</url>
    <content type="text"><![CDATA[Ubuntu 18.04 分辨率（xrandr无效，使用xdiagnose）Ubantu 18.04 安装后使用xrandr查看分辨率，发现分辨率只有 800 x 600 的选项。 首先在网上百度，大多数结果都是使用cvt+xrandr进行修改。然而实际操作过程中，一直无法解决报错failed to get size of gamma for output default。 而后发现使用xdiagnose成功解决问题。 步骤 下载xdiagnose。xdiagnose并非系统自带，直接使用会发生命令未找到的错误。 1sudo apt install xdiagnose 打开xdiagnose的配置界面。 1sudo xdiagnose 如下图所示，把 Debug 部分全部勾上。 重启，屏幕自动适配。 1reboot 选择分辨率重启后可在系统设置 -&gt; 设备 -&gt; 显示中选择分辨率，通过xrandr查看也可看到其他分辨率。]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Silence]]></title>
    <url>%2F2020%2F01%2F01%2FSilence%2F</url>
    <content type="text"><![CDATA[它来了，我没有动； 它没有走，我没有动； 它走了，我没有动。 什么都没有改变，一如既往的平静。 正如我的笔下依旧没有花。]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无题]]></title>
    <url>%2F2019%2F12%2F13%2F%E6%97%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[冬日的思绪总是不受控制，在休息不足时尤是如此。 Part 1一日看尽长安花。长安是哪里？ 在遥远的天际线上，辉映着晶莹剔透的云景；在可及的地平线上，闪耀着混合多彩的阳光。 但愈是前进，愈加惊觉地球是存在于三维空间中的球体。那些美妙的光景仿佛坠入了四维位面——当发现无比接近时，却打不破维度的限制，再向前，渐行渐远；而后那光景变换了位置，无论如何向前，距离都不会发生变化。 翻山越岭，遇见山崩；蜉蝣渡海，撞见海啸。但我仍保有跨过山和大海的希望。可是维度的封锁我要如何越过？ Part 2我以为我把天修好了。 我只是把它扛起来了，让它不至于掉下去。 可是手好酸。 ——我的力气在流逝。]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[返回顶部]]></title>
    <url>%2F2019%2F11%2F12%2F%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%2F</url>
    <content type="text"><![CDATA[本文参考yearito的博客。 最终在博客中产生了莫名萌的效果（ 下载图片点击下方按钮可下载本站使用的图片。 下载图片 实际上什么图片都可以，放到 source\images\ 目录下即可 代码然后在自定义样式文件 themes\next\source\css\_custom\custom.styl 中添加如下代码： 1234567891011121314151617181920//自定义回到顶部样式.back-to-top &#123; right: 60px; width: 70px; //图片素材宽度 height: 900px; //图片素材高度 top: -900px; bottom: unset; transition: all .5s ease-in-out; background: url("/images/scroll.png"); //隐藏箭头图标 &gt; i &#123; display: none; &#125; &amp;.back-to-top-on &#123; bottom: unset; top: 100vh &lt; (900px + 200px) ? calc( 100vh - 900px - 200px ) : 0px; &#125;&#125;]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android学习笔记_UI]]></title>
    <url>%2F2019%2F10%2F20%2FAndroid%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-UI%2F</url>
    <content type="text"><![CDATA[笔记基于郭霖大神所著的《第一行代码》第二版之第3章。该系列笔记主要目的在于快速开发，需要深入理解原理或掌握更多技巧可阅读原著。 控件Android 中所有的控件都具有android:layout_width和android:layout_height这两个属性。可选值： match_parent(fill_parent): 与父布局大小一样 wrap_content: 正好包住里面的内容 未完待续]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[评论功能]]></title>
    <url>%2F2019%2F10%2F19%2F%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[主题配置文件🔗官方文档 首先在leancloud注册一个账户，并创建一个应用。打开yourblog-&gt;themes-&gt;next-&gt;_config.yml，将获得的 appid 和 appkey 填入下方代码对应位置，enable 改为 true。 12345678910111213# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: yourid appkey: yourkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 邮件推送配置请参照作者文档]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打赏功能]]></title>
    <url>%2F2019%2F10%2F19%2F%E6%89%93%E8%B5%8F%2F</url>
    <content type="text"><![CDATA[主题配置文件next主题中内置了这一功能，打开主题配置文件，将如下部分注释取消： 12345# Rewardreward_comment: 如果您喜欢这篇文章，可以请我喝杯咖啡～wechatpay: /images/wechatpay.pngalipay: /images/alipay.png#bitcoin: /images/bitcoin.png 这里只用到了微信和支付宝。将收款码图片放入yourblog-&gt;themes-&gt;next-&gt;source-&gt;images，命名同上。 样式如果直接采用从微信和支付宝保存下来的收款码，将会产生上下不对称的情况，且二者大小不一。这里采用了简单粗暴的处理办法： 将图片要保留的内容裁剪成正方形。 打开yourblog-&gt;themes-&gt;next-&gt;source-&gt;css-&gt;_common-&gt;components-&gt;post-&gt;post-reward.styl，将里面的#QR img块改为以下内容： 12345678#QR img&#123; width: 180px; height: 180px; overflow: hidden; max-width: 100%; display: inline-block; margin: 0.8em 2em 0 2em;&#125;]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上传本地图片]]></title>
    <url>%2F2019%2F10%2F19%2F%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[安装插件12cd /d 你的hexo根目录npm install hexo-asset-image --save 修改配置文件打开根目录下的 _config.yml 文件，修改以下内容： 12345post_asset_folder: true# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yourname.github.io 插入图片运行 hexo n &quot;yourblogname&quot; 生成博文时，/source/_posts 目录下会生成一个与 md 同名的文件夹，将图片放人该文件夹。 1使用![](yourblogname/picture.jpg)插入图片即可。]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[增加页面]]></title>
    <url>%2F2019%2F10%2F19%2F%E5%A2%9E%E5%8A%A0%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[标签🔗官方链接 新建一个页面 1hexo new page tags 编辑新建界面，将页面类型设置为 tags ，主题将会在这个页面上显示标签云。 12345---title: Tagsdate: 2019-10-19 01:26:01type: "tags"--- 去除主题配置文件 _config.yml 中 tags 的注释。 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 标签的使用1tags: xxx 或 123tags:- xxx- xxx 注意：使用第二种方式时，为并列标签，无等级区分。 分类🔗官方链接 新建一个页面 1hexo new page categories 编辑新建界面，将页面类型设置为 categories ，主题将会在这个页面上显示所有的分类。 12345---title: Categoriesdate: 2019-10-19 01:26:08type: "categories"--- 去除主题配置文件 _config.yml 中 categories 的注释。 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 分类的使用1categories: xxx 或 123categories:- xxx- xxx 注意：使用第二种方式时，并非并列分类，而是分级分类。其中越靠前的越高级。]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android学习笔记_Activity]]></title>
    <url>%2F2019%2F10%2F18%2FAndroid%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Activity%2F</url>
    <content type="text"><![CDATA[笔记基于郭霖大神所著的《第一行代码》第二版之第2章。该系列笔记主要目的在于快速开发，需要深入理解原理或掌握更多技巧可阅读原著。 其中： 使用的IDE：Android Studio 示例项目名：ActivityTest 包名：“com.example.avtivitytest” 手动创建活动新建项目时选择Add No Activity 初始文件结构 右击com.example.activitytest包-&gt;New-&gt;Activity-&gt;Empty Activity，会弹出对话框，其中 Generate LayoutFile 会在app/src/main/res目录中为该活动自动生成对应的 layout 的 xml 文件；Launcher Activity 会将该活动设置为程序运行时首先加载的活动，即当前项目的主活动。 创建和加载布局右击app/src/main/res目录-&gt;New-&gt;Directory，可创建一个名为 layout 的目录，而后右击该目录，即可新建布局文件。 添加按钮12345678910111213&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;Button android:id="@+id/button_1" // 定义id android:layout_width="match_parent" // 表示和父元素一样宽 android:layout_height="wrap_content" // 表示当前元素的高度恰好包含里面内容 android:text="Button_1" /&gt;&lt;/LinearLayout&gt; 加载123456789101112131415package com.example.activitytest;import androidx.appcompat.app.AppCompatActivity;import android.os.Bundle;public class FirstActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); // 本行将layout的id传入，为当前活动加载布局 setContentView(R.layout.thirt_layout); &#125;&#125; 在AndroidManifest文件注册1234567891011121314151617181920212223&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.activitytest"&gt; &lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:roundIcon="@mipmap/ic_launcher_round" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;activity android:name=".FirstActivity" // 指定注册活动 android:label="This is FirstActivity" &gt; // 指定活动标题栏内容 &lt;intent-filter&gt; // 以下两行将活动配置为主活动 &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; Toast及按钮响应123456789101112protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Toast.makeText(FirstActivity.this, "You clicked Button_1!", Toast.LENGTH_SHORT).show(); &#125; &#125;);&#125; 通过 findViewById() 方法获取到布局文件中定义的元素，这里传入 R.id.button_1 来得到按钮的实例，而后注册监听器。 Toast 中 makeText 有三个参数，第一个是 Context（活动是一种上下文），第二个参数是 Toast 显示的文本内容，第三个是持续时长。注意，只有加上后面的 .show() ，Toast 才会显示。 Menu使用 Android 提供的方式创建菜单。菜单通过应用右上角的三个点的小按钮，以列表形式显示。 创建菜单右击app/src/main/res目录-&gt;New-&gt;Directory，创建名为 menu 的文件夹，并在文件夹下创建一个名为 main 的菜单文件（右击menu-&gt;New-&gt;Menu resource file）。 在main.xml添加如下代码： 123456789&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;item android:id="@+id/add_item"// 标识符 android:title="Add" // 名称 /&gt; &lt;item android:id="@+id/remove_item" android:title="Remove" /&gt;&lt;/menu&gt; 其中item标签用来创建具体的菜单项。 而后在FirstActivity中重写函数： 123456public boolean onCreateOptionsMenu(Menu menu)&#123; // 第一个参数为资源文件，第二个指定添加到的Menu对象 getMenuInflater().inflate(R.menu.main, menu); // 表示是否允许显示菜单 return true; &#125; 菜单响应在FirstActivity中重写函数： 1234567891011121314public boolean onOptionsItemSelected(@NonNull MenuItem item) &#123; // 判断点击的菜单项 switch (item.getItemId())&#123; case R.id.add_item: Toast.makeText(this,"You clicked Add",Toast.LENGTH_SHORT).show(); break; case R.id.remove_item: Toast.makeText(this,"You clicked Remove",Toast.LENGTH_LONG).show(); break; default: &#125; return super.onOptionsItemSelected(item);&#125; 销毁活动在模拟器中按下 Back 键，或调用finish()方法。 1234567891011protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; finish() &#125; &#125;);&#125; 使用Intent切换活动显式Intent创建第二个活动，名为 SecondActivity。 修改FirstActivity中的按钮点击事件： 1234567891011121314protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; // 传入 FirstActivity.this 作为上下文，SecondActivity.class为目标活动 Intent intent = new Intent(FirstActivity.this,SecondActivity.class); startActivity(intent); &#125; &#125;);&#125; 隐式Intent通过AndroidManifest.xml中的activity标签下配置&lt;intent-filter&gt;内容，可以指定当前活动能够响应的 action 和 category。只有&lt;action&gt;和&lt;category&gt;中的内容能够同时匹配 Intent 指定的内容时，活动才能响应。 代码如下： 123456&lt;activity android:name=".SecondActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="com.example.activitytest.ACTION_START" /&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 修改FirstActivity中的按钮点击事件： 12345678910111213protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent("com.example.activitytest.ACTION_START"); startActivity(intent); &#125; &#125;);&#125; 增加Category在AndroidManifest中配置如下： 123456789&lt;activity android:name=".SecondActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="com.example.activitytest.ACTION_START" /&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; // 不添加下行代码将导致程序崩溃 &lt;category android:name="com.example.activitytest.MY_CATEGORY" /&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 修改FirstActivity中的按钮点击事件： 1234567891011121314protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent("com.example.activitytest.ACTION_START"); intent.addCategory("com.example.activitytest.MY_CATEGORY"); startActivity(intent); &#125; &#125;);&#125; 其他Intent用法启动其他应用程序修改FirstActivity中的按钮点击事件： 123456789101112131415protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent(Intent.ACTION_VIEW); // 注意：“http://” 不能省略 intent.setData(Uri.parse("http://ww.baidu.com")); startActivity(intent); &#125; &#125;);&#125; 此时点击按钮可跳转至浏览器打开 “www.baidu.com&quot;。 在AndroidManifest中的&lt;intent-filter&gt;标签配置&lt;data&gt;标签，可指定活动能够响应的类型数据。&lt;data&gt;标签主要可配置以下内容： android:scheme 协议，如 http android:host 主机名 android:port 端口 android:path 以上之后的部分 android:mimeType 可处理的数据类型 示例： 1234567&lt;activity android:name=".ThirdActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.VIEW" /&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; &lt;data android:scheme="http" /&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 当前活动能够响应的 action 是 Intent.ACTION_VIEW 的常量值，数据协议必须是 http。在点击按钮后，该活动也能响应Intent： 选择响应Intent的程序 从用户体验的角度来看，如果活动本身不具备加载并显示的网页的功能，千万不要这么用啊！！！ 除 http 协议外，还有许多 Uri 协议，常用的 Uri 协议见 &lt;&lt;Android 常用URI 值得记住&gt;&gt;。 传递数据Intent 中提供了一系列 putExtra() 方法的重载，可以将想要传递的数据暂存在 Intent 中。当启动另一个 Intent 后，只需要把这些数据再从 Intent 中取出即可。 向下一个活动传递数据假设 FirstActivity 中有一个字符串，现在想把这个字符串传递到 SecondActivity 中，可以这样编写代码： 12345678910button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; String data = "Hello SecondActivity"; Intent intent = new Intent(FirstActivity.this,SecondActivity.class); // 第一个参数是键，用于之后取值；第二个参数为要传递的数据 intent.putExtra("extra_data",data); startActivity(intent); &#125;&#125;); SecondActivity 中接收代码： 123456789101112131415161718public class SecondActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_second); // 获取用于启动 SecondActivity 的Intent Intent intent = getIntent(); /** * getStringExtra() 获取字符串数据； * 如果是整型数据则用 getIntExtra()； * 如果是布尔数据则用 getBooleanExtra()； * 以此类推。 * / String data = intent.getStringExtra("extra_data"); Log.d("SecondActivity",data); &#125;&#125; 返回数据给上一个活动Activity 中还有一个startActivityForResult()方法也可以启动活动。顾名思义，这个方法期望在活动销毁时能过返回结果给上一个活动。要想返回数据，则需要使用这个方法： 12345678910111213button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent(FirstActivity.this,SecondActivity.class); intent.putExtra("extra_data",data); /** * 第一个参数是intent； * 第二个参数是请求码，用于在之后的回调中判断数据的来源， * 请求码只要是一个唯一值就行。 * / startActivityForResult(intent, 1); &#125;&#125;); 在下一个活动中使用如下代码： 按下按钮返回时 123456789button2.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent(); intent.putExtra("data_return","Hello FirstActivity"); setResult(RESULT_OK,intent); finish(); &#125;&#125;); 按下 Back 键返回时 1234567@overridepublic void onBackPressed() &#123; Intent intent = new Intent(); intent.putExtra("data_return","Hello FirstActivity"); setResult(RESULT_OK, intent); finish();&#125; 其中setResult十分重要，是专门用于向上一个活动返回数据的。第一个参数用于向上一个活动返回处理结果，一般只使用 RESULT_OK 或 RESULT_CANCELED 这两个值，第二个参数则把带有数据的Intent传递回去。 当使用startActivityForResult()方法启动下一个活动时，在下一个活动被销毁会回调上一个活动的onActivityResult方法，因此需要在上一个活动重写onActivityResult方法 来获取数据： 123456789101112@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data)&#123; switch (requestCode)&#123; case 1: if (resultCode==RESULT_OK)&#123; String returnedData=data.getStringExtra("data_return"); Log.d("FirstActivity", returnedData); &#125; break; default: &#125;&#125; 第一个参数为启动活动时传入的请求码，第二个参数为返回数据时传入的处理结果，第三个参数为携带着返回数据的 Intent。由于实际使用时可能启动不止一个活动，故使用 requestCode 来确定传回的活动，resultCode 来判断处理结果是否成功，最后从 data 取值。 活动的生命周期与临时数据活动的生存期 活动的七大生存期 保存活动的临时数据当内存不足或由于其他什么原因导致活动被回收时，活动中的临时数据就可能消失，影响用户体验或程序管理。以下介绍在活动被销毁后重新创建保留数据的方法： 保存Activity 中提供了名为onSaveInstanceState()的回调方法，这个方法保证活动在被回收之前一定会被调用。方法中携带的 Bundle 类型的参数提供了putString()和putInt()等方法保存数据。 123456@Overrideprotected void onSaveInstanceState(Bundle outState) &#123; super.onSaveInstanceState(outState); String tempData = "Something you just typed"; outState.putString("data_key", tempData);&#125; 恢复数据onCreate()方法本身带有 Bundle 类型的参数。如果活动被回收前保存过数据，则这个参数不会为null，而是带有之前的数据。因此，通过这个参数可以取出之前保存的数据： 12345678910@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // 如果保存过数据 if (savedInstanceState != null) &#123; String tempData = savedInstanceState.getString("data_key"); &#125; ···&#125; Tips：Intent可以结合Bundle一起传递数据。如：数据-&gt;Bundle-&gt;Intent。 活动的启动模式活动的启动模式一共有4种：standard、singleTop、singleTask和singleInstance。可以在 AndroidManifest.xml中通过给&lt;activity&gt;标签指定android:launchMode来选择启动模式。 standardstandard 是活动的默认启动模式。对于该模式的活动，系统在每次创建该活动时都会创建一个新的实例。 standard 模式示意图 singleTop对于该模式的活动，若该活动已处于活动栈的栈顶，则系统认为可以直接使用，不会创建一个新的实例；否则系统将会创建一个新实例。 singleTop 模式示意图 singleTask对于该模式的活动，若该活动已存在于活动的返回栈中，则系统直接使用，并把在这个活动之上的所有活动统统出栈，不会创建一个新的实例；否则系统将会创建一个新实例。 singleTask 模式示意图 singleInstance对于该模式的活动，会有一个单独的返回栈来管理这个活动，所有的应用程序都将共用该返回栈。该模式可解决不同应用程序间共享活动实例的问题。 singleInstance 模式示意图]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Haydn]]></title>
    <url>%2F2019%2F10%2F08%2FHaydn%2F</url>
    <content type="text"><![CDATA[有时并非欢快地跳跃着的。 但却依旧舒缓人疲惫的心灵。 非山河壮阔， 非人间星火， 非天外飞仙。 而是流淌在春天的生死明灭。]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[H]]></title>
    <url>%2F2019%2F10%2F07%2FH%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R]]></title>
    <url>%2F2019%2F10%2F07%2FC%2F</url>
    <content type="text"><![CDATA[在曾经最低谷的时候（极小值）， 她激励了我； 在现在最底谷的时候（极小值）， 她安慰了我。 果然是我生命中重要的一个人（笑 CAUSE AND CONSEQUENCE]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知足常乐]]></title>
    <url>%2F2019%2F10%2F07%2FAbout%20Alessa0%2F</url>
    <content type="text"><![CDATA[English & You Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Soul-like]]></title>
    <url>%2F2019%2F10%2F06%2Fsoul-like%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! U2FsdGVkX19sMGpM1F9NtMhj5ND+J2IX+wxJmeowVg5gNyiJZUyNpozvN+3CtnIKH2wM1EFGlhyiEYV3tlHaG9JRr6KXIKjcI/j0cHnXaxwN2fcp/5PtEXW6tOogpLggEd2OGpJp5Vq53ivpne8V/ks+bcKNbYlkiO2Fy0w5C4k8ZhT9Hn7tv1n5mJt/nDxreKCNDYOBrtrWwY3XaIWknz92/gkXRYQWrt3pfRKKZUooHCLvppPoQAxluX0OfhhCFl6NCH8CJRIW2dXd7I1D7xd/0czvXYtiSpWJdKPt8X0fl1xNLwqLw2NBl/nnCR+26mdxvU5M2rm2uvs5hKOtIxMMcbqjE/tOFORTFwUEDhtVE1bc7Hq+scWeik/1zZInJThJvxaFcxJz1jTgPWSqQrf9ZR5KVwKpeHxHYHQt0vPum1HyJDIar6Y80PxfwHHWlDpUtoMD5ZvaH8Kh7FX0NT4QORCmIeaSa2xxe3wFP3ZOtyYrWYN16spVIzYC26Ia1VlrqRbBJzr3F5//+xDGOibwUcWXrpv6znfb9J/sfhFH4tV1UY59fjGKndJnRDW/BDAo+UBTO9sgCKRQzj3Yv0+9Xj08oWE8+Bwxea/RmXoh/xfqq6HCK2haInFc8+iUu/+14Sc64T+Y0qx9aDAMGMHxHP7fGlSmP6HL5TzOMbHrjIe273lu2F/cdHnsdkmTzM8eBuFp7ffvHahcFp9j9A==]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-调度]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E8%B0%83%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[调度由于可能同时有多个CPU请求进行调度，故需要进程表锁ptable.lock来避免竞争。 因此，进程在让出CPU前，必须要获得进程表锁，并释放其拥有的其他锁（避免同时持有多个锁导致死锁），修改自己的状态proc-&gt;state，然后进行调度。 函数以下函数位于代码文件proc.c中。 sched进程进入调度器，且必须持有进程表锁并改变进程状态。由于进程此时持有进程表锁，所以CPU应该是在关中断的情况下运行。 12345678910111213141516171819202122voidsched(void)&#123; int intena; struct proc *p = myproc(); // 未持有进程表锁，不应进入调度，引发内核错误 if(!holding(&amp;ptable.lock)) panic("sched ptable.lock"); // 处于锁状态，不应进入调度，引发内核错误 if(mycpu()-&gt;ncli != 1) panic("sched locks"); // 进程处于运行态，不应进入调度，引发内核错误 if(p-&gt;state == RUNNING) panic("sched running"); // 开中断，不可执行mycpu()函数，不应进入调度，引发内核错误 if(readeflags()&amp;FL_IF) panic("sched interruptible"); intena = mycpu()-&gt;intena; // 暂存状态 swtch(&amp;p-&gt;context, mycpu()-&gt;scheduler); // 保存当前上下文，并切换到之前保存的调度器的上下文，进入调度器 mycpu()-&gt;intena = intena; // 恢复状态&#125; yield在xv6中，使用时间片轮转法进行调度。当进程用完它的CPU时间片时，时钟中断会调用yield函数来让出CPU给新的进程，yield调用sched函数，sched调用swtch来切换都调度器线程： 12345678voidyield(void)&#123; acquire(&amp;ptable.lock); //DOC: yieldlock 请求进程表锁 myproc()-&gt;state = RUNNABLE; // 切换进程状态 sched(); release(&amp;ptable.lock); // 释放进程表锁&#125; scheduler每个CPU在设置完成自己之后调用scheduler。 调度器scheduler永远不会返回，而是不断循环。循环步骤为： 选择要运行的流程 swtch开始运行该过程 最终该过程通过swtch将控制转移回调度程序。 1234567891011121314151617181920212223242526272829303132333435363738voidscheduler(void)&#123; struct proc *p; struct cpu *c = mycpu(); c-&gt;proc = 0; // 不断循环，永不停止 for(;;)&#123; // 开中断，以允许I/O到达 sti(); // 在进程表上不断循环，寻找进程并运行 acquire(&amp;ptable.lock); // 请求进程表锁 for(p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)&#123; if(p-&gt;state != RUNNABLE) // 进程不可运行，转到下一个进程 continue; // Switch to chosen process. It is the process's job // to release ptable.lock and then reacquire it // before jumping back to us. // 切换到选定的进程 c-&gt;proc = p; switchuvm(p); // 切换到该进程的页表 p-&gt;state = RUNNING; swtch(&amp;(c-&gt;scheduler), p-&gt;context); // 切换到该进程运行 switchkvm(); // 当没有进程正在运行时，将页表寄存器切换到仅内核页表。 // Process is done running for now. // It should have changed its p-&gt;state before coming back. // 进程已结束运行，改变自身状态 c-&gt;proc = 0; &#125; release(&amp;ptable.lock); // 释放进程表锁，防止其他CPU无法进行调度 &#125;&#125; 锁与中断锁 为保证进程状态的上下文在运行swtch时保持不变：进程表锁由旧进程获得，新进程释放。 为防止其他CPU闲置时锁被当前CPU占有而无法调度，其他CPU上运行进程无法让出CPU，导致死锁的情况：在遍历一次进程表后总要释放锁。 中断 为防止所有进程都在等待I/O时关中断导致的I/O无法到达引发的死锁，调度器在每次循坏开始前进行开中断。 睡眠与唤醒函数sleep和wakeup位于代码文件proc.c中。 使进程进入睡眠或进行唤醒均需要改变进程状态，故需要进程表锁以保证状态修改的原子性。其中函数sleep要在使进程进入睡眠前获取进程表锁，以保证在使函数进入睡眠时至少持有一个锁，防止wakeup在进程进入睡眠前被调用导致的死锁。当sleep本身持有的锁为进程表锁时，则略过请求这一步，防止死锁。 可改进之处调度 轮转法无优先级的区分 会导致高优先级的进程无法优先运行，可能导致系统运行时间的增加，影响使用者在实际使用时的体验。可使用其他较为复杂的算法，如高响应比优先算法等以改进体验。 睡眠与唤醒 唤醒需要遍历进程表 在进程数量大的时候这种做法效率极低。使用另一个结构体来维护链表可大大提高效率。 唤醒时会唤醒队列中全部进程 大多数情况下，同一时间需要唤醒的进程在队列中是少数部分，许多仍需等待的进程将会被“莫名其妙”地唤醒并再度检查状态重新进入睡眠，导致操作系统需要处理许多新的不必要的任务。 唤醒时应分为个体唤醒（唤醒单个进程）和群体唤醒（唤醒所有进程），减少系统负担。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-管道]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E7%AE%A1%E9%81%93%2F</url>
    <content type="text"><![CDATA[管道从管道的一端写入数据字节，然后数据被拷贝到内核缓冲区中，接着进程就能从管道的另一端读取数据了。 在xv6中，管道使用被读取字节数nread和被写入字节数nwrite的差值判断管道状态： nwrite == nread 则数据未写入或被读取完毕，管道空 nwrite == nread + PIPESIZE 则管道满 由于管道的读取与写入均需要使用nread和nwrite以获悉管道状态，故这两个计数参数不能在某一函数（写入/读取）清零，否则将影响另一函数（读取/写入）的执行。因此，xv6中使用data[nread % PIPESIZE]和data[nwrite % PIPESIZE]来控制读写时的管道数据偏移，即循环写/读，在data[PIPESIZE-1]后写入的数据存放在data[0]中。 数据结构12345678struct pipe &#123; struct spinlock lock; // 锁 char data[PIPESIZE]; // 管道数据 uint nread; // 被读取字节数，从缓冲区中读取 uint nwrite; // 被写入字节数，写入缓冲区 int readopen; // 读文件描述符是否依旧处于open状态 int writeopen; // 写文件描述符是否依旧处于open状态&#125;; 管道函数以下分析管道读写函数，其他函数仅列出函数作用，详细注释见代码文件pipe.c。 读写管道读写操作通过管道锁实现互斥，操作运行时必须持有管道锁。 管道数据写入时首先获取管道锁而后写入数据，若达到管道容量上限，则写操作唤醒读操作后进入睡眠等待并释放管道锁。此时读操作可获得请求的管道锁，在读取完数据后管道变空，则读操作唤醒写操作后进入睡眠等待并释放管道锁。而后管道写操作再次获得管道锁，循环往复直至数据传输完毕，其中最后一次传输可能未写满管道。 当使用管道的操作被杀后，管道读写操作都将终止；当管道不可读时，管道写操作将被终止。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// 管道写intpipewrite(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 for(i = 0; i &lt; n; i++)&#123; while(p-&gt;nwrite == p-&gt;nread + PIPESIZE)&#123; // 管道满 // 如果管道文件不可读或进程被杀，释放管道锁并终止管道写操作 if(p-&gt;readopen == 0 || myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 sleep(&amp;p-&gt;nwrite, &amp;p-&gt;lock); // 管道写操作进入睡眠等待（睡眠时将释放管道锁） &#125; p-&gt;data[p-&gt;nwrite++ % PIPESIZE] = addr[i]; // 将所需读取的块内数据赋值给管道数据 &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 release(&amp;p-&gt;lock); // 释放管道锁 return n;&#125;//管道读intpiperead(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 while(p-&gt;nread == p-&gt;nwrite &amp;&amp; p-&gt;writeopen)&#123; //DOC: 管道为空且管道可写，则管道读操作可进入睡眠 // 进程被杀，释放管道锁，终止管道读操作 if(myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; sleep(&amp;p-&gt;nread, &amp;p-&gt;lock); //DOC: piperead-sleep 管道读操作进入睡眠等待（睡眠时将释放管道锁） &#125; for(i = 0; i &lt; n; i++)&#123; // 拷贝数据 if(p-&gt;nread == p-&gt;nwrite) // 读取字节数等于写入字节数，表示读取完成 break; addr[i] = p-&gt;data[p-&gt;nread++ % PIPESIZE]; // 将所需读取的管道数据赋值给块内数据 &#125; wakeup(&amp;p-&gt;nwrite); // 通知睡眠中的写者缓冲区中可写 release(&amp;p-&gt;lock); return i;&#125; 其他 pipealloc 管道分配，并初始化管道。 pipeclose 管道关闭。若读写两方均关闭，则释放内存；否则关闭管道一端并唤醒另一方。当关闭写端时，仍可进行读操作，但将管道内剩余数据读完后，再次进行读操作便返回0，相当于读到文件末尾；当关闭读段时，写操作会在进行过程中中断。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-文件系统]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[文件系统总体设计文件系统分层 如图所示xv6的文件系统分6层实现： 第一层（自下而上）通过块缓冲读写 IDE 硬盘，同步对磁盘的访问，且通过块的锁保证同一时间只有一个内核进程可以修改磁盘块； 第二层使得更高层的接口可以将对磁盘的更新按会话打包，通过会话的方式来保证这些操作是原子操作。 第三层提供无名文件，每一个文件由一个inode和一连串的数据块组成。 第四层将目录实现为一种特殊的inode，内容是一连串的目录项，每一个目录项包含一个文件名和对应的inode。 第五层提供了层次路经名（如/xx/xxx），这一层通过递归的方式来查询路径对应的文件。 第六层将许多资源（如管道，设备，文件等）抽象为文件系统的接口，极大地简化了程序员的工作。 磁盘分层磁盘分层为引导块、超级块、日志块、inode块、空闲块位图和数据块等。 文件系统不使用引导块；超级块包含了文件系统的元信息；日志块中的日志维护了文件系统操作的原子性，防止操作过程中引发的系统崩溃而导致的数据不同步；inode块用于存放inode（一个块可存放多个inode）；空闲块位图便于查找空闲的块；数据块中保存了文件和目录等内容。 块缓冲层需要实现的目标 同步对磁盘的访问。对于任意一个块，同一时间仅有一份拷贝放在内存中且只允许一个内核线程对该拷贝进行修改。 缓存常用的块以减少磁盘读取次数，提高系统效率。 实现方案代码参见bio.c。 根据时间与空间局部性原理，将最近经常访问的磁盘块缓存在内存中，并使用LRU替换策略。 结构定义xv6将缓冲区分为两种状态： B_VALID 意味着这个缓冲区拥有磁盘块的有效内容； B_DIRTY 意味着缓冲区的内容已经被改变并且需要写回磁盘； 与旧版相比，B_BUSY 状态在最新版代码中被删去。但由于缓存区中的块的锁的存在，只有持有锁才能访问该块，而在另一线程未使用完成前，该锁不会被释放，此时只能循环等待锁的释放，获得锁后方可获得块。故依旧可保持块内容的原子性。 12345678910111213141516171819202122// 内存中的磁盘块结构struct buf &#123; int flags; // 标记磁盘状态，valid/dirty uint dev; // 磁盘设备号 uint blockno; // 块编号 struct sleeplock lock; uint refcnt; // 引用计数 struct buf *prev; // LRU cache list 使用LRU替换 struct buf *next; // 链式结构连接磁盘块 struct buf *qnext; // 磁盘队列 uchar data[BSIZE]; // 块大小为512字节&#125;;// 块缓冲区结构struct &#123; struct spinlock lock; struct buf buf[NBUF]; // 通过 prev/next 连接所有缓冲块 // 其中 head.next 是最近最常使用的块. struct buf head;&#125; bcache; 初始化 binit从一个静态数组buf中构建出一个有NBUF个元素的双向链表。所有对块缓冲的访问都通过链表而非静态数组。 123456789101112131415161718192021voidbinit(void)&#123; struct buf *b; // 初始化块缓冲锁 initlock(&amp;bcache.lock, "bcache");//PAGEBREAK! // 构建缓冲双向链表 bcache.head.prev = &amp;bcache.head; bcache.head.next = &amp;bcache.head; for(b = bcache.buf; b &lt; bcache.buf+NBUF; b++)&#123; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; // 初始化缓冲区中的块的锁 initsleeplock(&amp;b-&gt;lock, "buffer"); bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125;&#125; 查找 bget扫描缓冲区链表，通过给定的设备号和扇区号找到对应的缓冲区。如果未找到，则分配一个缓冲区，否则返回一个持有锁的缓冲区。代码中在双向链表的搜索中向最近最常使用方向查找，若未找到则向另一方向查找空闲缓冲区以分配。 其中若找到缓冲区中指定的块，返回的结果也不一定是指定的块。因为在请求该块的锁前已释放缓冲区锁，若该块未持有锁且正在被用来缓冲另外一个块，则重新获得锁时已是另一个块。 123456789101112131415161718192021222324252627282930313233343536static struct buf*bget(uint dev, uint blockno)&#123; struct buf *b; acquire(&amp;bcache.lock); // 请求块缓冲区锁 // 不能保证 b 仍然是可用的缓冲区：它有可能被用来缓冲另外一个块。 for(b = bcache.head.next; b != &amp;bcache.head; b = b-&gt;next)&#123; if(b-&gt;dev == dev &amp;&amp; b-&gt;blockno == blockno)&#123; b-&gt;refcnt++; // 引用计数加一 release(&amp;bcache.lock); // 释放块缓冲区锁 acquiresleep(&amp;b-&gt;lock); // 请求该块的锁 return b; &#125; &#125; // Not cached; recycle an unused buffer. 未找到则重新查找 // Even if refcnt==0, B_DIRTY indicates a buffer is in use // because log.c has modified it but not yet committed it. // 即使refcnt等于0，也可通过B_DIRTY知道缓冲区被使用，此时日志已修改但未提交 for(b = bcache.head.prev; b != &amp;bcache.head; b = b-&gt;prev)&#123; if(b-&gt;refcnt == 0 &amp;&amp; (b-&gt;flags &amp; B_DIRTY) == 0) &#123; b-&gt;dev = dev; b-&gt;blockno = blockno; b-&gt;flags = 0; b-&gt;refcnt = 1; release(&amp;bcache.lock); acquiresleep(&amp;b-&gt;lock); return b; &#125; &#125; // 未找到块且未能分配块，引发内核错误 panic("bget: no buffers");&#125; 读 breadbread会首先调用bget从缓存中去寻找块是否存在。如果存在直接返回；如果不存在则请求磁盘读操作，读到缓存中后再返回结果。 12345678910111213struct buf*bread(uint dev, uint blockno)&#123; struct buf *b; // 获取缓冲区 b = bget(dev, blockno); // 如果缓冲区中不存在指定的块，则从磁盘中读出 if((b-&gt;flags &amp; B_VALID) == 0) &#123; iderw(b); &#125; return b;&#125; 写 bwrite设置 B_DIRTY 位并且调用 iderw 将缓冲区的内容写到磁盘。 123456789voidbwrite(struct buf *b)&#123; // 该块未锁，可能已被释放，无法写入，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("bwrite"); b-&gt;flags |= B_DIRTY; iderw(b);&#125; 释放 brelse将一块缓冲区移动到链表的头部，唤醒睡眠在这块缓冲区上的进程。 123456789101112131415161718192021222324// 唤醒睡眠在这块缓冲区上的进程；将一块缓冲区移动到链表的头部。voidbrelse(struct buf *b)&#123; // 缓冲区未持有块锁，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("brelse"); releasesleep(&amp;b-&gt;lock); // 释放块锁 acquire(&amp;bcache.lock); // 请求 缓冲区锁 b-&gt;refcnt--; //引用计数减一 if (b-&gt;refcnt == 0) &#123; // 无进程等待使用，移动到链表头部 b-&gt;next-&gt;prev = b-&gt;prev; b-&gt;prev-&gt;next = b-&gt;next; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125; release(&amp;bcache.lock); //释放缓冲区锁&#125; 日志层每一个系统调用都可能包含一个必须从头到尾原子完成的写操作序列，称这样的一个序列为一个会话。任何时候只能有一个进程在一个会话之中，其他进程必须等待当前会话中的进程结束。因此同一时刻日志最多只记录一次会话。 该层用于维护系统崩溃后到原子性，即会话要么完成，要么系统恢复至会话开始前的状态。 块分配器本部分涉及的函数位于fs.c。 由于bread与brelse已有锁进行互斥，块分配器无需再加锁。 分配新的磁盘块123456789101112131415161718192021222324static uintballoc(uint dev)&#123; int b, bi, m; struct buf *bp; bp = 0; for(b = 0; b &lt; sb.size; b += BPB)&#123; // 读位图每一块 bp = bread(dev, BBLOCK(b, sb)); for(bi = 0; bi &lt; BPB &amp;&amp; b + bi &lt; sb.size; bi++)&#123; // 读块内每一位 m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0)&#123; // 判断块是否空闲 bp-&gt;data[bi/8] |= m; // 将块标记为使用中 log_write(bp); brelse(bp); // 释放块 bzero(dev, b + bi); // 清零块 return b + bi; &#125; &#125; brelse(bp); &#125; // 超出块范围，引发错误 panic("balloc: out of blocks");&#125; 释放磁盘块12345678910111213141516static voidbfree(int dev, uint b)&#123; struct buf *bp; int bi, m; readsb(dev, &amp;sb); bp = bread(dev, BBLOCK(b, sb)); bi = b % BPB; m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0) // 释放空闲块，错误 panic("freeing free block"); bp-&gt;data[bi/8] &amp;= ~m; log_write(bp); brelse(bp); // 释放块&#125; inodeinode有两种类别： 磁盘上的记录文件大小、数据块扇区号的数据结构 12345678struct dinode &#123; short type; // 区分文件、目录和特殊文件的 i 节点，0表示为空闲节点 short major; // 主设备号（仅限T_DEV） short minor; // 辅设备号（仅限T_DEV） short nlink; // 文件系统中的i节点连接数 uint size; // 文件的字节数 uint addrs[NDIRECT+1]; // 用于这个文件的数据块的块号&#125;; 内存中的一个 i 节点，包含一个磁盘上 i 节点的拷贝，以及一些内核需要的附加信息 123456789101112131415struct inode &#123; uint dev; // Device number 设备号 uint inum; // Inode number inode号 int ref; // Reference count 引用数 struct sleeplock lock; // protects everything below here 保护以下所有数据 int valid; // inode has been read from disk? i节点是否已从磁盘中读取 // 以下均为磁盘上的i节点，即dinode，的拷贝 short type; // copy of disk inode short major; short minor; short nlink; uint size; uint addrs[NDIRECT+1];&#125;; xv6中有inode的缓冲区，作用与块缓冲区相似。以下函数分析仅包含进行特殊操作或较为复杂的函数，其余函数仅写出作用和使用条件（如iunlock）。其中函数位于fs.c。 获取inode igetiget返回的inode的指针将保证这个inode会留在缓存中，不会被删掉且不会被用于缓存另一个文件（即使未读入磁盘dinode内容）。若磁盘内容未读入，则以后在调用ilock时读入。 其中iget返回的inode的是未被锁的。在目录层的目录查找中，调用者已经对dp上锁，如果在调用iget返回之前尝试去锁上该i节点会有二次锁上dp的可能从而造成死锁。 1234567891011121314151617181920212223242526272829303132static struct inode*iget(uint dev, uint inum)&#123; struct inode *ip, *empty; acquire(&amp;icache.lock); // 在inode的cache中寻找目标inode empty = 0; for(ip = &amp;icache.inode[0]; ip &lt; &amp;icache.inode[NINODE]; ip++)&#123; if(ip-&gt;ref &gt; 0 &amp;&amp; ip-&gt;dev == dev &amp;&amp; ip-&gt;inum == inum)&#123; ip-&gt;ref++; release(&amp;icache.lock); return ip; // 此时返回的i节点内容不一定已从磁盘读入cache &#125; if(empty == 0 &amp;&amp; ip-&gt;ref == 0) // 记录扫描到的第一个空槽 empty = ip; &#125; // 保持inode入口，以下未从磁盘读入内容 if(empty == 0) // cache中无i节点空闲，出错 panic("iget: no inodes"); ip = empty; ip-&gt;dev = dev; ip-&gt;inum = inum; ip-&gt;ref = 1; ip-&gt;valid = 0; release(&amp;icache.lock); return ip;&#125; 分配inode ialloc在设备dev上分配inode：通过给它类型类型将其标记为已分配，返回未锁定但已分配和引用的inode。这里与balloc相似，可参照前文。 123456789101112131415161718192021struct inode*ialloc(uint dev, short type)&#123; int inum; struct buf *bp; struct dinode *dip; for(inum = 1; inum &lt; sb.ninodes; inum++)&#123; bp = bread(dev, IBLOCK(inum, sb)); dip = (struct dinode*)bp-&gt;data + inum%IPB; if(dip-&gt;type == 0)&#123; // inode未分配 memset(dip, 0, sizeof(*dip)); // 分配空间 dip-&gt;type = type; log_write(bp); brelse(bp); return iget(dev, inum); &#125; brelse(bp); &#125; panic("ialloc: no inodes");&#125; 锁inode ilock锁定给定的inode。如有必要，从磁盘读取inode。 1234567891011121314151617181920212223242526voidilock(struct inode *ip)&#123; struct buf *bp; struct dinode *dip; if(ip == 0 || ip-&gt;ref &lt; 1) panic("ilock"); acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 if(ip-&gt;valid == 0)&#123; // inode内容未从磁盘读取 bp = bread(ip-&gt;dev, IBLOCK(ip-&gt;inum, sb)); dip = (struct dinode*)bp-&gt;data + ip-&gt;inum%IPB; ip-&gt;type = dip-&gt;type; ip-&gt;major = dip-&gt;major; ip-&gt;minor = dip-&gt;minor; ip-&gt;nlink = dip-&gt;nlink; ip-&gt;size = dip-&gt;size; memmove(ip-&gt;addrs, dip-&gt;addrs, sizeof(ip-&gt;addrs)); brelse(bp); ip-&gt;valid = 1; if(ip-&gt;type == 0) // inode未被分配，出错，引发恐慌 panic("ilock: no type"); &#125;&#125; 释放引用 iput释放对内存中的某一inode的引用，即引用数减一。对iput（）的所有调用必须在会话内，因为它可能释放inode。 123456789101112131415161718192021222324voidiput(struct inode *ip)&#123; acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 // 如果这是最后一个引用，则可以回收inode缓存条目。 if(ip-&gt;valid &amp;&amp; ip-&gt;nlink == 0)&#123; acquire(&amp;icache.lock); int r = ip-&gt;ref; release(&amp;icache.lock); if(r == 1)&#123; // inode has no links and no other references: truncate and free. // 如果那是最后一个引用并且inode没有连接，释放磁盘上的inode（及其内容）。 itrunc(ip); ip-&gt;type = 0; iupdate(ip); ip-&gt;valid = 0; &#125; &#125; releasesleep(&amp;ip-&gt;lock); // 释放 inode 锁 acquire(&amp;icache.lock); ip-&gt;ref--; // 引用计数减一 release(&amp;icache.lock);&#125; 其他函数 readsb 读超级块 bzero 将块内容清零 iupdate 将修改后的内存中inode复制到磁盘；必须在每次更改ip-&gt; xxx字段后调用；它存在于磁盘上，因为i-node缓存是直写式的；调用者必须持有i节点锁。 iunlock 对指定inode解锁 iunlockput iunlock和iput的结合。由于两种常常一起使用，故整合。 bmap 返回inode中第n个块的磁盘块地址，如果没有这样的块，bmap会分配一个。 stati 从inode复制属性信息。 readi 从inode读数据，调用者必须持有ip-&gt; lock。 writei 给inode写入数据，调用者必须持有ip-&gt; lock。 其中readi和writei均要求给定的偏移和读出的量不超出文件大小。 目录层数据结构目录的i节点的类型是T_DIR,.目录本身是以文件的方式存储到磁盘上的，它的数据是一系列的目录条目。 1234struct dirent &#123; ushort inum; // i节点号 char name[DIRSIZ]; // 目录名&#125;; 函数详细注释位于fs.c。 dirlookup 查找目录中指定名字的条目 dirlink 会写入一个新的目录条目到某一目录下 路径函数 namex 查找并返回inode以获取路径名。如果parent！= 0，则返回父项的inode并复制最终项。路径元素到名称，必须有DIRSIZ字节的空间。该函数必须在会话内部调用，因为它调用iput（）。 1234567891011121314151617181920212223242526272829303132333435static struct inode*namex(char *path, int nameiparent, char *name)&#123; struct inode *ip, *next; if(*path == '/') // 路径以反斜杠开始，则解析从根目录开始 ip = iget(ROOTDEV, ROOTINO); else // 其他情况下则从当前目录开始 ip = idup(myproc()-&gt;cwd); while((path = skipelem(path, name)) != 0)&#123; // 考虑路径中的每一个部分 ilock(ip); // 确保ip-&gt;type从磁盘中加载出来 if(ip-&gt;type != T_DIR)&#123; // 不是目录，查找失败 iunlockput(ip); return 0; &#125; // 最后一个路径元素，循环提前结束 if(nameiparent &amp;&amp; *path == '\0')&#123; // Stop one level early. iunlock(ip); return ip; &#125; if((next = dirlookup(ip, name, 0)) == 0)&#123; // 寻找路径元素失败，查找失败 iunlockput(ip); return 0; &#125; iunlockput(ip); ip = next; &#125; if(nameiparent)&#123; iput(ip); return 0; &#125; return ip;&#125; skipelem 将路径中的下一个路径元素复制到名称中，返回指向复制后的元素的指针。 namei 解析path并返回对应的inode。 nameiparent 返回上级目录的i节点并且把最后一个元素拷贝到name中。 函数的详细内容位于fs.c 文件描述符层123456789struct file &#123; enum &#123; FD_NONE, FD_PIPE, FD_INODE &#125; type; // 文件分为管道文件和普通文件等，FD_NONE表示文件未使用 int ref; // reference count 引用计数 char readable; // 可读 char writable; // 可写 struct pipe *pipe; // 管道 struct inode *ip; // 指向i节点 uint off;&#125;; xv6中每个进程都有自己的打开文件表。每个打开文件均由上面的结构体表示，它是一个对i节点或者管道和文件偏移的封装。每次调用open都会创建一个新的file结构体。 如果多个进程相互独立地打开了同一个文件，不同的实例将拥有不同的I/O偏移。而且同一个file结构体可以在一个进程的文件表中多次出现，同时也可以在多个进程的文件表中出现。对每一个打开的文件都有一个引用计数，一个文件可以被打开用于读、写或者二者。 系统中所有的打开文件都存在于一个全局的文件表ftable中。 函数该层的函数位于file.c，详细注释见代码文件。 filealloc 分配文件，扫描整个文件表寻找没有被引用的文件并返回一个新的引用。 filedup 重复引用文件，增加引用计数。 fileclose 释放对文件引用的函数，减少引用计数，当一个文件的引用计数变为0的时候，根据文件类型的不同,释放掉当前的管道或者i节点。 fileread 读文件，实现对文件的read操作 filewrite 写文件，实现对文件的write操作。 filestat 获取文件的元信息，实现对文件的stat操作（只允许作用在inode）。 系统调用暂无内容。 文件系统中xv6可改进之处cache 使用的替换策略为LRU，算法较为简单。 链表的使用虽然实现简单，但查找效率低，时间复杂度高。若能使用哈希表等实现查找可提高效率。 目录查找目录查找为线性查找，在目录数量较多的情况下耗时巨大。若能使用树等结构，便能大大减小时间复杂度。 大小固定文件系统的大小在xv6中是不改变的，固定在一个磁盘设备上。这一点对于个人PC影响不大，但在需要存储大量文件或超大文件的情况下，便有些捉襟见肘。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GG]]></title>
    <url>%2F2019%2F08%2F27%2FGG%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[世界]]></title>
    <url>%2F2019%2F08%2F06%2FHK%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Thinking</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建站初始日志]]></title>
    <url>%2F2019%2F07%2F26%2F%E5%BB%BA%E7%AB%99%E5%88%9D%E5%A7%8B%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[主题Next一开始选用的是Yilia,但由于Yilia开发使用的webpack版本较老，定制时易踩坑，故改用Next。本文根据官方文档整理，并根据自己喜好加入了一些第三方插件和修改。所有修改将会逐步给出，Next的配置完整说明可参照官方文档。 基本配置下载12cd 博客根目录git clone https://github.com/iissnan/hexo-theme-next themes/next 启用打开根目录中的 _config.yml 文件,更改 theme 为 next 。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 选择Scheme打开 theme/next 中的 _config.yml 文件，选择 Muse 。 12345# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 切换语言打开根目录中的 _config.yml 文件,设置 language 为 zh-Hans 。 自定义主页文章阴影效果打开 themes/next/source/css/_custom/custom.styl ,增加 1234567891011// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -o-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -ms-box-shadow: 0 0 5px rgba(202, 203, 203, .5); box-shadow: 0 0 5px rgba(202, 203, 203, .5); &#125; 其中 -webkit- 等为浏览器前缀，如有需要，可自行适配： -webkit- Chrome, Sarari -moz- Firefox -o- Opera -ms- IE (IE9以上似乎不适用，直接使用box-shadow) 修改标签打开 themes/next/layout/_macro/post.swig ，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 。 动态背景打开 theme/next/layout/_layout.swig ，在 &lt; /body&gt;之前添加代码 123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 打开 theme/next 中的 _config.yml 文件,将 canvas_next 置为 true 。 1canvas_nest: true – 11/11/2019更新 更换了动画。新版本next也许直接在主题配置文件 theme/next/_config.yml 中修改以下代码就行。 1234567891011# Canvas-nestcanvas_nest: false# three_wavesthree_waves: false# canvas_linescanvas_lines: true# canvas_spherecanvas_sphere: false 看板狗安装 12npm install hexo-helper-live2d --savenpm install live2d-widget-model-wanko 打开根目录中的 _config.yml 文件,增加以下代码。其中对 display 部分做了修改，以适应网页布局。 1234567891011121314151617181920212223242526272829# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: position: right width: 200 height: 400 # 水平位置 hOffset: 40 # 垂直位置 vOffset: -80 mobile: show: true # 手机中是否展示 Github Corners打开Github Corners,复制代码并粘贴代码到 themes/next/layout/_layout.swig 文件中(放在 &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 的下面)，并把 href 改为正确的github地址。 由于比较喜欢这个小家伙一直出现，故更改代码中的 position: absolute 为 position: fixed 。 123&lt;div class="headband"&gt;&lt;/div&gt;&lt;a href="https://github.com/RootReturn0" class="github-corner" aria-label="View source on GitHub"&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: fixed; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; RSS12cd 博客根目录npm install hexo-generator-feed --save 打开根目录中的 _config.yml 文件,添加 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 打开 theme/next 中的 _config.yml 文件,在 rss 后添加 /atom.xml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 加密有时写博客并不希望让所有人看到，故加入了加密功能。Hexo是一个静态博客，自己写一个js进行加密虽不困难，但样式实在不可恭维。这里采用大神做出的hexo-blog-encrypt进行加密。 安装12cd 博客根目录npm install hexo-blog-encrypt --save 配置根本配置打开根目录中的 _config.yml 文件,添加 12encrypt: enable: true 自定义配置然后在blog的头部添加上对应的字段，如password, abstract, message。 1234567---title: 文章加密date: 2019-08-06 19:00:02password: 你的密码abstract: 显示在目录页或首页的内容简介。message: 此处为输入密码时的提示内容。--- 全局配置希望修改默认的提示和摘要内容时，你可以添加如下配置在根目录中的 _config.yml 文件中。 1234encrypt: enable: true default_abstract: 这是一篇加密文章，内容可能是xxx default_message: 输入密码，查看文章。]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2019%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[12345#include &lt;iostream&gt;int main()&#123; std::cout&lt;&lt;"Hello world!"&lt;&lt;std::endl;&#125; 12def hello() print('Hello world!')]]></content>
  </entry>
</search>
