<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Haydn]]></title>
    <url>%2F2019%2F10%2F08%2FHaydn%2F</url>
    <content type="text"><![CDATA[有时并非欢快地跳跃着的。 但却依旧舒缓人疲惫的心灵。 非山河壮阔， 非人间星火， 非天外飞仙。 而是流淌在春天的生死明灭。]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[H]]></title>
    <url>%2F2019%2F10%2F07%2FH%2F</url>
    <content type="text"><![CDATA[我又梦到她了。 翩翩君子，温润如玉。 Memory不记得是哪个yu了。 过去的事情在一点一点地被遗忘，现在的事情也正在一点一点地被遗忘。 那感受确切地存在于过去，如今回想起来仍然强烈。却不知是否现在为真，还是过去为真。 但遗忘是真的。 Moment某些因她而触发的机能正在消逝，甚至比未曾到来时更加彻底。我在退化，我无法思考，我无法记忆。 无法阻止。 我似乎知道为何，但不知流星为什么要划过夜空。 MonumentTo be or not to be? It’s not a question.]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R]]></title>
    <url>%2F2019%2F10%2F07%2FC%2F</url>
    <content type="text"><![CDATA[在曾经最低谷的时候（极小值）， 她激励了我； 在现在最底谷的时候（极小值）， 她安慰了我。 果然是我生命中重要的一个人（笑 CAUSE AND CONSEQUENCE]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知足常乐]]></title>
    <url>%2F2019%2F10%2F07%2FAbout%20Alessa0%2F</url>
    <content type="text"><![CDATA[English & You Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Soul-like]]></title>
    <url>%2F2019%2F10%2F06%2Fsoul-like%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! U2FsdGVkX1+0YMysuhHB3FB0HxFaRyO3kZvmQBRc48Ut6+Lo2OU0+1fA8jX7Fp1Bkqctwq63BMBN48ScW2LBcasa0lzqHrRgbcqeCCOycQ7EwhIzDubOtQJrhcFgP+tEiT4EWBSYgOSBVONFbqCxZkqqX9PohGRU4rLKpGDZtsr8/jTzUHEqOWeXZNV/IxTOv/qHTjUZ7aT8rOTlM/z5/MEmZqCHwKAUxh5No15EL0F0XFK5lIrP6DyR7geaWZ6x83RiiCPbZN0iaeGcI8RJmPe/UPyA+DtSab3dH8dIpp50XCSHE7OzOkNNnFHGL8NBQGkJBxcq2kMJFuNIxbs+Xlj9P+yQl5n8mJbiYJjlh5+3UJ2OWhHWhbF9rDCtOFavj0JKy6464UQzntuitcjoto8uR8FQrDgv2EqgPAaKSPggT2kF2Usp0cwle4sQuQB6GVEQnMOf1E3uAEaGqjJ0+mFJOHPqBO6nWUGiOQvtUdnaYrDMyHyZ51uTLlj+GOzQ89ELSRbXL5Cc2KSHEBSfbfQaHtKiv2NIkXRoODEKEMDRxjosnD71pdxkEhnHS6Ik8Y9HAKQvl4w4GBvi/pf+pbiVNKJmmz5drZVAgRo4rrzyFFhpsoydP7EemEhklE3SUT1PFq7qLXaUbNp4b8PIDFWc+F0b0q6ziVTc0bhXcw5wn25ParBbmv3rh2LfGlFjz6FLs1qMGCPVAJHHITvXvQ==]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-调度]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E8%B0%83%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[调度由于可能同时有多个CPU请求进行调度，故需要进程表锁ptable.lock来避免竞争。 因此，进程在让出CPU前，必须要获得进程表锁，并释放其拥有的其他锁（避免同时持有多个锁导致死锁），修改自己的状态proc-&gt;state，然后进行调度。 函数以下函数位于代码文件proc.c中。 sched进程进入调度器，且必须持有进程表锁并改变进程状态。由于进程此时持有进程表锁，所以CPU应该是在关中断的情况下运行。 12345678910111213141516171819202122voidsched(void)&#123; int intena; struct proc *p = myproc(); // 未持有进程表锁，不应进入调度，引发内核错误 if(!holding(&amp;ptable.lock)) panic("sched ptable.lock"); // 处于锁状态，不应进入调度，引发内核错误 if(mycpu()-&gt;ncli != 1) panic("sched locks"); // 进程处于运行态，不应进入调度，引发内核错误 if(p-&gt;state == RUNNING) panic("sched running"); // 开中断，不可执行mycpu()函数，不应进入调度，引发内核错误 if(readeflags()&amp;FL_IF) panic("sched interruptible"); intena = mycpu()-&gt;intena; // 暂存状态 swtch(&amp;p-&gt;context, mycpu()-&gt;scheduler); // 保存当前上下文，并切换到之前保存的调度器的上下文，进入调度器 mycpu()-&gt;intena = intena; // 恢复状态&#125; yield在xv6中，使用时间片轮转法进行调度。当进程用完它的CPU时间片时，时钟中断会调用yield函数来让出CPU给新的进程，yield调用sched函数，sched调用swtch来切换都调度器线程： 12345678voidyield(void)&#123; acquire(&amp;ptable.lock); //DOC: yieldlock 请求进程表锁 myproc()-&gt;state = RUNNABLE; // 切换进程状态 sched(); release(&amp;ptable.lock); // 释放进程表锁&#125; scheduler每个CPU在设置完成自己之后调用scheduler。 调度器scheduler永远不会返回，而是不断循环。循环步骤为： 选择要运行的流程 swtch开始运行该过程 最终该过程通过swtch将控制转移回调度程序。 1234567891011121314151617181920212223242526272829303132333435363738voidscheduler(void)&#123; struct proc *p; struct cpu *c = mycpu(); c-&gt;proc = 0; // 不断循环，永不停止 for(;;)&#123; // 开中断，以允许I/O到达 sti(); // 在进程表上不断循环，寻找进程并运行 acquire(&amp;ptable.lock); // 请求进程表锁 for(p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)&#123; if(p-&gt;state != RUNNABLE) // 进程不可运行，转到下一个进程 continue; // Switch to chosen process. It is the process's job // to release ptable.lock and then reacquire it // before jumping back to us. // 切换到选定的进程 c-&gt;proc = p; switchuvm(p); // 切换到该进程的页表 p-&gt;state = RUNNING; swtch(&amp;(c-&gt;scheduler), p-&gt;context); // 切换到该进程运行 switchkvm(); // 当没有进程正在运行时，将页表寄存器切换到仅内核页表。 // Process is done running for now. // It should have changed its p-&gt;state before coming back. // 进程已结束运行，改变自身状态 c-&gt;proc = 0; &#125; release(&amp;ptable.lock); // 释放进程表锁，防止其他CPU无法进行调度 &#125;&#125; 锁与中断锁 为保证进程状态的上下文在运行swtch时保持不变：进程表锁由旧进程获得，新进程释放。 为防止其他CPU闲置时锁被当前CPU占有而无法调度，其他CPU上运行进程无法让出CPU，导致死锁的情况：在遍历一次进程表后总要释放锁。 中断 为防止所有进程都在等待I/O时关中断导致的I/O无法到达引发的死锁，调度器在每次循坏开始前进行开中断。 睡眠与唤醒函数sleep和wakeup位于代码文件proc.c中。 使进程进入睡眠或进行唤醒均需要改变进程状态，故需要进程表锁以保证状态修改的原子性。其中函数sleep要在使进程进入睡眠前获取进程表锁，以保证在使函数进入睡眠时至少持有一个锁，防止wakeup在进程进入睡眠前被调用导致的死锁。当sleep本身持有的锁为进程表锁时，则略过请求这一步，防止死锁。 可改进之处调度 轮转法无优先级的区分 会导致高优先级的进程无法优先运行，可能导致系统运行时间的增加，影响使用者在实际使用时的体验。可使用其他较为复杂的算法，如高响应比优先算法等以改进体验。 睡眠与唤醒 唤醒需要遍历进程表 在进程数量大的时候这种做法效率极低。使用另一个结构体来维护链表可大大提高效率。 唤醒时会唤醒队列中全部进程 大多数情况下，同一时间需要唤醒的进程在队列中是少数部分，许多仍需等待的进程将会被“莫名其妙”地唤醒并再度检查状态重新进入睡眠，导致操作系统需要处理许多新的不必要的任务。 唤醒时应分为个体唤醒（唤醒单个进程）和群体唤醒（唤醒所有进程），减少系统负担。]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-管道]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E7%AE%A1%E9%81%93%2F</url>
    <content type="text"><![CDATA[管道从管道的一端写入数据字节，然后数据被拷贝到内核缓冲区中，接着进程就能从管道的另一端读取数据了。 在xv6中，管道使用被读取字节数nread和被写入字节数nwrite的差值判断管道状态： nwrite == nread 则数据未写入或被读取完毕，管道空 nwrite == nread + PIPESIZE 则管道满 由于管道的读取与写入均需要使用nread和nwrite以获悉管道状态，故这两个计数参数不能在某一函数（写入/读取）清零，否则将影响另一函数（读取/写入）的执行。因此，xv6中使用data[nread % PIPESIZE]和data[nwrite % PIPESIZE]来控制读写时的管道数据偏移，即循环写/读，在data[PIPESIZE-1]后写入的数据存放在data[0]中。 数据结构12345678struct pipe &#123; struct spinlock lock; // 锁 char data[PIPESIZE]; // 管道数据 uint nread; // 被读取字节数，从缓冲区中读取 uint nwrite; // 被写入字节数，写入缓冲区 int readopen; // 读文件描述符是否依旧处于open状态 int writeopen; // 写文件描述符是否依旧处于open状态&#125;; 管道函数以下分析管道读写函数，其他函数仅列出函数作用，详细注释见代码文件pipe.c。 读写管道读写操作通过管道锁实现互斥，操作运行时必须持有管道锁。 管道数据写入时首先获取管道锁而后写入数据，若达到管道容量上限，则写操作唤醒读操作后进入睡眠等待并释放管道锁。此时读操作可获得请求的管道锁，在读取完数据后管道变空，则读操作唤醒写操作后进入睡眠等待并释放管道锁。而后管道写操作再次获得管道锁，循环往复直至数据传输完毕，其中最后一次传输可能未写满管道。 当使用管道的操作被杀后，管道读写操作都将终止；当管道不可读时，管道写操作将被终止。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// 管道写intpipewrite(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 for(i = 0; i &lt; n; i++)&#123; while(p-&gt;nwrite == p-&gt;nread + PIPESIZE)&#123; // 管道满 // 如果管道文件不可读或进程被杀，释放管道锁并终止管道写操作 if(p-&gt;readopen == 0 || myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 sleep(&amp;p-&gt;nwrite, &amp;p-&gt;lock); // 管道写操作进入睡眠等待（睡眠时将释放管道锁） &#125; p-&gt;data[p-&gt;nwrite++ % PIPESIZE] = addr[i]; // 将所需读取的块内数据赋值给管道数据 &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 release(&amp;p-&gt;lock); // 释放管道锁 return n;&#125;//管道读intpiperead(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 while(p-&gt;nread == p-&gt;nwrite &amp;&amp; p-&gt;writeopen)&#123; //DOC: 管道为空且管道可写，则管道读操作可进入睡眠 // 进程被杀，释放管道锁，终止管道读操作 if(myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; sleep(&amp;p-&gt;nread, &amp;p-&gt;lock); //DOC: piperead-sleep 管道读操作进入睡眠等待（睡眠时将释放管道锁） &#125; for(i = 0; i &lt; n; i++)&#123; // 拷贝数据 if(p-&gt;nread == p-&gt;nwrite) // 读取字节数等于写入字节数，表示读取完成 break; addr[i] = p-&gt;data[p-&gt;nread++ % PIPESIZE]; // 将所需读取的管道数据赋值给块内数据 &#125; wakeup(&amp;p-&gt;nwrite); // 通知睡眠中的写者缓冲区中可写 release(&amp;p-&gt;lock); return i;&#125; 其他 pipealloc 管道分配，并初始化管道。 pipeclose 管道关闭。若读写两方均关闭，则释放内存；否则关闭管道一端并唤醒另一方。当关闭写端时，仍可进行读操作，但将管道内剩余数据读完后，再次进行读操作便返回0，相当于读到文件末尾；当关闭读段时，写操作会在进行过程中中断。]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-文件系统]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[文件系统总体设计文件系统分层 如图所示xv6的文件系统分6层实现： 第一层（自下而上）通过块缓冲读写 IDE 硬盘，同步对磁盘的访问，且通过块的锁保证同一时间只有一个内核进程可以修改磁盘块； 第二层使得更高层的接口可以将对磁盘的更新按会话打包，通过会话的方式来保证这些操作是原子操作。 第三层提供无名文件，每一个文件由一个inode和一连串的数据块组成。 第四层将目录实现为一种特殊的inode，内容是一连串的目录项，每一个目录项包含一个文件名和对应的inode。 第五层提供了层次路经名（如/xx/xxx），这一层通过递归的方式来查询路径对应的文件。 第六层将许多资源（如管道，设备，文件等）抽象为文件系统的接口，极大地简化了程序员的工作。 磁盘分层磁盘分层为引导块、超级块、日志块、inode块、空闲块位图和数据块等。 文件系统不使用引导块；超级块包含了文件系统的元信息；日志块中的日志维护了文件系统操作的原子性，防止操作过程中引发的系统崩溃而导致的数据不同步；inode块用于存放inode（一个块可存放多个inode）；空闲块位图便于查找空闲的块；数据块中保存了文件和目录等内容。 块缓冲层需要实现的目标 同步对磁盘的访问。对于任意一个块，同一时间仅有一份拷贝放在内存中且只允许一个内核线程对该拷贝进行修改。 缓存常用的块以减少磁盘读取次数，提高系统效率。 实现方案代码参见bio.c。 根据时间与空间局部性原理，将最近经常访问的磁盘块缓存在内存中，并使用LRU替换策略。 结构定义xv6将缓冲区分为两种状态： B_VALID 意味着这个缓冲区拥有磁盘块的有效内容； B_DIRTY 意味着缓冲区的内容已经被改变并且需要写回磁盘； 与旧版相比，B_BUSY 状态在最新版代码中被删去。但由于缓存区中的块的锁的存在，只有持有锁才能访问该块，而在另一线程未使用完成前，该锁不会被释放，此时只能循环等待锁的释放，获得锁后方可获得块。故依旧可保持块内容的原子性。 12345678910111213141516171819202122// 内存中的磁盘块结构struct buf &#123; int flags; // 标记磁盘状态，valid/dirty uint dev; // 磁盘设备号 uint blockno; // 块编号 struct sleeplock lock; uint refcnt; // 引用计数 struct buf *prev; // LRU cache list 使用LRU替换 struct buf *next; // 链式结构连接磁盘块 struct buf *qnext; // 磁盘队列 uchar data[BSIZE]; // 块大小为512字节&#125;;// 块缓冲区结构struct &#123; struct spinlock lock; struct buf buf[NBUF]; // 通过 prev/next 连接所有缓冲块 // 其中 head.next 是最近最常使用的块. struct buf head;&#125; bcache; 初始化 binit从一个静态数组buf中构建出一个有NBUF个元素的双向链表。所有对块缓冲的访问都通过链表而非静态数组。 123456789101112131415161718192021voidbinit(void)&#123; struct buf *b; // 初始化块缓冲锁 initlock(&amp;bcache.lock, "bcache");//PAGEBREAK! // 构建缓冲双向链表 bcache.head.prev = &amp;bcache.head; bcache.head.next = &amp;bcache.head; for(b = bcache.buf; b &lt; bcache.buf+NBUF; b++)&#123; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; // 初始化缓冲区中的块的锁 initsleeplock(&amp;b-&gt;lock, "buffer"); bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125;&#125; 查找 bget扫描缓冲区链表，通过给定的设备号和扇区号找到对应的缓冲区。如果未找到，则分配一个缓冲区，否则返回一个持有锁的缓冲区。代码中在双向链表的搜索中向最近最常使用方向查找，若未找到则向另一方向查找空闲缓冲区以分配。 其中若找到缓冲区中指定的块，返回的结果也不一定是指定的块。因为在请求该块的锁前已释放缓冲区锁，若该块未持有锁且正在被用来缓冲另外一个块，则重新获得锁时已是另一个块。 123456789101112131415161718192021222324252627282930313233343536static struct buf*bget(uint dev, uint blockno)&#123; struct buf *b; acquire(&amp;bcache.lock); // 请求块缓冲区锁 // 不能保证 b 仍然是可用的缓冲区：它有可能被用来缓冲另外一个块。 for(b = bcache.head.next; b != &amp;bcache.head; b = b-&gt;next)&#123; if(b-&gt;dev == dev &amp;&amp; b-&gt;blockno == blockno)&#123; b-&gt;refcnt++; // 引用计数加一 release(&amp;bcache.lock); // 释放块缓冲区锁 acquiresleep(&amp;b-&gt;lock); // 请求该块的锁 return b; &#125; &#125; // Not cached; recycle an unused buffer. 未找到则重新查找 // Even if refcnt==0, B_DIRTY indicates a buffer is in use // because log.c has modified it but not yet committed it. // 即使refcnt等于0，也可通过B_DIRTY知道缓冲区被使用，此时日志已修改但未提交 for(b = bcache.head.prev; b != &amp;bcache.head; b = b-&gt;prev)&#123; if(b-&gt;refcnt == 0 &amp;&amp; (b-&gt;flags &amp; B_DIRTY) == 0) &#123; b-&gt;dev = dev; b-&gt;blockno = blockno; b-&gt;flags = 0; b-&gt;refcnt = 1; release(&amp;bcache.lock); acquiresleep(&amp;b-&gt;lock); return b; &#125; &#125; // 未找到块且未能分配块，引发内核错误 panic("bget: no buffers");&#125; 读 breadbread会首先调用bget从缓存中去寻找块是否存在。如果存在直接返回；如果不存在则请求磁盘读操作，读到缓存中后再返回结果。 12345678910111213struct buf*bread(uint dev, uint blockno)&#123; struct buf *b; // 获取缓冲区 b = bget(dev, blockno); // 如果缓冲区中不存在指定的块，则从磁盘中读出 if((b-&gt;flags &amp; B_VALID) == 0) &#123; iderw(b); &#125; return b;&#125; 写 bwrite设置 B_DIRTY 位并且调用 iderw 将缓冲区的内容写到磁盘。 123456789voidbwrite(struct buf *b)&#123; // 该块未锁，可能已被释放，无法写入，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("bwrite"); b-&gt;flags |= B_DIRTY; iderw(b);&#125; 释放 brelse将一块缓冲区移动到链表的头部，唤醒睡眠在这块缓冲区上的进程。 123456789101112131415161718192021222324// 唤醒睡眠在这块缓冲区上的进程；将一块缓冲区移动到链表的头部。voidbrelse(struct buf *b)&#123; // 缓冲区未持有块锁，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("brelse"); releasesleep(&amp;b-&gt;lock); // 释放块锁 acquire(&amp;bcache.lock); // 请求 缓冲区锁 b-&gt;refcnt--; //引用计数减一 if (b-&gt;refcnt == 0) &#123; // 无进程等待使用，移动到链表头部 b-&gt;next-&gt;prev = b-&gt;prev; b-&gt;prev-&gt;next = b-&gt;next; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125; release(&amp;bcache.lock); //释放缓冲区锁&#125; 日志层每一个系统调用都可能包含一个必须从头到尾原子完成的写操作序列，称这样的一个序列为一个会话。任何时候只能有一个进程在一个会话之中，其他进程必须等待当前会话中的进程结束。因此同一时刻日志最多只记录一次会话。 该层用于维护系统崩溃后到原子性，即会话要么完成，要么系统恢复至会话开始前的状态。 块分配器本部分涉及的函数位于fs.c。 由于bread与brelse已有锁进行互斥，块分配器无需再加锁。 分配新的磁盘块123456789101112131415161718192021222324static uintballoc(uint dev)&#123; int b, bi, m; struct buf *bp; bp = 0; for(b = 0; b &lt; sb.size; b += BPB)&#123; // 读位图每一块 bp = bread(dev, BBLOCK(b, sb)); for(bi = 0; bi &lt; BPB &amp;&amp; b + bi &lt; sb.size; bi++)&#123; // 读块内每一位 m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0)&#123; // 判断块是否空闲 bp-&gt;data[bi/8] |= m; // 将块标记为使用中 log_write(bp); brelse(bp); // 释放块 bzero(dev, b + bi); // 清零块 return b + bi; &#125; &#125; brelse(bp); &#125; // 超出块范围，引发错误 panic("balloc: out of blocks");&#125; 释放磁盘块12345678910111213141516static voidbfree(int dev, uint b)&#123; struct buf *bp; int bi, m; readsb(dev, &amp;sb); bp = bread(dev, BBLOCK(b, sb)); bi = b % BPB; m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0) // 释放空闲块，错误 panic("freeing free block"); bp-&gt;data[bi/8] &amp;= ~m; log_write(bp); brelse(bp); // 释放块&#125; inodeinode有两种类别： 磁盘上的记录文件大小、数据块扇区号的数据结构 12345678struct dinode &#123; short type; // 区分文件、目录和特殊文件的 i 节点，0表示为空闲节点 short major; // 主设备号（仅限T_DEV） short minor; // 辅设备号（仅限T_DEV） short nlink; // 文件系统中的i节点连接数 uint size; // 文件的字节数 uint addrs[NDIRECT+1]; // 用于这个文件的数据块的块号&#125;; 内存中的一个 i 节点，包含一个磁盘上 i 节点的拷贝，以及一些内核需要的附加信息 123456789101112131415struct inode &#123; uint dev; // Device number 设备号 uint inum; // Inode number inode号 int ref; // Reference count 引用数 struct sleeplock lock; // protects everything below here 保护以下所有数据 int valid; // inode has been read from disk? i节点是否已从磁盘中读取 // 以下均为磁盘上的i节点，即dinode，的拷贝 short type; // copy of disk inode short major; short minor; short nlink; uint size; uint addrs[NDIRECT+1];&#125;; xv6中有inode的缓冲区，作用与块缓冲区相似。以下函数分析仅包含进行特殊操作或较为复杂的函数，其余函数仅写出作用和使用条件（如iunlock）。其中函数位于fs.c。 获取inode igetiget返回的inode的指针将保证这个inode会留在缓存中，不会被删掉且不会被用于缓存另一个文件（即使未读入磁盘dinode内容）。若磁盘内容未读入，则以后在调用ilock时读入。 其中iget返回的inode的是未被锁的。在目录层的目录查找中，调用者已经对dp上锁，如果在调用iget返回之前尝试去锁上该i节点会有二次锁上dp的可能从而造成死锁。 1234567891011121314151617181920212223242526272829303132static struct inode*iget(uint dev, uint inum)&#123; struct inode *ip, *empty; acquire(&amp;icache.lock); // 在inode的cache中寻找目标inode empty = 0; for(ip = &amp;icache.inode[0]; ip &lt; &amp;icache.inode[NINODE]; ip++)&#123; if(ip-&gt;ref &gt; 0 &amp;&amp; ip-&gt;dev == dev &amp;&amp; ip-&gt;inum == inum)&#123; ip-&gt;ref++; release(&amp;icache.lock); return ip; // 此时返回的i节点内容不一定已从磁盘读入cache &#125; if(empty == 0 &amp;&amp; ip-&gt;ref == 0) // 记录扫描到的第一个空槽 empty = ip; &#125; // 保持inode入口，以下未从磁盘读入内容 if(empty == 0) // cache中无i节点空闲，出错 panic("iget: no inodes"); ip = empty; ip-&gt;dev = dev; ip-&gt;inum = inum; ip-&gt;ref = 1; ip-&gt;valid = 0; release(&amp;icache.lock); return ip;&#125; 分配inode ialloc在设备dev上分配inode：通过给它类型类型将其标记为已分配，返回未锁定但已分配和引用的inode。这里与balloc相似，可参照前文。 123456789101112131415161718192021struct inode*ialloc(uint dev, short type)&#123; int inum; struct buf *bp; struct dinode *dip; for(inum = 1; inum &lt; sb.ninodes; inum++)&#123; bp = bread(dev, IBLOCK(inum, sb)); dip = (struct dinode*)bp-&gt;data + inum%IPB; if(dip-&gt;type == 0)&#123; // inode未分配 memset(dip, 0, sizeof(*dip)); // 分配空间 dip-&gt;type = type; log_write(bp); brelse(bp); return iget(dev, inum); &#125; brelse(bp); &#125; panic("ialloc: no inodes");&#125; 锁inode ilock锁定给定的inode。如有必要，从磁盘读取inode。 1234567891011121314151617181920212223242526voidilock(struct inode *ip)&#123; struct buf *bp; struct dinode *dip; if(ip == 0 || ip-&gt;ref &lt; 1) panic("ilock"); acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 if(ip-&gt;valid == 0)&#123; // inode内容未从磁盘读取 bp = bread(ip-&gt;dev, IBLOCK(ip-&gt;inum, sb)); dip = (struct dinode*)bp-&gt;data + ip-&gt;inum%IPB; ip-&gt;type = dip-&gt;type; ip-&gt;major = dip-&gt;major; ip-&gt;minor = dip-&gt;minor; ip-&gt;nlink = dip-&gt;nlink; ip-&gt;size = dip-&gt;size; memmove(ip-&gt;addrs, dip-&gt;addrs, sizeof(ip-&gt;addrs)); brelse(bp); ip-&gt;valid = 1; if(ip-&gt;type == 0) // inode未被分配，出错，引发恐慌 panic("ilock: no type"); &#125;&#125; 释放引用 iput释放对内存中的某一inode的引用，即引用数减一。对iput（）的所有调用必须在会话内，因为它可能释放inode。 123456789101112131415161718192021222324voidiput(struct inode *ip)&#123; acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 // 如果这是最后一个引用，则可以回收inode缓存条目。 if(ip-&gt;valid &amp;&amp; ip-&gt;nlink == 0)&#123; acquire(&amp;icache.lock); int r = ip-&gt;ref; release(&amp;icache.lock); if(r == 1)&#123; // inode has no links and no other references: truncate and free. // 如果那是最后一个引用并且inode没有连接，释放磁盘上的inode（及其内容）。 itrunc(ip); ip-&gt;type = 0; iupdate(ip); ip-&gt;valid = 0; &#125; &#125; releasesleep(&amp;ip-&gt;lock); // 释放 inode 锁 acquire(&amp;icache.lock); ip-&gt;ref--; // 引用计数减一 release(&amp;icache.lock);&#125; 其他函数 readsb 读超级块 bzero 将块内容清零 iupdate 将修改后的内存中inode复制到磁盘；必须在每次更改ip-&gt; xxx字段后调用；它存在于磁盘上，因为i-node缓存是直写式的；调用者必须持有i节点锁。 iunlock 对指定inode解锁 iunlockput iunlock和iput的结合。由于两种常常一起使用，故整合。 bmap 返回inode中第n个块的磁盘块地址，如果没有这样的块，bmap会分配一个。 stati 从inode复制属性信息。 readi 从inode读数据，调用者必须持有ip-&gt; lock。 writei 给inode写入数据，调用者必须持有ip-&gt; lock。 其中readi和writei均要求给定的偏移和读出的量不超出文件大小。 目录层数据结构目录的i节点的类型是T_DIR,.目录本身是以文件的方式存储到磁盘上的，它的数据是一系列的目录条目。 1234struct dirent &#123; ushort inum; // i节点号 char name[DIRSIZ]; // 目录名&#125;; 函数详细注释位于fs.c。 dirlookup 查找目录中指定名字的条目 dirlink 会写入一个新的目录条目到某一目录下 路径函数 namex 查找并返回inode以获取路径名。如果parent！= 0，则返回父项的inode并复制最终项。路径元素到名称，必须有DIRSIZ字节的空间。该函数必须在会话内部调用，因为它调用iput（）。 1234567891011121314151617181920212223242526272829303132333435static struct inode*namex(char *path, int nameiparent, char *name)&#123; struct inode *ip, *next; if(*path == '/') // 路径以反斜杠开始，则解析从根目录开始 ip = iget(ROOTDEV, ROOTINO); else // 其他情况下则从当前目录开始 ip = idup(myproc()-&gt;cwd); while((path = skipelem(path, name)) != 0)&#123; // 考虑路径中的每一个部分 ilock(ip); // 确保ip-&gt;type从磁盘中加载出来 if(ip-&gt;type != T_DIR)&#123; // 不是目录，查找失败 iunlockput(ip); return 0; &#125; // 最后一个路径元素，循环提前结束 if(nameiparent &amp;&amp; *path == '\0')&#123; // Stop one level early. iunlock(ip); return ip; &#125; if((next = dirlookup(ip, name, 0)) == 0)&#123; // 寻找路径元素失败，查找失败 iunlockput(ip); return 0; &#125; iunlockput(ip); ip = next; &#125; if(nameiparent)&#123; iput(ip); return 0; &#125; return ip;&#125; skipelem 将路径中的下一个路径元素复制到名称中，返回指向复制后的元素的指针。 namei 解析path并返回对应的inode。 nameiparent 返回上级目录的i节点并且把最后一个元素拷贝到name中。 函数的详细内容位于fs.c 文件描述符层123456789struct file &#123; enum &#123; FD_NONE, FD_PIPE, FD_INODE &#125; type; // 文件分为管道文件和普通文件等，FD_NONE表示文件未使用 int ref; // reference count 引用计数 char readable; // 可读 char writable; // 可写 struct pipe *pipe; // 管道 struct inode *ip; // 指向i节点 uint off;&#125;; xv6中每个进程都有自己的打开文件表。每个打开文件均由上面的结构体表示，它是一个对i节点或者管道和文件偏移的封装。每次调用open都会创建一个新的file结构体。 如果多个进程相互独立地打开了同一个文件，不同的实例将拥有不同的I/O偏移。而且同一个file结构体可以在一个进程的文件表中多次出现，同时也可以在多个进程的文件表中出现。对每一个打开的文件都有一个引用计数，一个文件可以被打开用于读、写或者二者。 系统中所有的打开文件都存在于一个全局的文件表ftable中。 函数该层的函数位于file.c，详细注释见代码文件。 filealloc 分配文件，扫描整个文件表寻找没有被引用的文件并返回一个新的引用。 filedup 重复引用文件，增加引用计数。 fileclose 释放对文件引用的函数，减少引用计数，当一个文件的引用计数变为0的时候，根据文件类型的不同,释放掉当前的管道或者i节点。 fileread 读文件，实现对文件的read操作 filewrite 写文件，实现对文件的write操作。 filestat 获取文件的元信息，实现对文件的stat操作（只允许作用在inode）。 系统调用暂无内容。 文件系统中xv6可改进之处cache 使用的替换策略为LRU，算法较为简单。 链表的使用虽然实现简单，但查找效率低，时间复杂度高。若能使用哈希表等实现查找可提高效率。 目录查找目录查找为线性查找，在目录数量较多的情况下耗时巨大。若能使用树等结构，便能大大减小时间复杂度。 大小固定文件系统的大小在xv6中是不改变的，固定在一个磁盘设备上。这一点对于个人PC影响不大，但在需要存储大量文件或超大文件的情况下，便有些捉襟见肘。]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GG]]></title>
    <url>%2F2019%2F08%2F27%2FGG%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[世界]]></title>
    <url>%2F2019%2F08%2F06%2FHK%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建站日志]]></title>
    <url>%2F2019%2F07%2F26%2F%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[主题Next一开始选用的是Yilia,但由于Yilia开发使用的webpack版本较老，定制时易踩坑，故改用Next。本文根据官方文档整理，并根据自己喜好加入了一些第三方插件和修改。所有修改将会逐步给出，Next的配置完整说明可参照官方文档。 基本配置下载12cd 博客根目录git clone https://github.com/iissnan/hexo-theme-next themes/next 启用打开根目录中的 _config.yml 文件,更改 theme 为 next 。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 选择Scheme打开 theme/next 中的 _config.yml 文件，选择 Muse 。 12345# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 切换语言打开根目录中的 _config.yml 文件,设置 language 为 zh-Hans 。 自定义主页文章阴影效果打开 themes/next/source/css/_custom/custom.styl ,增加 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 修改标签打开 themes/next/layout/_macro/post.swig ，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 。 动态背景打开 theme/next/layout/_layout.swig ，在 &lt; /body&gt;之前添加代码 123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 打开 theme/next 中的 _config.yml 文件,将 canvas_next 置为 true 。 1canvas_nest: true 看板狗安装 12npm install hexo-helper-live2d --savenpm install live2d-widget-model-wanko 打开根目录中的 _config.yml 文件,增加以下代码。其中对 display 部分做了修改，以适应网页布局。 1234567891011121314151617181920212223242526272829# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: position: right width: 200 height: 400 # 水平位置 hOffset: 40 # 垂直位置 vOffset: -80 mobile: show: true # 手机中是否展示 Github Corners打开Github Corners,复制代码并粘贴代码到 themes/next/layout/_layout.swig 文件中(放在 &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 的下面)，并把 href 改为正确的github地址。 由于比较喜欢这个小家伙一直出现，故更改代码中的 position: absolute 为 position: fixed 。 123&lt;div class="headband"&gt;&lt;/div&gt;&lt;a href="https://github.com/RootReturn0" class="github-corner" aria-label="View source on GitHub"&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: fixed; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; RSS12cd 博客根目录npm install hexo-generator-feed --save 打开根目录中的 _config.yml 文件,添加 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 打开 theme/next 中的 _config.yml 文件,在 rss 后添加 /atom.xml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 加密有时写博客并不希望让所有人看到，故加入了加密功能。Hexo是一个静态博客，自己写一个js进行加密虽不困难，但样式实在不可恭维。这里采用大神做出的hexo-blog-encrypt进行加密。 安装12cd 博客根目录npm install hexo-blog-encrypt --save 配置根本配置打开根目录中的 _config.yml 文件,添加 12encrypt: enable: true 自定义配置然后在blog的头部添加上对应的字段，如password, abstract, message。 1234567---title: 文章加密date: 2019-08-06 19:00:02password: 你的密码abstract: 显示在目录页或首页的内容简介。message: 此处为输入密码时的提示内容。--- 全局配置希望修改默认的提示和摘要内容时，你可以添加如下配置在根目录中的 _config.yml 文件中。 1234encrypt: enable: true default_abstract: 这是一篇加密文章，内容可能是xxx default_message: 输入密码，查看文章。]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2019%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[12345#include &lt;iostream&gt;int main()&#123; std::cout&lt;&lt;"Hello world!"&lt;&lt;std::endl;&#125; 12def hello() print('Hello world!')]]></content>
  </entry>
  <entry>
    <title><![CDATA[ILY]]></title>
    <url>%2F2019%2F07%2F25%2FILY%2F</url>
    <content type="text"><![CDATA[I am here. A ghost.]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
