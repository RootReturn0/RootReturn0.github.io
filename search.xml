<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[上传本地图片]]></title>
    <url>%2F2019%2F10%2F19%2F%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[安装插件12cd /d 你的hexo根目录npm install hexo-asset-image --save 修改配置文件打开根目录下的 _config.yml 文件，修改以下内容： 12345post_asset_folder: true# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yourname.github.io 插入图片运行 hexo n &quot;yourblogname&quot; 生成博文时，/source/_posts 目录下会生成一个与 md 同名的文件夹，将图片放人该文件夹。 1使用![](yourblogname/picture.jpg)插入图片即可。]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[增加页面]]></title>
    <url>%2F2019%2F10%2F19%2F%E5%A2%9E%E5%8A%A0%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[标签🔗官方链接 新建一个页面 1hexo new page tags 编辑新建界面，将页面类型设置为 tags ，主题将会在这个页面上显示标签云。 12345---title: Tagsdate: 2019-10-19 01:26:01type: "tags"--- 去除主题配置文件 _config.yml 中 tags 的注释。 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 标签的使用1tags: xxx 或 123tags:- xxx- xxx 注意：使用第二种方式时，为并列标签，无等级区分。 分类🔗官方链接 新建一个页面 1hexo new page categories 编辑新建界面，将页面类型设置为 categories ，主题将会在这个页面上显示所有的分类。 12345---title: Categoriesdate: 2019-10-19 01:26:08type: "categories"--- 去除主题配置文件 _config.yml 中 categories 的注释。 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 分类的使用1categories: xxx 或 123categories:- xxx- xxx 注意：使用第二种方式时，并非并列分类，而是分级分类。其中越靠前的越高级。]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android学习笔记_Activity]]></title>
    <url>%2F2019%2F10%2F18%2FAndroid%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Activity%2F</url>
    <content type="text"><![CDATA[笔记基于郭霖大神所著的《第一行代码》第二版之第2章。 其中： 使用的IDE：Android Studio 示例项目名：ActivityTest 包名：“com.example.avtivitytest” 手动创建活动新建项目时选择Add No Activity 初始文件结构 右击com.example.activitytest包-&gt;New-&gt;Activity-&gt;Empty Activity，会弹出对话框，其中 Generate LayoutFile 会在app/src/main/res目录中为该活动自动生成对应的 layout 的 xml 文件；Launcher Activity 会将该活动设置为程序运行时首先加载的活动，即当前项目的主活动。 创建和加载布局右击app/src/main/res目录-&gt;New-&gt;Directory，可创建一个名为 layout 的目录，而后右击该目录，即可新建布局文件。 添加按钮12345678910111213&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;Button android:id="@+id/button_1" // 定义id android:layout_width="match_parent" // 表示和父元素一样宽 android:layout_height="wrap_content" // 表示当前元素的高度恰好包含里面内容 android:text="Button_1" /&gt;&lt;/LinearLayout&gt; 加载123456789101112131415package com.example.activitytest;import androidx.appcompat.app.AppCompatActivity;import android.os.Bundle;public class FirstActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); // 本行将layout的id传入，为当前活动加载布局 setContentView(R.layout.thirt_layout); &#125;&#125; 在AndroidManifest文件注册1234567891011121314151617181920212223&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.activitytest"&gt; &lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:roundIcon="@mipmap/ic_launcher_round" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;activity android:name=".FirstActivity" // 指定注册活动 android:label="This is FirstActivity" &gt; // 指定活动标题栏内容 &lt;intent-filter&gt; // 以下两行将活动配置为主活动 &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; Toast及按钮响应123456789101112protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Toast.makeText(FirstActivity.this, "You clicked Button_1!", Toast.LENGTH_SHORT).show(); &#125; &#125;);&#125; 通过 findViewById() 方法获取到布局文件中定义的元素，这里传入 R.id.button_1 来得到按钮的实例，而后注册监听器。 Toast 中 makeText 有三个参数，第一个是 Context（活动是一种上下文），第二个参数是 Toast 显示的文本内容，第三个是持续时长。注意，只有加上后面的 .show() ，Toast 才会显示。 Menu使用 Android 提供的方式创建菜单。菜单通过应用右上角的三个点的小按钮，以列表形式显示。 创建菜单右击app/src/main/res目录-&gt;New-&gt;Directory，创建名为 menu 的文件夹，并在文件夹下创建一个名为 main 的菜单文件（右击menu-&gt;New-&gt;Menu resource file）。 在main.xml添加如下代码： 123456789&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;item android:id="@+id/add_item"// 标识符 android:title="Add" // 名称 /&gt; &lt;item android:id="@+id/remove_item" android:title="Remove" /&gt;&lt;/menu&gt; 其中item标签用来创建具体的菜单项。 而后在FirstActivity中重写函数： 123456public boolean onCreateOptionsMenu(Menu menu)&#123; // 第一个参数为资源文件，第二个指定添加到的Menu对象 getMenuInflater().inflate(R.menu.main, menu); // 表示是否允许显示菜单 return true; &#125; 菜单响应在FirstActivity中重写函数： 1234567891011121314public boolean onOptionsItemSelected(@NonNull MenuItem item) &#123; // 判断点击的菜单项 switch (item.getItemId())&#123; case R.id.add_item: Toast.makeText(this,"You clicked Add",Toast.LENGTH_SHORT).show(); break; case R.id.remove_item: Toast.makeText(this,"You clicked Remove",Toast.LENGTH_LONG).show(); break; default: &#125; return super.onOptionsItemSelected(item);&#125; 销毁活动在模拟器中按下 Back 键，或调用finish()方法。 1234567891011protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; finish() &#125; &#125;);&#125; 使用Intent切换活动显式Intent创建第二个活动，名为 SecondActivity。 修改FirstActivity中的按钮点击事件： 1234567891011121314protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; // 传入 FirstActivity.this 作为上下文，SecondActivity.class为目标活动 Intent intent = new Intent(FirstActivity.this,SecondActivity.class); startActivity(intent); &#125; &#125;);&#125; 隐式Intent通过AndroidManifest.xml中的activity标签下配置&lt;intent-filter&gt;内容，可以指定当前活动能够响应的 action 和 category。只有&lt;action&gt;和&lt;category&gt;中的内容能够同时匹配 Intent 指定的内容时，活动才能响应。 代码如下： 123456&lt;activity android:name=".SecondActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="com.example.activitytest.ACTION_START" /&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 修改FirstActivity中的按钮点击事件： 12345678910111213protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent("com.example.activitytest.ACTION_START"); startActivity(intent); &#125; &#125;);&#125; 增加Category在AndroidManifest中配置如下： 123456789&lt;activity android:name=".SecondActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="com.example.activitytest.ACTION_START" /&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; // 不添加下行代码将导致程序崩溃 &lt;category android:name="com.example.activitytest.MY_CATEGORY" /&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 修改FirstActivity中的按钮点击事件： 1234567891011121314protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent("com.example.activitytest.ACTION_START"); intent.addCategory("com.example.activitytest.MY_CATEGORY"); startActivity(intent); &#125; &#125;);&#125; 其他Intent用法启动其他应用程序修改FirstActivity中的按钮点击事件： 123456789101112131415protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent(Intent.ACTION_VIEW); // 注意：“http://” 不能省略 intent.setData(Uri.parse("http://ww.baidu.com")); startActivity(intent); &#125; &#125;);&#125; 此时点击按钮可跳转至浏览器打开 “www.baidu.com&quot;。 在AndroidManifest中的&lt;intent-filter&gt;标签配置&lt;data&gt;标签，可指定活动能够响应的类型数据。&lt;data&gt;标签主要可配置以下内容： android:scheme 协议，如 http android:host 主机名 android:port 端口 android:path 以上之后的部分 android:mimeType 可处理的数据类型 示例： 1234567&lt;activity android:name=".ThirdActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.VIEW" /&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; &lt;data android:scheme="http" /&gt; &lt;/intent-filter&gt;&lt;/activity&gt; 当前活动能够响应的 action 是 Intent.ACTION_VIEW 的常量值，数据协议必须是 http。在点击按钮后，该活动也能响应Intent： 选择响应Intent的程序 从用户体验的角度来看，如果活动本身不具备加载并显示的网页的功能，千万不要这么用啊！！！ 除 http 协议外，还有许多 Uri 协议，常用的 Uri 协议见 &lt;&lt;Android 常用URI 值得记住&gt;&gt;。 传递数据Intent 中提供了一系列 putExtra() 方法的重载，可以将想要传递的数据暂存在 Intent 中。当启动另一个 Intent 后，只需要把这些数据再从 Intent 中取出即可。 向下一个活动传递数据假设 FirstActivity 中有一个字符串，现在想把这个字符串传递到 SecondActivity 中，可以这样编写代码： 12345678910button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; String data = "Hello SecondActivity"; Intent intent = new Intent(FirstActivity.this,SecondActivity.class); // 第一个参数是键，用于之后取值；第二个参数为要传递的数据 intent.putExtra("extra_data",data); startActivity(intent); &#125;&#125;); SecondActivity 中接收代码： 123456789101112131415161718public class SecondActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_second); // 获取用于启动 SecondActivity 的Intent Intent intent = getIntent(); /** * getStringExtra() 获取字符串数据； * 如果是整型数据则用 getIntExtra()； * 如果是布尔数据则用 getBooleanExtra()； * 以此类推。 * / String data = intent.getStringExtra("extra_data"); Log.d("SecondActivity",data); &#125;&#125; 返回数据给上一个活动Activity 中还有一个startActivityForResult()方法也可以启动活动。顾名思义，这个方法期望在活动销毁时能过返回结果给上一个活动。要想返回数据，则需要使用这个方法： 12345678910111213button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent intent = new Intent(FirstActivity.this,SecondActivity.class); intent.putExtra("extra_data",data); /** * 第一个参数是intent； * 第二个参数是请求码，用于在之后的回调中判断数据的来源， * 请求码只要是一个唯一值就行。 * / startActivityForResult(intent, 1); &#125;&#125;);]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Haydn]]></title>
    <url>%2F2019%2F10%2F08%2FHaydn%2F</url>
    <content type="text"><![CDATA[有时并非欢快地跳跃着的。 但却依旧舒缓人疲惫的心灵。 非山河壮阔， 非人间星火， 非天外飞仙。 而是流淌在春天的生死明灭。]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[H]]></title>
    <url>%2F2019%2F10%2F07%2FH%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R]]></title>
    <url>%2F2019%2F10%2F07%2FC%2F</url>
    <content type="text"><![CDATA[在曾经最低谷的时候（极小值）， 她激励了我； 在现在最底谷的时候（极小值）， 她安慰了我。 果然是我生命中重要的一个人（笑 CAUSE AND CONSEQUENCE]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知足常乐]]></title>
    <url>%2F2019%2F10%2F07%2FAbout%20Alessa0%2F</url>
    <content type="text"><![CDATA[English & You Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Soul-like]]></title>
    <url>%2F2019%2F10%2F06%2Fsoul-like%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! U2FsdGVkX1+0Q/fzaqycOq0JK1M0bITyNF/DIgPFs1sfctiMZLai+XoLtac32kFTmuVNGeLLdEU4XPIdmvMigfmkY8aVQGzCiOXIgtfIoW0LAp2UD5ul9FV7fVkZ8pU3Fh8HLuhY+qwAB635JlvTWNYFqWeRWt/gk1CuHEARiJFAPZCcx/KYcKBCrv84yacpIwebZCFl0C0zS21bIx3znsOhIx82SLDRnSoOVweoNNI9rmDvw+go81Vu1h6xVopES2+FouV/M0RTRtGbsq6CJCXCF3C3CqEDajjNOHHvuJUbG74xxiQvG97GLhWok1S8dzdFxh/Aqx11T5euUuHrj1juKtJT6r28VVTayYaXLIpDMxCxC/8D4uM1HabY/uOroRX0IYYKGbwpaXPsHMTrGsJIxNJXR3Vqyj08o9gTRZsz7wwh5JvZNSFFedavY92XzoA30wrhF0UVgFy63iJVqu7ILXhye9NyFH1rv2ufr/qm20Dm9i+iCqWZ9pRIZX/pezS+UAxEBdfWMS+f/yT1hzhch8Di3DxCrkK2Kf5N2qVahf+0wTehN4+/5gdMrFue1Q0Ep4V8yHdcHgdo8SB703f7f+xdfx87L6TfGC6GFw7iYZqXxUWYTKBC0+pMtumB7zh+IXsGeF+41WwkekwskbGHoXkGjambvqwWkIHAKYGfxzIZGvvDPUXoQQtEUvhhGJ/nvETZIfHCP3ose2es8A==]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-调度]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E8%B0%83%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[调度由于可能同时有多个CPU请求进行调度，故需要进程表锁ptable.lock来避免竞争。 因此，进程在让出CPU前，必须要获得进程表锁，并释放其拥有的其他锁（避免同时持有多个锁导致死锁），修改自己的状态proc-&gt;state，然后进行调度。 函数以下函数位于代码文件proc.c中。 sched进程进入调度器，且必须持有进程表锁并改变进程状态。由于进程此时持有进程表锁，所以CPU应该是在关中断的情况下运行。 12345678910111213141516171819202122voidsched(void)&#123; int intena; struct proc *p = myproc(); // 未持有进程表锁，不应进入调度，引发内核错误 if(!holding(&amp;ptable.lock)) panic("sched ptable.lock"); // 处于锁状态，不应进入调度，引发内核错误 if(mycpu()-&gt;ncli != 1) panic("sched locks"); // 进程处于运行态，不应进入调度，引发内核错误 if(p-&gt;state == RUNNING) panic("sched running"); // 开中断，不可执行mycpu()函数，不应进入调度，引发内核错误 if(readeflags()&amp;FL_IF) panic("sched interruptible"); intena = mycpu()-&gt;intena; // 暂存状态 swtch(&amp;p-&gt;context, mycpu()-&gt;scheduler); // 保存当前上下文，并切换到之前保存的调度器的上下文，进入调度器 mycpu()-&gt;intena = intena; // 恢复状态&#125; yield在xv6中，使用时间片轮转法进行调度。当进程用完它的CPU时间片时，时钟中断会调用yield函数来让出CPU给新的进程，yield调用sched函数，sched调用swtch来切换都调度器线程： 12345678voidyield(void)&#123; acquire(&amp;ptable.lock); //DOC: yieldlock 请求进程表锁 myproc()-&gt;state = RUNNABLE; // 切换进程状态 sched(); release(&amp;ptable.lock); // 释放进程表锁&#125; scheduler每个CPU在设置完成自己之后调用scheduler。 调度器scheduler永远不会返回，而是不断循环。循环步骤为： 选择要运行的流程 swtch开始运行该过程 最终该过程通过swtch将控制转移回调度程序。 1234567891011121314151617181920212223242526272829303132333435363738voidscheduler(void)&#123; struct proc *p; struct cpu *c = mycpu(); c-&gt;proc = 0; // 不断循环，永不停止 for(;;)&#123; // 开中断，以允许I/O到达 sti(); // 在进程表上不断循环，寻找进程并运行 acquire(&amp;ptable.lock); // 请求进程表锁 for(p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)&#123; if(p-&gt;state != RUNNABLE) // 进程不可运行，转到下一个进程 continue; // Switch to chosen process. It is the process's job // to release ptable.lock and then reacquire it // before jumping back to us. // 切换到选定的进程 c-&gt;proc = p; switchuvm(p); // 切换到该进程的页表 p-&gt;state = RUNNING; swtch(&amp;(c-&gt;scheduler), p-&gt;context); // 切换到该进程运行 switchkvm(); // 当没有进程正在运行时，将页表寄存器切换到仅内核页表。 // Process is done running for now. // It should have changed its p-&gt;state before coming back. // 进程已结束运行，改变自身状态 c-&gt;proc = 0; &#125; release(&amp;ptable.lock); // 释放进程表锁，防止其他CPU无法进行调度 &#125;&#125; 锁与中断锁 为保证进程状态的上下文在运行swtch时保持不变：进程表锁由旧进程获得，新进程释放。 为防止其他CPU闲置时锁被当前CPU占有而无法调度，其他CPU上运行进程无法让出CPU，导致死锁的情况：在遍历一次进程表后总要释放锁。 中断 为防止所有进程都在等待I/O时关中断导致的I/O无法到达引发的死锁，调度器在每次循坏开始前进行开中断。 睡眠与唤醒函数sleep和wakeup位于代码文件proc.c中。 使进程进入睡眠或进行唤醒均需要改变进程状态，故需要进程表锁以保证状态修改的原子性。其中函数sleep要在使进程进入睡眠前获取进程表锁，以保证在使函数进入睡眠时至少持有一个锁，防止wakeup在进程进入睡眠前被调用导致的死锁。当sleep本身持有的锁为进程表锁时，则略过请求这一步，防止死锁。 可改进之处调度 轮转法无优先级的区分 会导致高优先级的进程无法优先运行，可能导致系统运行时间的增加，影响使用者在实际使用时的体验。可使用其他较为复杂的算法，如高响应比优先算法等以改进体验。 睡眠与唤醒 唤醒需要遍历进程表 在进程数量大的时候这种做法效率极低。使用另一个结构体来维护链表可大大提高效率。 唤醒时会唤醒队列中全部进程 大多数情况下，同一时间需要唤醒的进程在队列中是少数部分，许多仍需等待的进程将会被“莫名其妙”地唤醒并再度检查状态重新进入睡眠，导致操作系统需要处理许多新的不必要的任务。 唤醒时应分为个体唤醒（唤醒单个进程）和群体唤醒（唤醒所有进程），减少系统负担。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-管道]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E7%AE%A1%E9%81%93%2F</url>
    <content type="text"><![CDATA[管道从管道的一端写入数据字节，然后数据被拷贝到内核缓冲区中，接着进程就能从管道的另一端读取数据了。 在xv6中，管道使用被读取字节数nread和被写入字节数nwrite的差值判断管道状态： nwrite == nread 则数据未写入或被读取完毕，管道空 nwrite == nread + PIPESIZE 则管道满 由于管道的读取与写入均需要使用nread和nwrite以获悉管道状态，故这两个计数参数不能在某一函数（写入/读取）清零，否则将影响另一函数（读取/写入）的执行。因此，xv6中使用data[nread % PIPESIZE]和data[nwrite % PIPESIZE]来控制读写时的管道数据偏移，即循环写/读，在data[PIPESIZE-1]后写入的数据存放在data[0]中。 数据结构12345678struct pipe &#123; struct spinlock lock; // 锁 char data[PIPESIZE]; // 管道数据 uint nread; // 被读取字节数，从缓冲区中读取 uint nwrite; // 被写入字节数，写入缓冲区 int readopen; // 读文件描述符是否依旧处于open状态 int writeopen; // 写文件描述符是否依旧处于open状态&#125;; 管道函数以下分析管道读写函数，其他函数仅列出函数作用，详细注释见代码文件pipe.c。 读写管道读写操作通过管道锁实现互斥，操作运行时必须持有管道锁。 管道数据写入时首先获取管道锁而后写入数据，若达到管道容量上限，则写操作唤醒读操作后进入睡眠等待并释放管道锁。此时读操作可获得请求的管道锁，在读取完数据后管道变空，则读操作唤醒写操作后进入睡眠等待并释放管道锁。而后管道写操作再次获得管道锁，循环往复直至数据传输完毕，其中最后一次传输可能未写满管道。 当使用管道的操作被杀后，管道读写操作都将终止；当管道不可读时，管道写操作将被终止。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// 管道写intpipewrite(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 for(i = 0; i &lt; n; i++)&#123; while(p-&gt;nwrite == p-&gt;nread + PIPESIZE)&#123; // 管道满 // 如果管道文件不可读或进程被杀，释放管道锁并终止管道写操作 if(p-&gt;readopen == 0 || myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 sleep(&amp;p-&gt;nwrite, &amp;p-&gt;lock); // 管道写操作进入睡眠等待（睡眠时将释放管道锁） &#125; p-&gt;data[p-&gt;nwrite++ % PIPESIZE] = addr[i]; // 将所需读取的块内数据赋值给管道数据 &#125; wakeup(&amp;p-&gt;nread); // 通知睡眠中的读者缓冲区中有数据可读 release(&amp;p-&gt;lock); // 释放管道锁 return n;&#125;//管道读intpiperead(struct pipe *p, char *addr, int n)&#123; int i; acquire(&amp;p-&gt;lock); // 请求获得管道锁，以保护计数器、数据以及相关不变量 while(p-&gt;nread == p-&gt;nwrite &amp;&amp; p-&gt;writeopen)&#123; //DOC: 管道为空且管道可写，则管道读操作可进入睡眠 // 进程被杀，释放管道锁，终止管道读操作 if(myproc()-&gt;killed)&#123; release(&amp;p-&gt;lock); return -1; &#125; sleep(&amp;p-&gt;nread, &amp;p-&gt;lock); //DOC: piperead-sleep 管道读操作进入睡眠等待（睡眠时将释放管道锁） &#125; for(i = 0; i &lt; n; i++)&#123; // 拷贝数据 if(p-&gt;nread == p-&gt;nwrite) // 读取字节数等于写入字节数，表示读取完成 break; addr[i] = p-&gt;data[p-&gt;nread++ % PIPESIZE]; // 将所需读取的管道数据赋值给块内数据 &#125; wakeup(&amp;p-&gt;nwrite); // 通知睡眠中的写者缓冲区中可写 release(&amp;p-&gt;lock); return i;&#125; 其他 pipealloc 管道分配，并初始化管道。 pipeclose 管道关闭。若读写两方均关闭，则释放内存；否则关闭管道一端并唤醒另一方。当关闭写端时，仍可进行读操作，但将管道内剩余数据读完后，再次进行读操作便返回0，相当于读到文件末尾；当关闭读段时，写操作会在进行过程中中断。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xv6-文件系统]]></title>
    <url>%2F2019%2F08%2F31%2Fxv6-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[文件系统总体设计文件系统分层 如图所示xv6的文件系统分6层实现： 第一层（自下而上）通过块缓冲读写 IDE 硬盘，同步对磁盘的访问，且通过块的锁保证同一时间只有一个内核进程可以修改磁盘块； 第二层使得更高层的接口可以将对磁盘的更新按会话打包，通过会话的方式来保证这些操作是原子操作。 第三层提供无名文件，每一个文件由一个inode和一连串的数据块组成。 第四层将目录实现为一种特殊的inode，内容是一连串的目录项，每一个目录项包含一个文件名和对应的inode。 第五层提供了层次路经名（如/xx/xxx），这一层通过递归的方式来查询路径对应的文件。 第六层将许多资源（如管道，设备，文件等）抽象为文件系统的接口，极大地简化了程序员的工作。 磁盘分层磁盘分层为引导块、超级块、日志块、inode块、空闲块位图和数据块等。 文件系统不使用引导块；超级块包含了文件系统的元信息；日志块中的日志维护了文件系统操作的原子性，防止操作过程中引发的系统崩溃而导致的数据不同步；inode块用于存放inode（一个块可存放多个inode）；空闲块位图便于查找空闲的块；数据块中保存了文件和目录等内容。 块缓冲层需要实现的目标 同步对磁盘的访问。对于任意一个块，同一时间仅有一份拷贝放在内存中且只允许一个内核线程对该拷贝进行修改。 缓存常用的块以减少磁盘读取次数，提高系统效率。 实现方案代码参见bio.c。 根据时间与空间局部性原理，将最近经常访问的磁盘块缓存在内存中，并使用LRU替换策略。 结构定义xv6将缓冲区分为两种状态： B_VALID 意味着这个缓冲区拥有磁盘块的有效内容； B_DIRTY 意味着缓冲区的内容已经被改变并且需要写回磁盘； 与旧版相比，B_BUSY 状态在最新版代码中被删去。但由于缓存区中的块的锁的存在，只有持有锁才能访问该块，而在另一线程未使用完成前，该锁不会被释放，此时只能循环等待锁的释放，获得锁后方可获得块。故依旧可保持块内容的原子性。 12345678910111213141516171819202122// 内存中的磁盘块结构struct buf &#123; int flags; // 标记磁盘状态，valid/dirty uint dev; // 磁盘设备号 uint blockno; // 块编号 struct sleeplock lock; uint refcnt; // 引用计数 struct buf *prev; // LRU cache list 使用LRU替换 struct buf *next; // 链式结构连接磁盘块 struct buf *qnext; // 磁盘队列 uchar data[BSIZE]; // 块大小为512字节&#125;;// 块缓冲区结构struct &#123; struct spinlock lock; struct buf buf[NBUF]; // 通过 prev/next 连接所有缓冲块 // 其中 head.next 是最近最常使用的块. struct buf head;&#125; bcache; 初始化 binit从一个静态数组buf中构建出一个有NBUF个元素的双向链表。所有对块缓冲的访问都通过链表而非静态数组。 123456789101112131415161718192021voidbinit(void)&#123; struct buf *b; // 初始化块缓冲锁 initlock(&amp;bcache.lock, "bcache");//PAGEBREAK! // 构建缓冲双向链表 bcache.head.prev = &amp;bcache.head; bcache.head.next = &amp;bcache.head; for(b = bcache.buf; b &lt; bcache.buf+NBUF; b++)&#123; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; // 初始化缓冲区中的块的锁 initsleeplock(&amp;b-&gt;lock, "buffer"); bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125;&#125; 查找 bget扫描缓冲区链表，通过给定的设备号和扇区号找到对应的缓冲区。如果未找到，则分配一个缓冲区，否则返回一个持有锁的缓冲区。代码中在双向链表的搜索中向最近最常使用方向查找，若未找到则向另一方向查找空闲缓冲区以分配。 其中若找到缓冲区中指定的块，返回的结果也不一定是指定的块。因为在请求该块的锁前已释放缓冲区锁，若该块未持有锁且正在被用来缓冲另外一个块，则重新获得锁时已是另一个块。 123456789101112131415161718192021222324252627282930313233343536static struct buf*bget(uint dev, uint blockno)&#123; struct buf *b; acquire(&amp;bcache.lock); // 请求块缓冲区锁 // 不能保证 b 仍然是可用的缓冲区：它有可能被用来缓冲另外一个块。 for(b = bcache.head.next; b != &amp;bcache.head; b = b-&gt;next)&#123; if(b-&gt;dev == dev &amp;&amp; b-&gt;blockno == blockno)&#123; b-&gt;refcnt++; // 引用计数加一 release(&amp;bcache.lock); // 释放块缓冲区锁 acquiresleep(&amp;b-&gt;lock); // 请求该块的锁 return b; &#125; &#125; // Not cached; recycle an unused buffer. 未找到则重新查找 // Even if refcnt==0, B_DIRTY indicates a buffer is in use // because log.c has modified it but not yet committed it. // 即使refcnt等于0，也可通过B_DIRTY知道缓冲区被使用，此时日志已修改但未提交 for(b = bcache.head.prev; b != &amp;bcache.head; b = b-&gt;prev)&#123; if(b-&gt;refcnt == 0 &amp;&amp; (b-&gt;flags &amp; B_DIRTY) == 0) &#123; b-&gt;dev = dev; b-&gt;blockno = blockno; b-&gt;flags = 0; b-&gt;refcnt = 1; release(&amp;bcache.lock); acquiresleep(&amp;b-&gt;lock); return b; &#125; &#125; // 未找到块且未能分配块，引发内核错误 panic("bget: no buffers");&#125; 读 breadbread会首先调用bget从缓存中去寻找块是否存在。如果存在直接返回；如果不存在则请求磁盘读操作，读到缓存中后再返回结果。 12345678910111213struct buf*bread(uint dev, uint blockno)&#123; struct buf *b; // 获取缓冲区 b = bget(dev, blockno); // 如果缓冲区中不存在指定的块，则从磁盘中读出 if((b-&gt;flags &amp; B_VALID) == 0) &#123; iderw(b); &#125; return b;&#125; 写 bwrite设置 B_DIRTY 位并且调用 iderw 将缓冲区的内容写到磁盘。 123456789voidbwrite(struct buf *b)&#123; // 该块未锁，可能已被释放，无法写入，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("bwrite"); b-&gt;flags |= B_DIRTY; iderw(b);&#125; 释放 brelse将一块缓冲区移动到链表的头部，唤醒睡眠在这块缓冲区上的进程。 123456789101112131415161718192021222324// 唤醒睡眠在这块缓冲区上的进程；将一块缓冲区移动到链表的头部。voidbrelse(struct buf *b)&#123; // 缓冲区未持有块锁，引发内核错误 if(!holdingsleep(&amp;b-&gt;lock)) panic("brelse"); releasesleep(&amp;b-&gt;lock); // 释放块锁 acquire(&amp;bcache.lock); // 请求 缓冲区锁 b-&gt;refcnt--; //引用计数减一 if (b-&gt;refcnt == 0) &#123; // 无进程等待使用，移动到链表头部 b-&gt;next-&gt;prev = b-&gt;prev; b-&gt;prev-&gt;next = b-&gt;next; b-&gt;next = bcache.head.next; b-&gt;prev = &amp;bcache.head; bcache.head.next-&gt;prev = b; bcache.head.next = b; &#125; release(&amp;bcache.lock); //释放缓冲区锁&#125; 日志层每一个系统调用都可能包含一个必须从头到尾原子完成的写操作序列，称这样的一个序列为一个会话。任何时候只能有一个进程在一个会话之中，其他进程必须等待当前会话中的进程结束。因此同一时刻日志最多只记录一次会话。 该层用于维护系统崩溃后到原子性，即会话要么完成，要么系统恢复至会话开始前的状态。 块分配器本部分涉及的函数位于fs.c。 由于bread与brelse已有锁进行互斥，块分配器无需再加锁。 分配新的磁盘块123456789101112131415161718192021222324static uintballoc(uint dev)&#123; int b, bi, m; struct buf *bp; bp = 0; for(b = 0; b &lt; sb.size; b += BPB)&#123; // 读位图每一块 bp = bread(dev, BBLOCK(b, sb)); for(bi = 0; bi &lt; BPB &amp;&amp; b + bi &lt; sb.size; bi++)&#123; // 读块内每一位 m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0)&#123; // 判断块是否空闲 bp-&gt;data[bi/8] |= m; // 将块标记为使用中 log_write(bp); brelse(bp); // 释放块 bzero(dev, b + bi); // 清零块 return b + bi; &#125; &#125; brelse(bp); &#125; // 超出块范围，引发错误 panic("balloc: out of blocks");&#125; 释放磁盘块12345678910111213141516static voidbfree(int dev, uint b)&#123; struct buf *bp; int bi, m; readsb(dev, &amp;sb); bp = bread(dev, BBLOCK(b, sb)); bi = b % BPB; m = 1 &lt;&lt; (bi % 8); if((bp-&gt;data[bi/8] &amp; m) == 0) // 释放空闲块，错误 panic("freeing free block"); bp-&gt;data[bi/8] &amp;= ~m; log_write(bp); brelse(bp); // 释放块&#125; inodeinode有两种类别： 磁盘上的记录文件大小、数据块扇区号的数据结构 12345678struct dinode &#123; short type; // 区分文件、目录和特殊文件的 i 节点，0表示为空闲节点 short major; // 主设备号（仅限T_DEV） short minor; // 辅设备号（仅限T_DEV） short nlink; // 文件系统中的i节点连接数 uint size; // 文件的字节数 uint addrs[NDIRECT+1]; // 用于这个文件的数据块的块号&#125;; 内存中的一个 i 节点，包含一个磁盘上 i 节点的拷贝，以及一些内核需要的附加信息 123456789101112131415struct inode &#123; uint dev; // Device number 设备号 uint inum; // Inode number inode号 int ref; // Reference count 引用数 struct sleeplock lock; // protects everything below here 保护以下所有数据 int valid; // inode has been read from disk? i节点是否已从磁盘中读取 // 以下均为磁盘上的i节点，即dinode，的拷贝 short type; // copy of disk inode short major; short minor; short nlink; uint size; uint addrs[NDIRECT+1];&#125;; xv6中有inode的缓冲区，作用与块缓冲区相似。以下函数分析仅包含进行特殊操作或较为复杂的函数，其余函数仅写出作用和使用条件（如iunlock）。其中函数位于fs.c。 获取inode igetiget返回的inode的指针将保证这个inode会留在缓存中，不会被删掉且不会被用于缓存另一个文件（即使未读入磁盘dinode内容）。若磁盘内容未读入，则以后在调用ilock时读入。 其中iget返回的inode的是未被锁的。在目录层的目录查找中，调用者已经对dp上锁，如果在调用iget返回之前尝试去锁上该i节点会有二次锁上dp的可能从而造成死锁。 1234567891011121314151617181920212223242526272829303132static struct inode*iget(uint dev, uint inum)&#123; struct inode *ip, *empty; acquire(&amp;icache.lock); // 在inode的cache中寻找目标inode empty = 0; for(ip = &amp;icache.inode[0]; ip &lt; &amp;icache.inode[NINODE]; ip++)&#123; if(ip-&gt;ref &gt; 0 &amp;&amp; ip-&gt;dev == dev &amp;&amp; ip-&gt;inum == inum)&#123; ip-&gt;ref++; release(&amp;icache.lock); return ip; // 此时返回的i节点内容不一定已从磁盘读入cache &#125; if(empty == 0 &amp;&amp; ip-&gt;ref == 0) // 记录扫描到的第一个空槽 empty = ip; &#125; // 保持inode入口，以下未从磁盘读入内容 if(empty == 0) // cache中无i节点空闲，出错 panic("iget: no inodes"); ip = empty; ip-&gt;dev = dev; ip-&gt;inum = inum; ip-&gt;ref = 1; ip-&gt;valid = 0; release(&amp;icache.lock); return ip;&#125; 分配inode ialloc在设备dev上分配inode：通过给它类型类型将其标记为已分配，返回未锁定但已分配和引用的inode。这里与balloc相似，可参照前文。 123456789101112131415161718192021struct inode*ialloc(uint dev, short type)&#123; int inum; struct buf *bp; struct dinode *dip; for(inum = 1; inum &lt; sb.ninodes; inum++)&#123; bp = bread(dev, IBLOCK(inum, sb)); dip = (struct dinode*)bp-&gt;data + inum%IPB; if(dip-&gt;type == 0)&#123; // inode未分配 memset(dip, 0, sizeof(*dip)); // 分配空间 dip-&gt;type = type; log_write(bp); brelse(bp); return iget(dev, inum); &#125; brelse(bp); &#125; panic("ialloc: no inodes");&#125; 锁inode ilock锁定给定的inode。如有必要，从磁盘读取inode。 1234567891011121314151617181920212223242526voidilock(struct inode *ip)&#123; struct buf *bp; struct dinode *dip; if(ip == 0 || ip-&gt;ref &lt; 1) panic("ilock"); acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 if(ip-&gt;valid == 0)&#123; // inode内容未从磁盘读取 bp = bread(ip-&gt;dev, IBLOCK(ip-&gt;inum, sb)); dip = (struct dinode*)bp-&gt;data + ip-&gt;inum%IPB; ip-&gt;type = dip-&gt;type; ip-&gt;major = dip-&gt;major; ip-&gt;minor = dip-&gt;minor; ip-&gt;nlink = dip-&gt;nlink; ip-&gt;size = dip-&gt;size; memmove(ip-&gt;addrs, dip-&gt;addrs, sizeof(ip-&gt;addrs)); brelse(bp); ip-&gt;valid = 1; if(ip-&gt;type == 0) // inode未被分配，出错，引发恐慌 panic("ilock: no type"); &#125;&#125; 释放引用 iput释放对内存中的某一inode的引用，即引用数减一。对iput（）的所有调用必须在会话内，因为它可能释放inode。 123456789101112131415161718192021222324voidiput(struct inode *ip)&#123; acquiresleep(&amp;ip-&gt;lock); // 请求inode锁 // 如果这是最后一个引用，则可以回收inode缓存条目。 if(ip-&gt;valid &amp;&amp; ip-&gt;nlink == 0)&#123; acquire(&amp;icache.lock); int r = ip-&gt;ref; release(&amp;icache.lock); if(r == 1)&#123; // inode has no links and no other references: truncate and free. // 如果那是最后一个引用并且inode没有连接，释放磁盘上的inode（及其内容）。 itrunc(ip); ip-&gt;type = 0; iupdate(ip); ip-&gt;valid = 0; &#125; &#125; releasesleep(&amp;ip-&gt;lock); // 释放 inode 锁 acquire(&amp;icache.lock); ip-&gt;ref--; // 引用计数减一 release(&amp;icache.lock);&#125; 其他函数 readsb 读超级块 bzero 将块内容清零 iupdate 将修改后的内存中inode复制到磁盘；必须在每次更改ip-&gt; xxx字段后调用；它存在于磁盘上，因为i-node缓存是直写式的；调用者必须持有i节点锁。 iunlock 对指定inode解锁 iunlockput iunlock和iput的结合。由于两种常常一起使用，故整合。 bmap 返回inode中第n个块的磁盘块地址，如果没有这样的块，bmap会分配一个。 stati 从inode复制属性信息。 readi 从inode读数据，调用者必须持有ip-&gt; lock。 writei 给inode写入数据，调用者必须持有ip-&gt; lock。 其中readi和writei均要求给定的偏移和读出的量不超出文件大小。 目录层数据结构目录的i节点的类型是T_DIR,.目录本身是以文件的方式存储到磁盘上的，它的数据是一系列的目录条目。 1234struct dirent &#123; ushort inum; // i节点号 char name[DIRSIZ]; // 目录名&#125;; 函数详细注释位于fs.c。 dirlookup 查找目录中指定名字的条目 dirlink 会写入一个新的目录条目到某一目录下 路径函数 namex 查找并返回inode以获取路径名。如果parent！= 0，则返回父项的inode并复制最终项。路径元素到名称，必须有DIRSIZ字节的空间。该函数必须在会话内部调用，因为它调用iput（）。 1234567891011121314151617181920212223242526272829303132333435static struct inode*namex(char *path, int nameiparent, char *name)&#123; struct inode *ip, *next; if(*path == '/') // 路径以反斜杠开始，则解析从根目录开始 ip = iget(ROOTDEV, ROOTINO); else // 其他情况下则从当前目录开始 ip = idup(myproc()-&gt;cwd); while((path = skipelem(path, name)) != 0)&#123; // 考虑路径中的每一个部分 ilock(ip); // 确保ip-&gt;type从磁盘中加载出来 if(ip-&gt;type != T_DIR)&#123; // 不是目录，查找失败 iunlockput(ip); return 0; &#125; // 最后一个路径元素，循环提前结束 if(nameiparent &amp;&amp; *path == '\0')&#123; // Stop one level early. iunlock(ip); return ip; &#125; if((next = dirlookup(ip, name, 0)) == 0)&#123; // 寻找路径元素失败，查找失败 iunlockput(ip); return 0; &#125; iunlockput(ip); ip = next; &#125; if(nameiparent)&#123; iput(ip); return 0; &#125; return ip;&#125; skipelem 将路径中的下一个路径元素复制到名称中，返回指向复制后的元素的指针。 namei 解析path并返回对应的inode。 nameiparent 返回上级目录的i节点并且把最后一个元素拷贝到name中。 函数的详细内容位于fs.c 文件描述符层123456789struct file &#123; enum &#123; FD_NONE, FD_PIPE, FD_INODE &#125; type; // 文件分为管道文件和普通文件等，FD_NONE表示文件未使用 int ref; // reference count 引用计数 char readable; // 可读 char writable; // 可写 struct pipe *pipe; // 管道 struct inode *ip; // 指向i节点 uint off;&#125;; xv6中每个进程都有自己的打开文件表。每个打开文件均由上面的结构体表示，它是一个对i节点或者管道和文件偏移的封装。每次调用open都会创建一个新的file结构体。 如果多个进程相互独立地打开了同一个文件，不同的实例将拥有不同的I/O偏移。而且同一个file结构体可以在一个进程的文件表中多次出现，同时也可以在多个进程的文件表中出现。对每一个打开的文件都有一个引用计数，一个文件可以被打开用于读、写或者二者。 系统中所有的打开文件都存在于一个全局的文件表ftable中。 函数该层的函数位于file.c，详细注释见代码文件。 filealloc 分配文件，扫描整个文件表寻找没有被引用的文件并返回一个新的引用。 filedup 重复引用文件，增加引用计数。 fileclose 释放对文件引用的函数，减少引用计数，当一个文件的引用计数变为0的时候，根据文件类型的不同,释放掉当前的管道或者i节点。 fileread 读文件，实现对文件的read操作 filewrite 写文件，实现对文件的write操作。 filestat 获取文件的元信息，实现对文件的stat操作（只允许作用在inode）。 系统调用暂无内容。 文件系统中xv6可改进之处cache 使用的替换策略为LRU，算法较为简单。 链表的使用虽然实现简单，但查找效率低，时间复杂度高。若能使用哈希表等实现查找可提高效率。 目录查找目录查找为线性查找，在目录数量较多的情况下耗时巨大。若能使用树等结构，便能大大减小时间复杂度。 大小固定文件系统的大小在xv6中是不改变的，固定在一个磁盘设备上。这一点对于个人PC影响不大，但在需要存储大量文件或超大文件的情况下，便有些捉襟见肘。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GG]]></title>
    <url>%2F2019%2F08%2F27%2FGG%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Me</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[世界]]></title>
    <url>%2F2019%2F08%2F06%2FHK%2F</url>
    <content type="text"><![CDATA[请输入密码。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Thinking</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建站初始日志]]></title>
    <url>%2F2019%2F07%2F26%2F%E5%BB%BA%E7%AB%99%E5%88%9D%E5%A7%8B%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[主题Next一开始选用的是Yilia,但由于Yilia开发使用的webpack版本较老，定制时易踩坑，故改用Next。本文根据官方文档整理，并根据自己喜好加入了一些第三方插件和修改。所有修改将会逐步给出，Next的配置完整说明可参照官方文档。 基本配置下载12cd 博客根目录git clone https://github.com/iissnan/hexo-theme-next themes/next 启用打开根目录中的 _config.yml 文件,更改 theme 为 next 。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 选择Scheme打开 theme/next 中的 _config.yml 文件，选择 Muse 。 12345# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 切换语言打开根目录中的 _config.yml 文件,设置 language 为 zh-Hans 。 自定义主页文章阴影效果打开 themes/next/source/css/_custom/custom.styl ,增加 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 修改标签打开 themes/next/layout/_macro/post.swig ，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 。 动态背景打开 theme/next/layout/_layout.swig ，在 &lt; /body&gt;之前添加代码 123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 打开 theme/next 中的 _config.yml 文件,将 canvas_next 置为 true 。 1canvas_nest: true 看板狗安装 12npm install hexo-helper-live2d --savenpm install live2d-widget-model-wanko 打开根目录中的 _config.yml 文件,增加以下代码。其中对 display 部分做了修改，以适应网页布局。 1234567891011121314151617181920212223242526272829# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: position: right width: 200 height: 400 # 水平位置 hOffset: 40 # 垂直位置 vOffset: -80 mobile: show: true # 手机中是否展示 Github Corners打开Github Corners,复制代码并粘贴代码到 themes/next/layout/_layout.swig 文件中(放在 &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 的下面)，并把 href 改为正确的github地址。 由于比较喜欢这个小家伙一直出现，故更改代码中的 position: absolute 为 position: fixed 。 123&lt;div class="headband"&gt;&lt;/div&gt;&lt;a href="https://github.com/RootReturn0" class="github-corner" aria-label="View source on GitHub"&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: fixed; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; RSS12cd 博客根目录npm install hexo-generator-feed --save 打开根目录中的 _config.yml 文件,添加 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 打开 theme/next 中的 _config.yml 文件,在 rss 后添加 /atom.xml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 加密有时写博客并不希望让所有人看到，故加入了加密功能。Hexo是一个静态博客，自己写一个js进行加密虽不困难，但样式实在不可恭维。这里采用大神做出的hexo-blog-encrypt进行加密。 安装12cd 博客根目录npm install hexo-blog-encrypt --save 配置根本配置打开根目录中的 _config.yml 文件,添加 12encrypt: enable: true 自定义配置然后在blog的头部添加上对应的字段，如password, abstract, message。 1234567---title: 文章加密date: 2019-08-06 19:00:02password: 你的密码abstract: 显示在目录页或首页的内容简介。message: 此处为输入密码时的提示内容。--- 全局配置希望修改默认的提示和摘要内容时，你可以添加如下配置在根目录中的 _config.yml 文件中。 1234encrypt: enable: true default_abstract: 这是一篇加密文章，内容可能是xxx default_message: 输入密码，查看文章。]]></content>
      <categories>
        <category>建站日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2019%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[12345#include &lt;iostream&gt;int main()&#123; std::cout&lt;&lt;"Hello world!"&lt;&lt;std::endl;&#125; 12def hello() print('Hello world!')]]></content>
  </entry>
</search>
