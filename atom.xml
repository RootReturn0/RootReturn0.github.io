<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>〇</title>
  
  <subtitle>世界的本质即是无限的循环</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rootreturn0.github.io/"/>
  <updated>2019-10-18T17:55:45.562Z</updated>
  <id>http://rootreturn0.github.io/</id>
  
  <author>
    <name>rootReturn0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上传本地图片</title>
    <link href="http://rootreturn0.github.io/2019/10/19/%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <id>http://rootreturn0.github.io/2019/10/19/上传本地图片/</id>
    <published>2019-10-18T17:48:13.000Z</published>
    <updated>2019-10-18T17:55:45.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d 你的hexo根目录</span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>打开根目录下的 <code>_config.yml</code> 文件，修改以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://yourname.github.io</span></span><br></pre></td></tr></table></figure><h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p>运行 <code>hexo n &quot;yourblogname&quot;</code> 生成博文时，/source/_posts 目录下会生成一个与 md 同名的文件夹，将图片放人该文件夹。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用![](yourblogname/picture.jpg)插入图片即可。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在写blog时插入本地图片，并上传显示
    
    </summary>
    
      <category term="建站日志" scheme="http://rootreturn0.github.io/categories/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="http://rootreturn0.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>增加页面</title>
    <link href="http://rootreturn0.github.io/2019/10/19/%E5%A2%9E%E5%8A%A0%E9%A1%B5%E9%9D%A2/"/>
    <id>http://rootreturn0.github.io/2019/10/19/增加页面/</id>
    <published>2019-10-18T17:46:34.000Z</published>
    <updated>2019-10-18T17:57:34.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p><a href="https://github.com/iissnan/hexo-theme-next/wiki/创建标签云页面" target="_blank" rel="noopener">🔗官方链接</a></p><p>新建一个页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>编辑新建界面，将页面类型设置为 tags ，主题将会在这个页面上显示标签云。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">date: 2019-10-19 01:26:01</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>去除主题配置文件 <code>_config.yml</code> 中 tags 的注释。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><h2 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: xxx</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>xxx</span><br><span class="line"><span class="bullet">- </span>xxx</span><br></pre></td></tr></table></figure><p>注意：使用第二种方式时，为并列标签，无等级区分。</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p><a href="https://github.com/iissnan/hexo-theme-next/wiki/创建分类页面" target="_blank" rel="noopener">🔗官方链接</a></p><p>新建一个页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>编辑新建界面，将页面类型设置为 categories ，主题将会在这个页面上显示所有的分类。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Categories</span><br><span class="line">date: 2019-10-19 01:26:08</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>去除主题配置文件 <code>_config.yml</code> 中 categories 的注释。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><h2 id="分类的使用"><a href="#分类的使用" class="headerlink" title="分类的使用"></a>分类的使用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: xxx</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>xxx</span><br><span class="line"><span class="bullet">- </span>xxx</span><br></pre></td></tr></table></figure><p>注意：使用第二种方式时，并非并列分类，而是分级分类。其中越靠前的越高级。</p>]]></content>
    
    <summary type="html">
    
      新建界面，解决跳转tags等404问题
    
    </summary>
    
      <category term="建站日志" scheme="http://rootreturn0.github.io/categories/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="http://rootreturn0.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记_Activity</title>
    <link href="http://rootreturn0.github.io/2019/10/18/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Activity/"/>
    <id>http://rootreturn0.github.io/2019/10/18/Android学习笔记-Activity/</id>
    <published>2019-10-18T14:07:48.000Z</published>
    <updated>2019-10-19T05:49:13.732Z</updated>
    
    <content type="html"><![CDATA[<p>笔记基于<a href="https://me.csdn.net/sinyu890807" target="_blank" rel="noopener">郭霖大神</a>所著的<a href="https://blog.csdn.net/guolin_blog/article/details/52032038" target="_blank" rel="noopener">《第一行代码》第二版</a>之第2章。</p><p>其中：</p><ul><li>使用的IDE：Android Studio</li><li>示例项目名：ActivityTest</li><li>包名：“com.example.avtivitytest”</li></ul><a id="more"></a><h2 id="手动创建活动"><a href="#手动创建活动" class="headerlink" title="手动创建活动"></a>手动创建活动</h2><p><em>新建项目时选择<code>Add No Activity</code></em></p><center><img src="//rootreturn0.github.io/2019/10/18/Android学习笔记-Activity/初始项目结构.png" width="400" hegiht="600" align="center"><p>初始文件结构</p></center><p>右击<code>com.example.activitytest</code>包-&gt;<code>New</code>-&gt;<code>Activity</code>-&gt;<code>Empty Activity</code>，会弹出对话框，其中 Generate LayoutFile 会在<code>app/src/main/res</code>目录中为该活动自动生成对应的 layout 的 xml 文件；Launcher Activity 会将该活动设置为程序运行时首先加载的活动，即当前项目的主活动。</p><h2 id="创建和加载布局"><a href="#创建和加载布局" class="headerlink" title="创建和加载布局"></a>创建和加载布局</h2><p>右击<code>app/src/main/res</code>目录-&gt;<code>New</code>-&gt;<code>Directory</code>，可创建一个名为 layout 的目录，而后右击该目录，即可新建布局文件。</p><h3 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span> // 定义<span class="attr">id</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> // 表示和父元素一样宽</span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> // 表示当前元素的高度恰好包含里面内容</span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button_1"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.activitytest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 本行将layout的id传入，为当前活动加载布局</span></span><br><span class="line">        setContentView(R.layout.thirt_layout); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在AndroidManifest文件注册"><a href="#在AndroidManifest文件注册" class="headerlink" title="在AndroidManifest文件注册"></a>在AndroidManifest文件注册</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.activitytest"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span> // 指定注册活动 </span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"This is FirstActivity"</span> &gt;</span> // 指定活动标题栏内容</span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            // 以下两行将活动配置为主活动</span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Toast及按钮响应"><a href="#Toast及按钮响应" class="headerlink" title="Toast及按钮响应"></a>Toast及按钮响应</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">    Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(FirstActivity.<span class="keyword">this</span>, <span class="string">"You clicked Button_1!"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 findViewById() 方法获取到布局文件中定义的元素，这里传入 R.id.button_1 来得到按钮的实例，而后注册监听器。</p><p>Toast 中 makeText 有三个参数，第一个是 Context（活动是一种上下文），第二个参数是 Toast 显示的文本内容，第三个是持续时长。注意，只有加上后面的 .show() ，Toast 才会显示。</p><h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><p>使用 Android 提供的方式创建菜单。菜单通过应用右上角的三个点的小按钮，以列表形式显示。</p><h4 id="创建菜单"><a href="#创建菜单" class="headerlink" title="创建菜单"></a>创建菜单</h4><p>右击<code>app/src/main/res</code>目录-&gt;<code>New</code>-&gt;<code>Directory</code>，创建名为 menu 的文件夹，并在文件夹下创建一个名为 main 的菜单文件（右击<code>menu</code>-&gt;<code>New</code>-&gt;<code>Menu resource file</code>）。</p><p>在<code>main.xml</code>添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/add_item"</span>// 标识符</span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Add"</span> // 名称</span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/remove_item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Remove"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>item</code>标签用来创建具体的菜单项。</p><p>而后在<code>FirstActivity</code>中重写函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span></span>&#123;</span><br><span class="line"><span class="comment">// 第一个参数为资源文件，第二个指定添加到的Menu对象</span></span><br><span class="line">    getMenuInflater().inflate(R.menu.main, menu); </span><br><span class="line">    <span class="comment">// 表示是否允许显示菜单</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="菜单响应"><a href="#菜单响应" class="headerlink" title="菜单响应"></a>菜单响应</h4><p>在<code>FirstActivity</code>中重写函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断点击的菜单项</span></span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId())&#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.add_item:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>,<span class="string">"You clicked Add"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.remove_item:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>,<span class="string">"You clicked Remove"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="销毁活动"><a href="#销毁活动" class="headerlink" title="销毁活动"></a>销毁活动</h3><p>在模拟器中按下 Back 键，或调用<code>finish()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">    Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            finish()            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Intent切换活动"><a href="#使用Intent切换活动" class="headerlink" title="使用Intent切换活动"></a>使用Intent切换活动</h2><h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><p>创建第二个活动，名为 SecondActivity。</p><p>修改<code>FirstActivity</code>中的按钮点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">    Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入 FirstActivity.this 作为上下文，SecondActivity.class为目标活动</span></span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><p>通过<code>AndroidManifest.xml</code>中的<code>activity</code>标签下配置<code>&lt;intent-filter&gt;</code>内容，可以指定当前活动能够响应的 action 和 category。只有<code>&lt;action&gt;</code>和<code>&lt;category&gt;</code>中的内容能够同时匹配 Intent 指定的内容时，活动才能响应。</p><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.activitytest.ACTION_START"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改<code>FirstActivity</code>中的按钮点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">    Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.activitytest.ACTION_START"</span>);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加Category"><a href="#增加Category" class="headerlink" title="增加Category"></a>增加Category</h4><p>在<code>AndroidManifest</code>中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.activitytest.ACTION_START"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        // 不添加下行代码将导致程序崩溃</span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.activitytest.MY_CATEGORY"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改<code>FirstActivity</code>中的按钮点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">    Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.activitytest.ACTION_START"</span>);</span><br><span class="line">            intent.addCategory(<span class="string">"com.example.activitytest.MY_CATEGORY"</span>);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他Intent用法"><a href="#其他Intent用法" class="headerlink" title="其他Intent用法"></a>其他Intent用法</h3><h4 id="启动其他应用程序"><a href="#启动其他应用程序" class="headerlink" title="启动其他应用程序"></a>启动其他应用程序</h4><p>修改<code>FirstActivity</code>中的按钮点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">    Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">            <span class="comment">// 注意：“http://” 不能省略</span></span><br><span class="line">            intent.setData(Uri.parse(<span class="string">"http://ww.baidu.com"</span>));</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时点击按钮可跳转至浏览器打开 “<a href="http://www.baidu.com&quot;。" target="_blank" rel="noopener">www.baidu.com&quot;。</a></p><p>在<code>AndroidManifest</code>中的<code>&lt;intent-filter&gt;</code>标签配置<code>&lt;data&gt;</code>标签，可指定活动能够响应的类型数据。<code>&lt;data&gt;</code>标签主要可配置以下内容：</p><ul><li>android:scheme 协议，如 http</li><li>android:host 主机名</li><li>android:port 端口</li><li>android:path 以上之后的部分</li><li>android:mimeType 可处理的数据类型</li></ul><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".ThirdActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前活动能够响应的 action 是 Intent.ACTION_VIEW 的常量值，数据协议必须是 http。在点击按钮后，该活动也能响应Intent：</p><center><img src="//rootreturn0.github.io/2019/10/18/Android学习笔记-Activity/选择响应Intent的程序.png" width="400" hegiht="600" align="center"><p>选择响应Intent的程序</p></center><p><strong>从用户体验的角度来看，如果活动本身不具备加载并显示的网页的功能，千万不要这么用啊！！！</strong></p><p>除 http 协议外，还有许多 Uri 协议，常用的 Uri 协议见 <a href="https://blog.csdn.net/sinat_38239454/article/details/78937999" target="_blank" rel="noopener">&lt;&lt;Android 常用URI 值得记住&gt;&gt;</a>。</p><h3 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h3><p>Intent 中提供了一系列 <code>putExtra()</code> 方法的重载，可以将想要传递的数据暂存在 Intent 中。当启动另一个 Intent 后，只需要把这些数据再从 Intent 中取出即可。</p><h4 id="向下一个活动传递数据"><a href="#向下一个活动传递数据" class="headerlink" title="向下一个活动传递数据"></a>向下一个活动传递数据</h4><p>假设 FirstActivity 中有一个字符串，现在想把这个字符串传递到 SecondActivity 中，可以这样编写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String data = <span class="string">"Hello SecondActivity"</span>;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">        <span class="comment">// 第一个参数是键，用于之后取值；第二个参数为要传递的数据</span></span><br><span class="line">        intent.putExtra(<span class="string">"extra_data"</span>,data);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>SecondActivity 中接收代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        <span class="comment">// 获取用于启动 SecondActivity 的Intent</span></span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * getStringExtra() 获取字符串数据；</span></span><br><span class="line"><span class="comment">         * 如果是整型数据则用 getIntExtra()；</span></span><br><span class="line"><span class="comment">         * 如果是布尔数据则用 getBooleanExtra()；</span></span><br><span class="line"><span class="comment">         * 以此类推。</span></span><br><span class="line"><span class="comment">         * /</span></span><br><span class="line"><span class="comment">        String data = intent.getStringExtra("extra_data");</span></span><br><span class="line"><span class="comment">        Log.d("SecondActivity",data);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h4><p>Activity 中还有一个<code>startActivityForResult()</code>方法也可以启动活动。顾名思义，这个方法期望在活动销毁时能过返回结果给上一个活动。要想返回数据，则需要使用这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">        intent.putExtra(<span class="string">"extra_data"</span>,data);</span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 第一个参数是intent；</span></span><br><span class="line"><span class="comment">         * 第二个参数是请求码，用于在之后的回调中判断数据的来源，</span></span><br><span class="line"><span class="comment">         * 请求码只要是一个唯一值就行。</span></span><br><span class="line"><span class="comment">         * /</span></span><br><span class="line"><span class="comment">        startActivityForResult(intent, 1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记基于&lt;a href=&quot;https://me.csdn.net/sinyu890807&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;郭霖大神&lt;/a&gt;所著的&lt;a href=&quot;https://blog.csdn.net/guolin_blog/article/details/52032038&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《第一行代码》第二版&lt;/a&gt;之第2章。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用的IDE：Android Studio&lt;/li&gt;
&lt;li&gt;示例项目名：ActivityTest&lt;/li&gt;
&lt;li&gt;包名：“com.example.avtivitytest”&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://rootreturn0.github.io/categories/Android/"/>
    
    
      <category term="学习" scheme="http://rootreturn0.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Haydn</title>
    <link href="http://rootreturn0.github.io/2019/10/08/Haydn/"/>
    <id>http://rootreturn0.github.io/2019/10/08/Haydn/</id>
    <published>2019-10-07T18:12:49.000Z</published>
    <updated>2019-10-18T17:10:41.363Z</updated>
    
    <content type="html"><![CDATA[<p>有时并非欢快地跳跃着的。</p><p>但却依旧舒缓人疲惫的心灵。</p><p>非山河壮阔，</p><p>非人间星火，</p><p>非天外飞仙。</p><p>而是流淌在春天的生死明灭。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时并非欢快地跳跃着的。&lt;/p&gt;
&lt;p&gt;但却依旧舒缓人疲惫的心灵。&lt;/p&gt;
&lt;p&gt;非山河壮阔，&lt;/p&gt;
&lt;p&gt;非人间星火，&lt;/p&gt;
&lt;p&gt;非天外飞仙。&lt;/p&gt;
&lt;p&gt;而是流淌在春天的生死明灭。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Me" scheme="http://rootreturn0.github.io/categories/Me/"/>
    
    
      <category term="随笔" scheme="http://rootreturn0.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>H</title>
    <link href="http://rootreturn0.github.io/2019/10/07/H/"/>
    <id>http://rootreturn0.github.io/2019/10/07/H/</id>
    <published>2019-10-07T09:33:27.000Z</published>
    <updated>2019-10-18T17:56:40.503Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码。" />    <label for="pass">请输入密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      A normal dream
    
    </summary>
    
      <category term="Me" scheme="http://rootreturn0.github.io/categories/Me/"/>
    
    
      <category term="随笔" scheme="http://rootreturn0.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>R</title>
    <link href="http://rootreturn0.github.io/2019/10/07/C/"/>
    <id>http://rootreturn0.github.io/2019/10/07/C/</id>
    <published>2019-10-07T09:28:19.000Z</published>
    <updated>2019-10-18T17:10:32.520Z</updated>
    
    <content type="html"><![CDATA[<p>在曾经最低谷的时候（极小值），</p><p>她激励了我；</p><p>在现在最底谷的时候（极小值），</p><p>她安慰了我。</p><br><p>果然是我生命中重要的一个人（笑</p><br><p><strong><em>CAUSE AND CONSEQUENCE</em></strong></p>]]></content>
    
    <summary type="html">
    
      Important one.
    
    </summary>
    
      <category term="Me" scheme="http://rootreturn0.github.io/categories/Me/"/>
    
    
      <category term="随笔" scheme="http://rootreturn0.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>知足常乐</title>
    <link href="http://rootreturn0.github.io/2019/10/07/About%20Alessa0/"/>
    <id>http://rootreturn0.github.io/2019/10/07/About Alessa0/</id>
    <published>2019-10-06T17:42:10.000Z</published>
    <updated>2019-10-18T17:16:31.144Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="English & You" />    <label for="pass">English & You</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Compare
    
    </summary>
    
      <category term="Me" scheme="http://rootreturn0.github.io/categories/Me/"/>
    
    
      <category term="随笔" scheme="http://rootreturn0.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Soul-like</title>
    <link href="http://rootreturn0.github.io/2019/10/06/soul-like/"/>
    <id>http://rootreturn0.github.io/2019/10/06/soul-like/</id>
    <published>2019-10-05T16:24:23.000Z</published>
    <updated>2019-10-18T17:09:49.729Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码。" />    <label for="pass">请输入密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+hgZPGqfUKjqswgt/i6sKxoXd/W5Pla869+N2xQP02ENuUfQqP8OqXL2xfR79Cl9pSgWPs+XVgX3rys+RAvUsM86YA8kZapq4FeSAk/qYV4uzT+7URUZ17Mg9iWj98RlQnl8+XnzzyKitJBAfc8OZ1odGVNfdlRxBMG0iNf0ELR+si03+w59OXXSNIcb9uBs7b2yvMBl9jsY1qegb6vidhLFDc2z0AaAcgZmqOslKbs+/VFd8CN1cL5hHDLA1LE0FI4PooDdDmjWL0RrhPzEtne2zozEO7wUcczWdPCpWyleLnQxO34rMOI4NfxUcTRcAH9+CwcQDZNkR+ZGS0PAIvT4ntj6EFQj9PLLUGl5QNScrL/60T8VBsRbadFLTeJ1I518Mij5OA0BSeEVKHNZher17gmngCSjFO4vLsXLl3kfg3UGukH4odky/rNeKDJeiBTmSaKxQp7DEgRnKjzDaAIKHMBIt/K9buhvgv1siMlzcx0GylOHc0XLNgDmYaLIGbReys9Z2JmO5ELLUVyF9mKAQ0S++soMg4QTX4o5diDBRJvC4Ae5rl9/jaAZ1/2EwL5CdUatf0iIAfwLSt/e15s5/TobmRtSgrj/037pgqI6cuJTGGIqL8Xc8u/znt3ag4cBpPszsdAqQNlFlRZjJ+6HjtuZ3dpKiBmx+9geKHH+NfLxP6qUMnR0LoEJwGfoYMzb92gRKZpQ==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Ashen one
    
    </summary>
    
      <category term="Me" scheme="http://rootreturn0.github.io/categories/Me/"/>
    
    
      <category term="随笔" scheme="http://rootreturn0.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>xv6-调度</title>
    <link href="http://rootreturn0.github.io/2019/08/31/xv6-%E8%B0%83%E5%BA%A6/"/>
    <id>http://rootreturn0.github.io/2019/08/31/xv6-调度/</id>
    <published>2019-08-31T10:50:22.000Z</published>
    <updated>2019-10-18T17:14:32.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><p>由于可能同时有多个CPU请求进行调度，故需要进程表锁<code>ptable.lock</code>来避免竞争。</p><p>因此，进程在让出CPU前，必须要获得进程表锁，并释放其拥有的其他锁（避免同时持有多个锁导致死锁），修改自己的状态<code>proc-&gt;state</code>，然后进行调度。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>以下函数位于代码文件<code>proc.c</code>中。</p><h4 id="sched"><a href="#sched" class="headerlink" title="sched"></a>sched</h4><p>进程进入调度器，且必须持有进程表锁并改变进程状态。由于进程此时持有进程表锁，所以CPU应该是在关中断的情况下运行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">sched(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> intena;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> = <span class="title">myproc</span>();</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未持有进程表锁，不应进入调度，引发内核错误</span></span><br><span class="line">  <span class="keyword">if</span>(!holding(&amp;ptable.lock))</span><br><span class="line">    panic(<span class="string">"sched ptable.lock"</span>);</span><br><span class="line">  <span class="comment">// 处于锁状态，不应进入调度，引发内核错误</span></span><br><span class="line">  <span class="keyword">if</span>(mycpu()-&gt;ncli != <span class="number">1</span>)</span><br><span class="line">    panic(<span class="string">"sched locks"</span>);</span><br><span class="line">  <span class="comment">// 进程处于运行态，不应进入调度，引发内核错误</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;state == RUNNING)</span><br><span class="line">    panic(<span class="string">"sched running"</span>);</span><br><span class="line">  <span class="comment">// 开中断，不可执行mycpu()函数，不应进入调度，引发内核错误</span></span><br><span class="line">  <span class="keyword">if</span>(readeflags()&amp;FL_IF)</span><br><span class="line">    panic(<span class="string">"sched interruptible"</span>);</span><br><span class="line">  intena = mycpu()-&gt;intena; <span class="comment">// 暂存状态</span></span><br><span class="line">  swtch(&amp;p-&gt;context, mycpu()-&gt;scheduler); <span class="comment">// 保存当前上下文，并切换到之前保存的调度器的上下文，进入调度器</span></span><br><span class="line">  mycpu()-&gt;intena = intena; <span class="comment">// 恢复状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>在xv6中，使用时间片轮转法进行调度。当进程用完它的CPU时间片时，时钟中断会调用<code>yield</code>函数来让出CPU给新的进程，<code>yield</code>调用<code>sched</code>函数，<code>sched</code>调用<code>swtch</code>来切换都调度器线程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">yield(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  acquire(&amp;ptable.lock);  <span class="comment">//DOC: yieldlock 请求进程表锁</span></span><br><span class="line">  myproc()-&gt;state = RUNNABLE; <span class="comment">// 切换进程状态</span></span><br><span class="line">  sched(); </span><br><span class="line">  release(&amp;ptable.lock); <span class="comment">// 释放进程表锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scheduler"><a href="#scheduler" class="headerlink" title="scheduler"></a>scheduler</h4><p>每个CPU在设置完成自己之后调用<code>scheduler</code>。</p><p>调度器<code>scheduler</code>永远不会返回，而是不断循环。循环步骤为：</p><ol><li>选择要运行的流程</li><li>swtch开始运行该过程</li><li>最终该过程通过swtch将控制转移回调度程序。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">scheduler(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cpu</span> *<span class="title">c</span> = <span class="title">mycpu</span>();</span></span><br><span class="line">  c-&gt;proc = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不断循环，永不停止</span></span><br><span class="line">  <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="comment">// 开中断，以允许I/O到达</span></span><br><span class="line">    sti();  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在进程表上不断循环，寻找进程并运行</span></span><br><span class="line">    acquire(&amp;ptable.lock); <span class="comment">// 请求进程表锁</span></span><br><span class="line">    <span class="keyword">for</span>(p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;state != RUNNABLE) <span class="comment">// 进程不可运行，转到下一个进程</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Switch to chosen process.  It is the process's job</span></span><br><span class="line">      <span class="comment">// to release ptable.lock and then reacquire it</span></span><br><span class="line">      <span class="comment">// before jumping back to us.</span></span><br><span class="line">      <span class="comment">// 切换到选定的进程</span></span><br><span class="line">      c-&gt;proc = p;</span><br><span class="line">      switchuvm(p); <span class="comment">// 切换到该进程的页表</span></span><br><span class="line">      p-&gt;state = RUNNING;</span><br><span class="line"></span><br><span class="line">      swtch(&amp;(c-&gt;scheduler), p-&gt;context); <span class="comment">// 切换到该进程运行</span></span><br><span class="line">      switchkvm(); <span class="comment">// 当没有进程正在运行时，将页表寄存器切换到仅内核页表。</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Process is done running for now.</span></span><br><span class="line">      <span class="comment">// It should have changed its p-&gt;state before coming back.</span></span><br><span class="line">      <span class="comment">// 进程已结束运行，改变自身状态</span></span><br><span class="line">      c-&gt;proc = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    release(&amp;ptable.lock); <span class="comment">// 释放进程表锁，防止其他CPU无法进行调度</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁与中断"><a href="#锁与中断" class="headerlink" title="锁与中断"></a>锁与中断</h3><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><ul><li>为保证进程状态的上下文在运行<code>swtch</code>时保持不变：进程表锁由旧进程获得，新进程释放。</li><li>为防止其他CPU闲置时锁被当前CPU占有而无法调度，其他CPU上运行进程无法让出CPU，导致死锁的情况：在遍历一次进程表后总要释放锁。</li></ul><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><ul><li>为防止所有进程都在等待I/O时关中断导致的I/O无法到达引发的死锁，调度器在每次循坏开始前进行开中断。</li></ul><h2 id="睡眠与唤醒"><a href="#睡眠与唤醒" class="headerlink" title="睡眠与唤醒"></a>睡眠与唤醒</h2><p>函数<code>sleep</code>和<code>wakeup</code>位于代码文件<code>proc.c</code>中。</p><p>使进程进入睡眠或进行唤醒均需要改变进程状态，故需要进程表锁以保证状态修改的原子性。其中函数<code>sleep</code>要在使进程进入睡眠前获取进程表锁，以保证在使函数进入睡眠时至少持有一个锁，防止<code>wakeup</code>在进程进入睡眠前被调用导致的死锁。当<code>sleep</code>本身持有的锁为进程表锁时，则略过请求这一步，防止死锁。</p><h2 id="可改进之处"><a href="#可改进之处" class="headerlink" title="可改进之处"></a>可改进之处</h2><h3 id="调度-1"><a href="#调度-1" class="headerlink" title="调度"></a>调度</h3><ul><li>轮转法无优先级的区分</li></ul><p>会导致高优先级的进程无法优先运行，可能导致系统运行时间的增加，影响使用者在实际使用时的体验。可使用其他较为复杂的算法，如高响应比优先算法等以改进体验。</p><h3 id="睡眠与唤醒-1"><a href="#睡眠与唤醒-1" class="headerlink" title="睡眠与唤醒"></a>睡眠与唤醒</h3><ul><li>唤醒需要遍历进程表</li></ul><p>在进程数量大的时候这种做法效率极低。使用另一个结构体来维护链表可大大提高效率。</p><ul><li>唤醒时会唤醒队列中全部进程</li></ul><p>大多数情况下，同一时间需要唤醒的进程在队列中是少数部分，许多仍需等待的进程将会被“莫名其妙”地唤醒并再度检查状态重新进入睡眠，导致操作系统需要处理许多新的不必要的任务。</p><p>唤醒时应分为个体唤醒（唤醒单个进程）和群体唤醒（唤醒所有进程），减少系统负担。</p>]]></content>
    
    <summary type="html">
    
      xv6操作系统之调度源码阅读与分析
    
    </summary>
    
      <category term="操作系统" scheme="http://rootreturn0.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="http://rootreturn0.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>xv6-管道</title>
    <link href="http://rootreturn0.github.io/2019/08/31/xv6-%E7%AE%A1%E9%81%93/"/>
    <id>http://rootreturn0.github.io/2019/08/31/xv6-管道/</id>
    <published>2019-08-31T00:29:38.000Z</published>
    <updated>2019-10-18T17:14:24.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>从管道的一端写入数据字节，然后数据被拷贝到内核缓冲区中，接着进程就能从管道的另一端读取数据了。</p><p>在xv6中，管道使用被读取字节数<code>nread</code>和被写入字节数<code>nwrite</code>的差值判断管道状态：</p><ul><li>nwrite == nread 则数据未写入或被读取完毕，管道空</li><li>nwrite == nread + PIPESIZE 则管道满</li></ul><p>由于管道的读取与写入均需要使用<code>nread</code>和<code>nwrite</code>以获悉管道状态，故这两个计数参数不能在某一函数（写入/读取）清零，否则将影响另一函数（读取/写入）的执行。因此，xv6中使用<code>data[nread % PIPESIZE]</code>和<code>data[nwrite % PIPESIZE]</code>来控制读写时的管道数据偏移，即循环写/读，在<code>data[PIPESIZE-1]</code>后写入的数据存放在<code>data[0]</code>中。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">spinlock</span> <span class="title">lock</span>;</span> <span class="comment">// 锁</span></span><br><span class="line">  <span class="keyword">char</span> data[PIPESIZE]; <span class="comment">// 管道数据</span></span><br><span class="line">  uint nread;     <span class="comment">// 被读取字节数，从缓冲区中读取</span></span><br><span class="line">  uint nwrite;    <span class="comment">// 被写入字节数，写入缓冲区</span></span><br><span class="line">  <span class="keyword">int</span> readopen;   <span class="comment">// 读文件描述符是否依旧处于open状态</span></span><br><span class="line">  <span class="keyword">int</span> writeopen;  <span class="comment">// 写文件描述符是否依旧处于open状态</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="管道函数"><a href="#管道函数" class="headerlink" title="管道函数"></a>管道函数</h3><p>以下分析管道读写函数，其他函数仅列出函数作用，详细注释见代码文件<code>pipe.c</code>。</p><h4 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h4><p>管道读写操作通过管道锁实现互斥，操作运行时必须持有管道锁。</p><p>管道数据写入时首先获取管道锁而后写入数据，若达到管道容量上限，则写操作唤醒读操作后进入睡眠等待并释放管道锁。此时读操作可获得请求的管道锁，在读取完数据后管道变空，则读操作唤醒写操作后进入睡眠等待并释放管道锁。而后管道写操作再次获得管道锁，循环往复直至数据传输完毕，其中最后一次传输可能未写满管道。</p><p>当使用管道的操作被杀后，管道读写操作都将终止；当管道不可读时，管道写操作将被终止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管道写</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">pipewrite(struct pipe *p, <span class="keyword">char</span> *addr, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  acquire(&amp;p-&gt;lock); <span class="comment">// 请求获得管道锁，以保护计数器、数据以及相关不变量</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;nwrite == p-&gt;nread + PIPESIZE)&#123;  <span class="comment">// 管道满</span></span><br><span class="line">      <span class="comment">// 如果管道文件不可读或进程被杀，释放管道锁并终止管道写操作</span></span><br><span class="line">      <span class="keyword">if</span>(p-&gt;readopen == <span class="number">0</span> || myproc()-&gt;killed)&#123;</span><br><span class="line">        release(&amp;p-&gt;lock);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      wakeup(&amp;p-&gt;nread); <span class="comment">// 通知睡眠中的读者缓冲区中有数据可读</span></span><br><span class="line">      sleep(&amp;p-&gt;nwrite, &amp;p-&gt;lock);  <span class="comment">// 管道写操作进入睡眠等待（睡眠时将释放管道锁）</span></span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;data[p-&gt;nwrite++ % PIPESIZE] = addr[i]; <span class="comment">// 将所需读取的块内数据赋值给管道数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  wakeup(&amp;p-&gt;nread);  <span class="comment">// 通知睡眠中的读者缓冲区中有数据可读</span></span><br><span class="line">  release(&amp;p-&gt;lock); <span class="comment">// 释放管道锁</span></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管道读</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">piperead(struct pipe *p, <span class="keyword">char</span> *addr, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  acquire(&amp;p-&gt;lock); <span class="comment">// 请求获得管道锁，以保护计数器、数据以及相关不变量</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;nread == p-&gt;nwrite &amp;&amp; p-&gt;writeopen)&#123;  <span class="comment">//DOC: 管道为空且管道可写，则管道读操作可进入睡眠</span></span><br><span class="line">    <span class="comment">// 进程被杀，释放管道锁，终止管道读操作</span></span><br><span class="line">    <span class="keyword">if</span>(myproc()-&gt;killed)&#123;</span><br><span class="line">      release(&amp;p-&gt;lock);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(&amp;p-&gt;nread, &amp;p-&gt;lock); <span class="comment">//DOC: piperead-sleep 管道读操作进入睡眠等待（睡眠时将释放管道锁）</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;  <span class="comment">// 拷贝数据</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;nread == p-&gt;nwrite) <span class="comment">// 读取字节数等于写入字节数，表示读取完成</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    addr[i] = p-&gt;data[p-&gt;nread++ % PIPESIZE]; <span class="comment">// 将所需读取的管道数据赋值给块内数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  wakeup(&amp;p-&gt;nwrite);  <span class="comment">// 通知睡眠中的写者缓冲区中可写</span></span><br><span class="line">  release(&amp;p-&gt;lock);</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>pipealloc 管道分配，并初始化管道。</li><li>pipeclose 管道关闭。若读写两方均关闭，则释放内存；否则关闭管道一端并唤醒另一方。当关闭写端时，仍可进行读操作，但将管道内剩余数据读完后，再次进行读操作便返回0，相当于读到文件末尾；当关闭读段时，写操作会在进行过程中中断。</li></ul>]]></content>
    
    <summary type="html">
    
      xv6操作系统之管道源码阅读与分析
    
    </summary>
    
      <category term="操作系统" scheme="http://rootreturn0.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="http://rootreturn0.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>xv6-文件系统</title>
    <link href="http://rootreturn0.github.io/2019/08/31/xv6-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://rootreturn0.github.io/2019/08/31/xv6-文件系统/</id>
    <published>2019-08-30T17:47:50.000Z</published>
    <updated>2019-10-18T17:14:13.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件系统总体设计"><a href="#文件系统总体设计" class="headerlink" title="文件系统总体设计"></a>文件系统总体设计</h2><h3 id="文件系统分层"><a href="#文件系统分层" class="headerlink" title="文件系统分层"></a>文件系统分层</h3><p><img src="https://th0ar.gitbooks.io/xv6-chinese/content/pic/f6-1.png" alt="文件系统层"></p><p>如图所示xv6的文件系统分6层实现：</p><ol><li>第一层（自下而上）通过块缓冲读写 IDE 硬盘，同步对磁盘的访问，且通过块的锁保证同一时间只有一个内核进程可以修改磁盘块；  </li><li>第二层使得更高层的接口可以将对磁盘的更新按会话打包，通过会话的方式来保证这些操作是原子操作。</li><li>第三层提供无名文件，每一个文件由一个inode和一连串的数据块组成。</li><li>第四层将目录实现为一种特殊的inode，内容是一连串的目录项，每一个目录项包含一个文件名和对应的inode。</li><li>第五层提供了层次路经名（如/xx/xxx），这一层通过递归的方式来查询路径对应的文件。</li><li>第六层将许多资源（如管道，设备，文件等）抽象为文件系统的接口，极大地简化了程序员的工作。</li></ol><h3 id="磁盘分层"><a href="#磁盘分层" class="headerlink" title="磁盘分层"></a>磁盘分层</h3><p>磁盘分层为引导块、超级块、日志块、inode块、空闲块位图和数据块等。  </p><p>文件系统不使用引导块；超级块包含了文件系统的元信息；日志块中的日志维护了文件系统操作的原子性，防止操作过程中引发的系统崩溃而导致的数据不同步；inode块用于存放inode（一个块可存放多个inode）；空闲块位图便于查找空闲的块；数据块中保存了文件和目录等内容。</p><h2 id="块缓冲层"><a href="#块缓冲层" class="headerlink" title="块缓冲层"></a>块缓冲层</h2><h3 id="需要实现的目标"><a href="#需要实现的目标" class="headerlink" title="需要实现的目标"></a>需要实现的目标</h3><ol><li>同步对磁盘的访问。对于任意一个块，同一时间仅有一份拷贝放在内存中且只允许一个内核线程对该拷贝进行修改。</li><li>缓存常用的块以减少磁盘读取次数，提高系统效率。</li></ol><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>代码参见<code>bio.c</code>。</p><p>根据时间与空间局部性原理，将最近经常访问的磁盘块缓存在内存中，并使用LRU替换策略。</p><h4 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h4><p>xv6将缓冲区分为两种状态：</p><ol><li>B_VALID 意味着这个缓冲区拥有磁盘块的有效内容；</li><li>B_DIRTY 意味着缓冲区的内容已经被改变并且需要写回磁盘；</li></ol><p>与旧版相比，B_BUSY 状态在最新版代码中被删去。但由于缓存区中的块的锁的存在，只有持有锁才能访问该块，而在另一线程未使用完成前，该锁不会被释放，此时只能循环等待锁的释放，获得锁后方可获得块。故依旧可保持块内容的原子性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内存中的磁盘块结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buf</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> flags; <span class="comment">// 标记磁盘状态，valid/dirty</span></span><br><span class="line">  uint dev; <span class="comment">// 磁盘设备号</span></span><br><span class="line">  uint blockno; <span class="comment">// 块编号</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sleeplock</span> <span class="title">lock</span>;</span></span><br><span class="line">  uint refcnt; <span class="comment">// 引用计数</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">prev</span>;</span> <span class="comment">// LRU cache list 使用LRU替换</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">next</span>;</span> <span class="comment">// 链式结构连接磁盘块</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">qnext</span>;</span> <span class="comment">// 磁盘队列</span></span><br><span class="line">  uchar data[BSIZE]; <span class="comment">// 块大小为512字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块缓冲区结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">spinlock</span> <span class="title">lock</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> <span class="title">buf</span>[<span class="title">NBUF</span>];</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 prev/next 连接所有缓冲块</span></span><br><span class="line">  <span class="comment">// 其中 head.next 是最近最常使用的块.</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> <span class="title">head</span>;</span></span><br><span class="line">&#125; bcache;</span><br></pre></td></tr></table></figure><h4 id="初始化-binit"><a href="#初始化-binit" class="headerlink" title="初始化 binit"></a>初始化 binit</h4><p>从一个静态数组<code>buf</code>中构建出一个有<code>NBUF</code>个元素的双向链表。所有对块缓冲的访问都通过链表而非静态数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">binit(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">b</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化块缓冲锁</span></span><br><span class="line">  initlock(&amp;bcache.lock, <span class="string">"bcache"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//PAGEBREAK!</span></span><br><span class="line">  <span class="comment">// 构建缓冲双向链表</span></span><br><span class="line">  bcache.head.prev = &amp;bcache.head;</span><br><span class="line">  bcache.head.next = &amp;bcache.head;</span><br><span class="line">  <span class="keyword">for</span>(b = bcache.buf; b &lt; bcache.buf+NBUF; b++)&#123;</span><br><span class="line">    b-&gt;next = bcache.head.next;</span><br><span class="line">    b-&gt;prev = &amp;bcache.head;</span><br><span class="line">    <span class="comment">// 初始化缓冲区中的块的锁</span></span><br><span class="line">    initsleeplock(&amp;b-&gt;lock, <span class="string">"buffer"</span>);</span><br><span class="line">    bcache.head.next-&gt;prev = b;</span><br><span class="line">    bcache.head.next = b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找-bget"><a href="#查找-bget" class="headerlink" title="查找 bget"></a>查找 bget</h4><p>扫描缓冲区链表，通过给定的设备号和扇区号找到对应的缓冲区。如果未找到，则分配一个缓冲区，否则返回一个持有锁的缓冲区。代码中在双向链表的搜索中向最近最常使用方向查找，若未找到则向另一方向查找空闲缓冲区以分配。</p><p>其中若找到缓冲区中指定的块，返回的结果也不一定是指定的块。因为在请求该块的锁前已释放缓冲区锁，若该块未持有锁且正在被用来缓冲另外一个块，则重新获得锁时已是另一个块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">buf</span>*</span></span><br><span class="line"><span class="class"><span class="title">bget</span>(<span class="title">uint</span> <span class="title">dev</span>, <span class="title">uint</span> <span class="title">blockno</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">b</span>;</span></span><br><span class="line"></span><br><span class="line">  acquire(&amp;bcache.lock); <span class="comment">// 请求块缓冲区锁</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能保证 b 仍然是可用的缓冲区：它有可能被用来缓冲另外一个块。</span></span><br><span class="line">  <span class="keyword">for</span>(b = bcache.head.next; b != &amp;bcache.head; b = b-&gt;next)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b-&gt;dev == dev &amp;&amp; b-&gt;blockno == blockno)&#123;</span><br><span class="line">      b-&gt;refcnt++; <span class="comment">// 引用计数加一</span></span><br><span class="line">      release(&amp;bcache.lock); <span class="comment">// 释放块缓冲区锁</span></span><br><span class="line">      acquiresleep(&amp;b-&gt;lock); <span class="comment">// 请求该块的锁</span></span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Not cached; recycle an unused buffer. 未找到则重新查找</span></span><br><span class="line">  <span class="comment">// Even if refcnt==0, B_DIRTY indicates a buffer is in use</span></span><br><span class="line">  <span class="comment">// because log.c has modified it but not yet committed it.</span></span><br><span class="line">  <span class="comment">// 即使refcnt等于0，也可通过B_DIRTY知道缓冲区被使用，此时日志已修改但未提交 </span></span><br><span class="line">  <span class="keyword">for</span>(b = bcache.head.prev; b != &amp;bcache.head; b = b-&gt;prev)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b-&gt;refcnt == <span class="number">0</span> &amp;&amp; (b-&gt;flags &amp; B_DIRTY) == <span class="number">0</span>) &#123;</span><br><span class="line">      b-&gt;dev = dev;</span><br><span class="line">      b-&gt;blockno = blockno;</span><br><span class="line">      b-&gt;flags = <span class="number">0</span>;</span><br><span class="line">      b-&gt;refcnt = <span class="number">1</span>;</span><br><span class="line">      release(&amp;bcache.lock);</span><br><span class="line">      acquiresleep(&amp;b-&gt;lock);</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未找到块且未能分配块，引发内核错误</span></span><br><span class="line">  panic(<span class="string">"bget: no buffers"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读-bread"><a href="#读-bread" class="headerlink" title="读 bread"></a>读 bread</h4><p><code>bread</code>会首先调用<code>bget</code>从缓存中去寻找块是否存在。如果存在直接返回；如果不存在则请求磁盘读操作，读到缓存中后再返回结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buf</span>*</span></span><br><span class="line"><span class="class"><span class="title">bread</span>(<span class="title">uint</span> <span class="title">dev</span>, <span class="title">uint</span> <span class="title">blockno</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">b</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取缓冲区</span></span><br><span class="line">  b = bget(dev, blockno);</span><br><span class="line">  <span class="comment">// 如果缓冲区中不存在指定的块，则从磁盘中读出</span></span><br><span class="line">  <span class="keyword">if</span>((b-&gt;flags &amp; B_VALID) == <span class="number">0</span>) &#123;</span><br><span class="line">    iderw(b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写-bwrite"><a href="#写-bwrite" class="headerlink" title="写 bwrite"></a>写 bwrite</h4><p>设置 B_DIRTY 位并且调用 iderw 将缓冲区的内容写到磁盘。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">bwrite(struct buf *b)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 该块未锁，可能已被释放，无法写入，引发内核错误</span></span><br><span class="line">  <span class="keyword">if</span>(!holdingsleep(&amp;b-&gt;lock))</span><br><span class="line">    panic(<span class="string">"bwrite"</span>);</span><br><span class="line">  b-&gt;flags |= B_DIRTY;</span><br><span class="line">  iderw(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放-brelse"><a href="#释放-brelse" class="headerlink" title="释放 brelse"></a>释放 brelse</h4><p>将一块缓冲区移动到链表的头部，唤醒睡眠在这块缓冲区上的进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 唤醒睡眠在这块缓冲区上的进程；将一块缓冲区移动到链表的头部。</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">brelse(struct buf *b)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 缓冲区未持有块锁，引发内核错误</span></span><br><span class="line">  <span class="keyword">if</span>(!holdingsleep(&amp;b-&gt;lock))</span><br><span class="line">    panic(<span class="string">"brelse"</span>);</span><br><span class="line"></span><br><span class="line">  releasesleep(&amp;b-&gt;lock); <span class="comment">// 释放块锁</span></span><br><span class="line"></span><br><span class="line">  acquire(&amp;bcache.lock); <span class="comment">// 请求  缓冲区锁</span></span><br><span class="line">  b-&gt;refcnt--; <span class="comment">//引用计数减一</span></span><br><span class="line">  <span class="keyword">if</span> (b-&gt;refcnt == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 无进程等待使用，移动到链表头部</span></span><br><span class="line">    b-&gt;next-&gt;prev = b-&gt;prev;</span><br><span class="line">    b-&gt;prev-&gt;next = b-&gt;next;</span><br><span class="line">    b-&gt;next = bcache.head.next;</span><br><span class="line">    b-&gt;prev = &amp;bcache.head;</span><br><span class="line">    bcache.head.next-&gt;prev = b;</span><br><span class="line">    bcache.head.next = b;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  release(&amp;bcache.lock); <span class="comment">//释放缓冲区锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志层"><a href="#日志层" class="headerlink" title="日志层"></a>日志层</h3><p>每一个系统调用都可能包含一个必须从头到尾原子完成的写操作序列，称这样的一个序列为一个会话。任何时候只能有一个进程在一个会话之中，其他进程必须等待当前会话中的进程结束。因此同一时刻日志最多只记录一次会话。</p><p>该层用于维护系统崩溃后到原子性，即会话要么完成，要么系统恢复至会话开始前的状态。</p><h3 id="块分配器"><a href="#块分配器" class="headerlink" title="块分配器"></a>块分配器</h3><p>本部分涉及的函数位于<code>fs.c</code>。</p><p>由于<code>bread</code>与<code>brelse</code>已有锁进行互斥，块分配器无需再加锁。</p><h4 id="分配新的磁盘块"><a href="#分配新的磁盘块" class="headerlink" title="分配新的磁盘块"></a>分配新的磁盘块</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> uint</span><br><span class="line">balloc(uint dev)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> b, bi, m;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bp</span>;</span></span><br><span class="line"></span><br><span class="line">  bp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(b = <span class="number">0</span>; b &lt; sb.size; b += BPB)&#123; <span class="comment">// 读位图每一块</span></span><br><span class="line">    bp = bread(dev, BBLOCK(b, sb));</span><br><span class="line">    <span class="keyword">for</span>(bi = <span class="number">0</span>; bi &lt; BPB &amp;&amp; b + bi &lt; sb.size; bi++)&#123; <span class="comment">// 读块内每一位</span></span><br><span class="line">      m = <span class="number">1</span> &lt;&lt; (bi % <span class="number">8</span>);</span><br><span class="line">      <span class="keyword">if</span>((bp-&gt;data[bi/<span class="number">8</span>] &amp; m) == <span class="number">0</span>)&#123;  <span class="comment">// 判断块是否空闲</span></span><br><span class="line">        bp-&gt;data[bi/<span class="number">8</span>] |= m;  <span class="comment">// 将块标记为使用中</span></span><br><span class="line">        log_write(bp);</span><br><span class="line">        brelse(bp); <span class="comment">// 释放块</span></span><br><span class="line">        bzero(dev, b + bi); <span class="comment">// 清零块</span></span><br><span class="line">        <span class="keyword">return</span> b + bi;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    brelse(bp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 超出块范围，引发错误</span></span><br><span class="line">  panic(<span class="string">"balloc: out of blocks"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放磁盘块"><a href="#释放磁盘块" class="headerlink" title="释放磁盘块"></a>释放磁盘块</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">bfree(<span class="keyword">int</span> dev, uint b)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bp</span>;</span></span><br><span class="line">  <span class="keyword">int</span> bi, m;</span><br><span class="line"></span><br><span class="line">  readsb(dev, &amp;sb);</span><br><span class="line">  bp = bread(dev, BBLOCK(b, sb));</span><br><span class="line">  bi = b % BPB;</span><br><span class="line">  m = <span class="number">1</span> &lt;&lt; (bi % <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span>((bp-&gt;data[bi/<span class="number">8</span>] &amp; m) == <span class="number">0</span>) <span class="comment">// 释放空闲块，错误</span></span><br><span class="line">    panic(<span class="string">"freeing free block"</span>);</span><br><span class="line">  bp-&gt;data[bi/<span class="number">8</span>] &amp;= ~m;</span><br><span class="line">  log_write(bp);</span><br><span class="line">  brelse(bp); <span class="comment">// 释放块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h3><p>inode有两种类别：</p><ul><li><p>磁盘上的记录文件大小、数据块扇区号的数据结构</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dinode</span> &#123;</span></span><br><span class="line">  <span class="keyword">short</span> type;           <span class="comment">// 区分文件、目录和特殊文件的 i 节点，0表示为空闲节点</span></span><br><span class="line">  <span class="keyword">short</span> major;          <span class="comment">// 主设备号（仅限T_DEV）</span></span><br><span class="line">  <span class="keyword">short</span> minor;          <span class="comment">// 辅设备号（仅限T_DEV）</span></span><br><span class="line">  <span class="keyword">short</span> nlink;          <span class="comment">// 文件系统中的i节点连接数</span></span><br><span class="line">  uint size;            <span class="comment">// 文件的字节数</span></span><br><span class="line">  uint addrs[NDIRECT+<span class="number">1</span>]; <span class="comment">// 用于这个文件的数据块的块号</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>内存中的一个 i 节点，包含一个磁盘上 i 节点的拷贝，以及一些内核需要的附加信息</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> &#123;</span></span><br><span class="line">  uint dev;           <span class="comment">// Device number 设备号</span></span><br><span class="line">  uint inum;          <span class="comment">// Inode number inode号</span></span><br><span class="line">  <span class="keyword">int</span> ref;            <span class="comment">// Reference count 引用数</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sleeplock</span> <span class="title">lock</span>;</span> <span class="comment">// protects everything below here 保护以下所有数据</span></span><br><span class="line">  <span class="keyword">int</span> valid;          <span class="comment">// inode has been read from disk? i节点是否已从磁盘中读取</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下均为磁盘上的i节点，即dinode，的拷贝</span></span><br><span class="line">  <span class="keyword">short</span> type;         <span class="comment">// copy of disk inode</span></span><br><span class="line">  <span class="keyword">short</span> major;</span><br><span class="line">  <span class="keyword">short</span> minor;</span><br><span class="line">  <span class="keyword">short</span> nlink;</span><br><span class="line">  uint size;</span><br><span class="line">  uint addrs[NDIRECT+<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>xv6中有inode的缓冲区，作用与块缓冲区相似。以下函数分析仅包含进行特殊操作或较为复杂的函数，其余函数仅写出作用和使用条件（如<code>iunlock</code>）。其中函数位于<code>fs.c</code>。</p><h4 id="获取inode-iget"><a href="#获取inode-iget" class="headerlink" title="获取inode iget"></a>获取inode iget</h4><p><code>iget</code>返回的inode的指针将保证这个inode会留在缓存中，不会被删掉且不会被用于缓存另一个文件（即使未读入磁盘dinode内容）。若磁盘内容未读入，则以后在调用<code>ilock</code>时读入。</p><p>其中<code>iget</code>返回的inode的是未被锁的。在目录层的目录查找中，调用者已经对dp上锁，如果在调用<code>iget</code>返回之前尝试去锁上该i节点会有二次锁上dp的可能从而造成死锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*</span></span><br><span class="line"><span class="class"><span class="title">iget</span>(<span class="title">uint</span> <span class="title">dev</span>, <span class="title">uint</span> <span class="title">inum</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">ip</span>, *<span class="title">empty</span>;</span></span><br><span class="line"></span><br><span class="line">  acquire(&amp;icache.lock);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在inode的cache中寻找目标inode</span></span><br><span class="line">  empty = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(ip = &amp;icache.inode[<span class="number">0</span>]; ip &lt; &amp;icache.inode[NINODE]; ip++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ip-&gt;ref &gt; <span class="number">0</span> &amp;&amp; ip-&gt;dev == dev &amp;&amp; ip-&gt;inum == inum)&#123;</span><br><span class="line">      ip-&gt;ref++;</span><br><span class="line">      release(&amp;icache.lock);</span><br><span class="line">      <span class="keyword">return</span> ip; <span class="comment">// 此时返回的i节点内容不一定已从磁盘读入cache</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(empty == <span class="number">0</span> &amp;&amp; ip-&gt;ref == <span class="number">0</span>)    <span class="comment">// 记录扫描到的第一个空槽</span></span><br><span class="line">      empty = ip;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保持inode入口，以下未从磁盘读入内容</span></span><br><span class="line">  <span class="keyword">if</span>(empty == <span class="number">0</span>) <span class="comment">// cache中无i节点空闲，出错</span></span><br><span class="line">    panic(<span class="string">"iget: no inodes"</span>);</span><br><span class="line"></span><br><span class="line">  ip = empty;</span><br><span class="line">  ip-&gt;dev = dev;</span><br><span class="line">  ip-&gt;inum = inum;</span><br><span class="line">  ip-&gt;ref = <span class="number">1</span>;</span><br><span class="line">  ip-&gt;valid = <span class="number">0</span>;</span><br><span class="line">  release(&amp;icache.lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分配inode-ialloc"><a href="#分配inode-ialloc" class="headerlink" title="分配inode ialloc"></a>分配inode ialloc</h4><p>在设备dev上分配inode：通过给它类型类型将其标记为已分配，返回未锁定但已分配和引用的inode。这里与<code>balloc</code>相似，可参照前文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*</span></span><br><span class="line"><span class="class"><span class="title">ialloc</span>(<span class="title">uint</span> <span class="title">dev</span>, <span class="title">short</span> <span class="title">type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> inum;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bp</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dinode</span> *<span class="title">dip</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(inum = <span class="number">1</span>; inum &lt; sb.ninodes; inum++)&#123;</span><br><span class="line">    bp = bread(dev, IBLOCK(inum, sb));</span><br><span class="line">    dip = (struct dinode*)bp-&gt;data + inum%IPB;</span><br><span class="line">    <span class="keyword">if</span>(dip-&gt;type == <span class="number">0</span>)&#123;  <span class="comment">// inode未分配</span></span><br><span class="line">      <span class="built_in">memset</span>(dip, <span class="number">0</span>, <span class="keyword">sizeof</span>(*dip)); <span class="comment">// 分配空间</span></span><br><span class="line">      dip-&gt;type = type;</span><br><span class="line">      log_write(bp);</span><br><span class="line">      brelse(bp);</span><br><span class="line">      <span class="keyword">return</span> iget(dev, inum);</span><br><span class="line">    &#125;</span><br><span class="line">    brelse(bp);</span><br><span class="line">  &#125;</span><br><span class="line">  panic(<span class="string">"ialloc: no inodes"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁inode-ilock"><a href="#锁inode-ilock" class="headerlink" title="锁inode ilock"></a>锁inode ilock</h4><p>锁定给定的inode。如有必要，从磁盘读取inode。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">ilock(struct inode *ip)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bp</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dinode</span> *<span class="title">dip</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ip == <span class="number">0</span> || ip-&gt;ref &lt; <span class="number">1</span>)</span><br><span class="line">    panic(<span class="string">"ilock"</span>);</span><br><span class="line"></span><br><span class="line">  acquiresleep(&amp;ip-&gt;lock); <span class="comment">// 请求inode锁</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ip-&gt;valid == <span class="number">0</span>)&#123; <span class="comment">// inode内容未从磁盘读取</span></span><br><span class="line">    bp = bread(ip-&gt;dev, IBLOCK(ip-&gt;inum, sb));</span><br><span class="line">    dip = (struct dinode*)bp-&gt;data + ip-&gt;inum%IPB;</span><br><span class="line">    ip-&gt;type = dip-&gt;type;</span><br><span class="line">    ip-&gt;major = dip-&gt;major;</span><br><span class="line">    ip-&gt;minor = dip-&gt;minor;</span><br><span class="line">    ip-&gt;nlink = dip-&gt;nlink;</span><br><span class="line">    ip-&gt;size = dip-&gt;size;</span><br><span class="line">    memmove(ip-&gt;addrs, dip-&gt;addrs, <span class="keyword">sizeof</span>(ip-&gt;addrs));</span><br><span class="line">    brelse(bp);</span><br><span class="line">    ip-&gt;valid = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ip-&gt;type == <span class="number">0</span>) <span class="comment">// inode未被分配，出错，引发恐慌</span></span><br><span class="line">      panic(<span class="string">"ilock: no type"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放引用-iput"><a href="#释放引用-iput" class="headerlink" title="释放引用 iput"></a>释放引用 iput</h4><p>释放对内存中的某一inode的引用，即引用数减一。对iput（）的所有调用必须在会话内，因为它可能释放inode。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">iput(struct inode *ip)</span><br><span class="line">&#123;</span><br><span class="line">  acquiresleep(&amp;ip-&gt;lock); <span class="comment">// 请求inode锁</span></span><br><span class="line">  <span class="comment">// 如果这是最后一个引用，则可以回收inode缓存条目。</span></span><br><span class="line">  <span class="keyword">if</span>(ip-&gt;valid &amp;&amp; ip-&gt;nlink == <span class="number">0</span>)&#123;</span><br><span class="line">    acquire(&amp;icache.lock);</span><br><span class="line">    <span class="keyword">int</span> r = ip-&gt;ref;</span><br><span class="line">    release(&amp;icache.lock);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">// inode has no links and no other references: truncate and free.</span></span><br><span class="line">      <span class="comment">// 如果那是最后一个引用并且inode没有连接，释放磁盘上的inode（及其内容）。</span></span><br><span class="line">      itrunc(ip);</span><br><span class="line">      ip-&gt;type = <span class="number">0</span>;</span><br><span class="line">      iupdate(ip);</span><br><span class="line">      ip-&gt;valid = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  releasesleep(&amp;ip-&gt;lock); <span class="comment">// 释放 inode 锁</span></span><br><span class="line"></span><br><span class="line">  acquire(&amp;icache.lock);</span><br><span class="line">  ip-&gt;ref--; <span class="comment">// 引用计数减一</span></span><br><span class="line">  release(&amp;icache.lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><ul><li>readsb 读超级块</li><li>bzero 将块内容清零</li><li>iupdate 将修改后的内存中inode复制到磁盘；必须在每次更改ip-&gt; xxx字段后调用；它存在于磁盘上，因为i-node缓存是直写式的；调用者必须持有i节点锁。</li><li>iunlock 对指定inode解锁</li><li>iunlockput iunlock和iput的结合。由于两种常常一起使用，故整合。</li><li>bmap 返回inode中第n个块的磁盘块地址，如果没有这样的块，bmap会分配一个。</li><li>stati 从inode复制属性信息。</li><li>readi 从inode读数据，调用者必须持有ip-&gt; lock。</li><li>writei 给inode写入数据，调用者必须持有ip-&gt; lock。</li></ul><p><em>其中readi和writei均要求给定的偏移和读出的量不超出文件大小。</em></p><h3 id="目录层"><a href="#目录层" class="headerlink" title="目录层"></a>目录层</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>目录的i节点的类型是T_DIR,.目录本身是以文件的方式存储到磁盘上的，它的数据是一系列的目录条目。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> &#123;</span></span><br><span class="line">  ushort inum; <span class="comment">// i节点号</span></span><br><span class="line">  <span class="keyword">char</span> name[DIRSIZ]; <span class="comment">// 目录名</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>详细注释位于<code>fs.c</code>。</p><ul><li>dirlookup 查找目录中指定名字的条目</li><li>dirlink 会写入一个新的目录条目到某一目录下</li></ul><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><h4 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h4><ul><li>namex </li></ul><p>查找并返回inode以获取路径名。如果parent！= 0，则返回父项的inode并复制最终项。路径元素到名称，必须有DIRSIZ字节的空间。该函数必须在会话内部调用，因为它调用iput（）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*</span></span><br><span class="line"><span class="class"><span class="title">namex</span>(<span class="title">char</span> *<span class="title">path</span>, <span class="title">int</span> <span class="title">nameiparent</span>, <span class="title">char</span> *<span class="title">name</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">ip</span>, *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(*path == <span class="string">'/'</span>) <span class="comment">// 路径以反斜杠开始，则解析从根目录开始</span></span><br><span class="line">    ip = iget(ROOTDEV, ROOTINO);</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">// 其他情况下则从当前目录开始</span></span><br><span class="line">    ip = idup(myproc()-&gt;cwd);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((path = skipelem(path, name)) != <span class="number">0</span>)&#123; <span class="comment">// 考虑路径中的每一个部分</span></span><br><span class="line">    ilock(ip); <span class="comment">// 确保ip-&gt;type从磁盘中加载出来</span></span><br><span class="line">    <span class="keyword">if</span>(ip-&gt;type != T_DIR)&#123; <span class="comment">// 不是目录，查找失败</span></span><br><span class="line">      iunlockput(ip);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后一个路径元素，循环提前结束</span></span><br><span class="line">    <span class="keyword">if</span>(nameiparent &amp;&amp; *path == <span class="string">'\0'</span>)&#123;</span><br><span class="line">      <span class="comment">// Stop one level early. </span></span><br><span class="line">      iunlock(ip);</span><br><span class="line">      <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((next = dirlookup(ip, name, <span class="number">0</span>)) == <span class="number">0</span>)&#123; <span class="comment">// 寻找路径元素失败，查找失败</span></span><br><span class="line">      iunlockput(ip);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    iunlockput(ip);</span><br><span class="line">    ip = next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(nameiparent)&#123;</span><br><span class="line">    iput(ip);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>skipelem 将路径中的下一个路径元素复制到名称中，返回指向复制后的元素的指针。</li><li>namei 解析path并返回对应的inode。</li><li>nameiparent 返回上级目录的i节点并且把最后一个元素拷贝到name中。</li></ul><p><em>函数的详细内容位于<code>fs.c</code></em></p><h3 id="文件描述符层"><a href="#文件描述符层" class="headerlink" title="文件描述符层"></a>文件描述符层</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span></span><br><span class="line">  <span class="keyword">enum</span> &#123; FD_NONE, FD_PIPE, FD_INODE &#125; type; <span class="comment">// 文件分为管道文件和普通文件等，FD_NONE表示文件未使用</span></span><br><span class="line">  <span class="keyword">int</span> ref; <span class="comment">// reference count 引用计数</span></span><br><span class="line">  <span class="keyword">char</span> readable; <span class="comment">// 可读</span></span><br><span class="line">  <span class="keyword">char</span> writable; <span class="comment">// 可写</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">pipe</span>;</span> <span class="comment">// 管道</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">ip</span>;</span> <span class="comment">// 指向i节点</span></span><br><span class="line">  uint off;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>xv6中每个进程都有自己的打开文件表。每个打开文件均由上面的结构体表示，它是一个对i节点或者管道和文件偏移的封装。每次调用<code>open</code>都会创建一个新的file结构体。</p><p>如果多个进程相互独立地打开了同一个文件，不同的实例将拥有不同的I/O偏移。而且同一个file结构体可以在一个进程的文件表中多次出现，同时也可以在多个进程的文件表中出现。对每一个打开的文件都有一个引用计数，一个文件可以被打开用于读、写或者二者。</p><p>系统中所有的打开文件都存在于一个全局的文件表<code>ftable</code>中。</p><h4 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h4><p>该层的函数位于<code>file.c</code>，详细注释见代码文件。</p><ul><li>filealloc 分配文件，扫描整个文件表寻找没有被引用的文件并返回一个新的引用。</li><li>filedup 重复引用文件，增加引用计数。</li><li>fileclose 释放对文件引用的函数，减少引用计数，当一个文件的引用计数变为0的时候，根据文件类型的不同,释放掉当前的管道或者i节点。</li><li>fileread 读文件，实现对文件的<code>read</code>操作</li><li>filewrite 写文件，实现对文件的<code>write</code>操作。</li><li>filestat 获取文件的元信息，实现对文件的<code>stat</code>操作（只允许作用在inode）。</li></ul><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>暂无内容。</p><h2 id="文件系统中xv6可改进之处"><a href="#文件系统中xv6可改进之处" class="headerlink" title="文件系统中xv6可改进之处"></a>文件系统中xv6可改进之处</h2><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><ol><li>使用的替换策略为LRU，算法较为简单。</li><li>链表的使用虽然实现简单，但查找效率低，时间复杂度高。若能使用哈希表等实现查找可提高效率。</li></ol><h3 id="目录查找"><a href="#目录查找" class="headerlink" title="目录查找"></a>目录查找</h3><p>目录查找为线性查找，在目录数量较多的情况下耗时巨大。若能使用树等结构，便能大大减小时间复杂度。</p><h3 id="大小固定"><a href="#大小固定" class="headerlink" title="大小固定"></a>大小固定</h3><p>文件系统的大小在xv6中是不改变的，固定在一个磁盘设备上。这一点对于个人PC影响不大，但在需要存储大量文件或超大文件的情况下，便有些捉襟见肘。</p>]]></content>
    
    <summary type="html">
    
      xv6操作系统之文件系统源码阅读与分析
    
    </summary>
    
      <category term="操作系统" scheme="http://rootreturn0.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="http://rootreturn0.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>GG</title>
    <link href="http://rootreturn0.github.io/2019/08/27/GG/"/>
    <id>http://rootreturn0.github.io/2019/08/27/GG/</id>
    <published>2019-08-26T18:12:49.000Z</published>
    <updated>2019-10-18T17:10:25.516Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码。" />    <label for="pass">请输入密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      What is that?
    
    </summary>
    
      <category term="Me" scheme="http://rootreturn0.github.io/categories/Me/"/>
    
    
      <category term="随笔" scheme="http://rootreturn0.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>世界</title>
    <link href="http://rootreturn0.github.io/2019/08/06/HK/"/>
    <id>http://rootreturn0.github.io/2019/08/06/HK/</id>
    <published>2019-08-06T10:41:51.000Z</published>
    <updated>2019-10-18T17:11:47.476Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码。" />    <label for="pass">请输入密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      弱势群体的和平抗争
    
    </summary>
    
      <category term="Thinking" scheme="http://rootreturn0.github.io/categories/Thinking/"/>
    
    
      <category term="随笔" scheme="http://rootreturn0.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>建站初始日志</title>
    <link href="http://rootreturn0.github.io/2019/07/26/%E5%BB%BA%E7%AB%99%E5%88%9D%E5%A7%8B%E6%97%A5%E5%BF%97/"/>
    <id>http://rootreturn0.github.io/2019/07/26/建站初始日志/</id>
    <published>2019-07-26T06:00:02.000Z</published>
    <updated>2019-10-18T17:48:45.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主题Next"><a href="#主题Next" class="headerlink" title="主题Next"></a>主题Next</h1><p>一开始选用的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia</a>,但由于<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia</a>开发使用的webpack版本较老，定制时易踩坑，故改用<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a>。本文根据官方文档整理，并根据自己喜好加入了一些第三方插件和修改。所有修改将会逐步给出，Next的配置完整说明可参照<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">官方文档</a>。</p><a id="more"></a><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客根目录</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><p>打开根目录中的 <code>_config.yml</code> 文件,更改 <code>theme</code> 为 <code>next</code> 。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>打开 <code>theme/next</code> 中的 <code>_config.yml</code> 文件，选择 <code>Muse</code> 。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><h3 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h3><p>打开根目录中的 <code>_config.yml</code> 文件,设置 <code>language</code> 为 <code>zh-Hans</code> 。</p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><h3 id="主页文章阴影效果"><a href="#主页文章阴影效果" class="headerlink" title="主页文章阴影效果"></a>主页文章阴影效果</h3><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,增加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> <span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line">   <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="修改标签"><a href="#修改标签" class="headerlink" title="修改标签"></a>修改标签</h3><p>打开 <code>themes/next/layout/_macro/post.swig</code> ，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code> 。</p><h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><p>打开 <code>theme/next/layout/_layout.swig</code> ，在 &lt; /body&gt;之前添加代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开 <code>theme/next</code> 中的 <code>_config.yml</code> 文件,将 <code>canvas_next</code> 置为 <code>true</code> 。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="看板狗"><a href="#看板狗" class="headerlink" title="看板狗"></a>看板狗</h3><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br><span class="line">npm install live2d-widget-model-wanko</span><br></pre></td></tr></table></figure><p>打开根目录中的 <code>_config.yml</code> 文件,增加以下代码。其中对 <code>display</code> 部分做了修改，以适应网页布局。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line"><span class="attr">  tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">400</span></span><br><span class="line">    <span class="comment"># 水平位置</span></span><br><span class="line"><span class="attr">    hOffset:</span> <span class="number">40</span></span><br><span class="line">    <span class="comment"># 垂直位置</span></span><br><span class="line"><span class="attr">    vOffset:</span> <span class="bullet">-80</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">true</span> <span class="comment"># 手机中是否展示</span></span><br></pre></td></tr></table></figure><h3 id="Github-Corners"><a href="#Github-Corners" class="headerlink" title="Github Corners"></a>Github Corners</h3><p>打开<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">Github Corners</a>,复制代码并粘贴代码到 <code>themes/next/layout/_layout.swig</code> 文件中(放在 <code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code> 的下面)，并把 <code>href</code> 改为正确的github地址。</p><p>由于比较喜欢这个小家伙一直出现，故更改代码中的 <code>position: absolute</code> 为 <code>position: fixed</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"headband"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">"https://github.com/RootReturn0"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"github-corner"</span> aria-label=<span class="string">"View source on GitHub"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 250 250"</span> <span class="attr">style</span>=<span class="string">"fill:#151513; color:#fff; position: fixed; top: 0; border: 0; right: 0;"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">style</span>=<span class="string">"transform-origin: 130px 106px;"</span> <span class="attr">class</span>=<span class="string">"octo-arm"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">class</span>=<span class="string">"octo-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;@<span class="keyword">keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(0)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-25deg)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(10deg)&#125;&#125;@<span class="keyword">media</span> (max-width:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客根目录</span><br><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>打开根目录中的 <code>_config.yml</code> 文件,添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure><p>打开 <code>theme/next</code> 中的 <code>_config.yml</code> 文件,在 <code>rss</code> 后添加 <code>/atom.xml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>有时写博客并不希望让所有人看到，故加入了加密功能。Hexo是一个静态博客，自己写一个js进行加密虽不困难，但样式实在不可恭维。这里采用大神做出的<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a>进行加密。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客根目录</span><br><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="根本配置"><a href="#根本配置" class="headerlink" title="根本配置"></a>根本配置</h4><p>打开根目录中的 <code>_config.yml</code> 文件,添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>然后在blog的头部添加上对应的字段，如password, abstract, message。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-08-06 19:00:02</span><br><span class="line">password: 你的密码</span><br><span class="line">abstract: 显示在目录页或首页的内容简介。</span><br><span class="line">message:  此处为输入密码时的提示内容。</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>希望修改默认的提示和摘要内容时，你可以添加如下配置在根目录中的 <code>_config.yml</code> 文件中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  default_abstract:</span> <span class="string">这是一篇加密文章，内容可能是xxx</span></span><br><span class="line"><span class="attr">  default_message:</span> <span class="string">输入密码，查看文章。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主题Next&quot;&gt;&lt;a href=&quot;#主题Next&quot; class=&quot;headerlink&quot; title=&quot;主题Next&quot;&gt;&lt;/a&gt;主题Next&lt;/h1&gt;&lt;p&gt;一开始选用的是&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Yilia&lt;/a&gt;,但由于&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Yilia&lt;/a&gt;开发使用的webpack版本较老，定制时易踩坑，故改用&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next&lt;/a&gt;。本文根据官方文档整理，并根据自己喜好加入了一些第三方插件和修改。所有修改将会逐步给出，Next的配置完整说明可参照&lt;a href=&quot;http://theme-next.iissnan.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="建站日志" scheme="http://rootreturn0.github.io/categories/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="http://rootreturn0.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://rootreturn0.github.io/2019/07/25/hello-world/"/>
    <id>http://rootreturn0.github.io/2019/07/25/hello-world/</id>
    <published>2019-07-25T12:43:01.000Z</published>
    <updated>2019-07-26T14:28:49.946Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello world!"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">'Hello world!'</span>)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
